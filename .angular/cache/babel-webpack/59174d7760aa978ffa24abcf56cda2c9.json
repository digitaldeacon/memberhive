{"ast":null,"code":"import _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpService } from './http.service';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nexport var GeocodeService = /*#__PURE__*/(function () {\n  var GeocodeService = /*#__PURE__*/function () {\n    function GeocodeService(_http) {\n      _classCallCheck(this, GeocodeService);\n\n      this._http = _http;\n    }\n\n    _createClass(GeocodeService, [{\n      key: \"apiKey\",\n      set: function set(apiKey) {\n        this._apiKey = apiKey;\n      }\n    }, {\n      key: \"address\",\n      set: function set(address) {\n        this._address = address;\n      }\n    }, {\n      key: \"calc\",\n      value: function calc() {\n        var _this = this;\n\n        var url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(this._formatAddress(), \"&key=\").concat(this._apiKey);\n\n        if (!this._address.street && !this._address.zip && !this._address.city) {\n          return of();\n        }\n\n        return this._http.getRaw(url).pipe(map(function (res) {\n          _this._geoCodes = res.results[0].geometry.location;\n          return _this._geoCodes || undefined;\n        }));\n      }\n    }, {\n      key: \"errors\",\n      get: function get() {\n        return this._errors;\n      }\n    }, {\n      key: \"geoCodes\",\n      get: function get() {\n        return this._geoCodes;\n      }\n    }, {\n      key: \"_formatAddress\",\n      value: function _formatAddress() {\n        var adr = '';\n\n        if (!this._address) {\n          return '';\n        }\n\n        adr = this._address.street ? this._address.street : '';\n        adr += this._address.zip ? ', ' + this._address.zip : '';\n        adr += this._address.city ? ' ' + this._address.city : '';\n        return adr;\n      }\n    }]);\n\n    return GeocodeService;\n  }();\n\n  GeocodeService.ɵfac = function GeocodeService_Factory(t) {\n    return new (t || GeocodeService)(i0.ɵɵinject(i1.HttpService));\n  };\n\n  GeocodeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GeocodeService,\n    factory: GeocodeService.ɵfac\n  });\n  return GeocodeService;\n})();","map":null,"metadata":{},"sourceType":"module"}