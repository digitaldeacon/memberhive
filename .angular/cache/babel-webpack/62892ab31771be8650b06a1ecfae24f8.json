{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { tap, switchMap, catchError, map, concatMap } from 'rxjs/operators';\nimport { Title } from '@angular/platform-browser';\nimport { SettingsActionTypes, ListSettingAction, ListSettingSuccessAction, ListSettingFailureAction, UpdateSettingSuccessAction, UpdateSettingFailureAction, DeletePeopleFilterSuccessAction, SavePeopleFilterSuccessAction } from './settings.actions';\nimport { HttpService } from '../../services/http.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/http.service\";\nimport * as i3 from \"@angular/platform-browser\";\nexport var SettingsEffects = /*#__PURE__*/_createClass(function SettingsEffects(actions$, http, browserTitle) {\n  var _this = this;\n\n  _classCallCheck(this, SettingsEffects);\n\n  this.actions$ = actions$;\n  this.http = http;\n  this.browserTitle = browserTitle;\n  this.getSettings$ = this.actions$.pipe(ofType(SettingsActionTypes.LIST_SETTINGS), tap(function () {\n    return ListSettingAction;\n  }), switchMap(function () {\n    return _this.http.get('settings/list') // TODO: add personId to fetch user settings too\n    .pipe(map(function (r) {\n      return new ListSettingSuccessAction(r);\n    }), catchError(function (r) {\n      return of(new ListSettingFailureAction(r));\n    }));\n  }));\n  this.upsertSettings$ = this.actions$.pipe(ofType(SettingsActionTypes.UPDATE_SETTINGS), map(function (action) {\n    return action.payload;\n  }), switchMap(function (payload) {\n    return _this.http.post('settings/upsert', payload).pipe(map(function (r) {\n      return new UpdateSettingSuccessAction(payload);\n    }), catchError(function (r) {\n      return of(new UpdateSettingFailureAction(r));\n    }));\n  }));\n  this.upsertPeopleFilterSetting$ = this.actions$.pipe(ofType(SettingsActionTypes.SAVE_PEOPLE_FILTER), map(function (action) {\n    return action.payload;\n  }), switchMap(function (payload) {\n    return _this.http.post('settings/upsert-people-filter', payload).pipe(map(function () {\n      return new SavePeopleFilterSuccessAction(payload.term);\n    }), catchError(function (r) {\n      return of(new UpdateSettingFailureAction(r));\n    }));\n  }));\n  this.deletePeopleFilterSetting$ = this.actions$.pipe(ofType(SettingsActionTypes.DELETE_PEOPLE_FILTER), map(function (action) {\n    return action.payload;\n  }), concatMap(function (payload) {\n    return _this.http.post('settings/delete-people-filter', {\n      term: payload\n    }).pipe(map(function () {\n      return new DeletePeopleFilterSuccessAction(payload);\n    }), catchError(function (r) {\n      return of(new UpdateSettingFailureAction(r));\n    }));\n  }));\n  this.setTitle$ = this.actions$.pipe(ofType(SettingsActionTypes.SET_TITLE), map(function (action) {\n    return action.payload;\n  }), tap(function (action) {\n    return _this.browserTitle.setTitle(action + ' - Memberhive');\n  }));\n});\n\nSettingsEffects.ɵfac = function SettingsEffects_Factory(t) {\n  return new (t || SettingsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpService), i0.ɵɵinject(i3.Title));\n};\n\nSettingsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SettingsEffects,\n  factory: SettingsEffects.ɵfac\n});\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], SettingsEffects.prototype, \"getSettings$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], SettingsEffects.prototype, \"upsertSettings$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], SettingsEffects.prototype, \"upsertPeopleFilterSetting$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], SettingsEffects.prototype, \"deletePeopleFilterSetting$\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n}), __metadata(\"design:type\", Observable)], SettingsEffects.prototype, \"setTitle$\", void 0);","map":null,"metadata":{},"sourceType":"module"}