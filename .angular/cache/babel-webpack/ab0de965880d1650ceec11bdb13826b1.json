{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nvar _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var formFieldId_r1 = ctx.id;\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nvar _c1 = [\"*\"];\nvar _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nvar MatAutocompleteSelectedEvent = /*#__PURE__*/_createClass(function MatAutocompleteSelectedEvent(\n/** Reference to the autocomplete panel that emitted the event. */\nsource,\n/** Option that was selected. */\noption) {\n  _classCallCheck(this, MatAutocompleteSelectedEvent);\n\n  this.source = source;\n  this.option = option;\n}); // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nvar _MatAutocompleteMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _createClass(_class);\n}());\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nvar MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nvar _MatAutocompleteBase = /*#__PURE__*/(function () {\n  var _MatAutocompleteBase = /*#__PURE__*/function (_MatAutocompleteMixin) {\n    _inherits(_MatAutocompleteBase, _MatAutocompleteMixin);\n\n    var _super = _createSuper(_MatAutocompleteBase);\n\n    function _MatAutocompleteBase(_changeDetectorRef, _elementRef, defaults, platform) {\n      var _this;\n\n      _classCallCheck(this, _MatAutocompleteBase);\n\n      _this = _super.call(this);\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._elementRef = _elementRef;\n      _this._activeOptionChanges = Subscription.EMPTY;\n      /** Whether the autocomplete panel should be visible, depending on option length. */\n\n      _this.showPanel = false;\n      _this._isOpen = false;\n      /** Function that maps an option's control value to its display value in the trigger. */\n\n      _this.displayWith = null;\n      /** Event that is emitted whenever an option from the list is selected. */\n\n      _this.optionSelected = new EventEmitter();\n      /** Event that is emitted when the autocomplete panel is opened. */\n\n      _this.opened = new EventEmitter();\n      /** Event that is emitted when the autocomplete panel is closed. */\n\n      _this.closed = new EventEmitter();\n      /** Emits whenever an option is activated using the keyboard. */\n\n      _this.optionActivated = new EventEmitter();\n      _this._classList = {};\n      /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n      _this.id = \"mat-autocomplete-\".concat(_uniqueAutocompleteIdCounter++); // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n      // Safari using VoiceOver. We should occasionally check back to see whether the bug\n      // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n      // option altogether.\n\n      _this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n      _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n      return _this;\n    }\n    /** Whether the autocomplete panel is open. */\n\n\n    _createClass(_MatAutocompleteBase, [{\n      key: \"isOpen\",\n      get: function get() {\n        return this._isOpen && this.showPanel;\n      }\n      /**\n       * Whether the first option should be highlighted when the autocomplete panel is opened.\n       * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n       */\n\n    }, {\n      key: \"autoActiveFirstOption\",\n      get: function get() {\n        return this._autoActiveFirstOption;\n      },\n      set: function set(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n      }\n      /**\n       * Takes classes set on the host mat-autocomplete element and applies them to the panel\n       * inside the overlay container to allow for easy styling.\n       */\n\n    }, {\n      key: \"classList\",\n      set: function set(value) {\n        if (value && value.length) {\n          this._classList = coerceStringArray(value).reduce(function (classList, className) {\n            classList[className] = true;\n            return classList;\n          }, {});\n        } else {\n          this._classList = {};\n        }\n\n        this._setVisibilityClasses(this._classList);\n\n        this._elementRef.nativeElement.className = '';\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this2 = this;\n\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(function (index) {\n          if (_this2.isOpen) {\n            _this2.optionActivated.emit({\n              source: _this2,\n              option: _this2.options.toArray()[index] || null\n            });\n          }\n        }); // Set the initial visibility state.\n\n        this._setVisibility();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n      }\n      /**\n       * Sets the panel scrollTop. This allows us to manually scroll to display options\n       * above or below the fold, as they are not actually being focused when active.\n       */\n\n    }, {\n      key: \"_setScrollTop\",\n      value: function _setScrollTop(scrollTop) {\n        if (this.panel) {\n          this.panel.nativeElement.scrollTop = scrollTop;\n        }\n      }\n      /** Returns the panel's scrollTop. */\n\n    }, {\n      key: \"_getScrollTop\",\n      value: function _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n      }\n      /** Panel should hide itself when the option list is empty. */\n\n    }, {\n      key: \"_setVisibility\",\n      value: function _setVisibility() {\n        this.showPanel = !!this.options.length;\n\n        this._setVisibilityClasses(this._classList);\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /** Emits the `select` event. */\n\n    }, {\n      key: \"_emitSelectEvent\",\n      value: function _emitSelectEvent(option) {\n        var event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n      }\n      /** Gets the aria-labelledby for the autocomplete panel. */\n\n    }, {\n      key: \"_getPanelAriaLabelledby\",\n      value: function _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n          return null;\n        }\n\n        var labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n      }\n      /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n    }, {\n      key: \"_setVisibilityClasses\",\n      value: function _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n      }\n    }]);\n\n    return _MatAutocompleteBase;\n  }(_MatAutocompleteMixinBase);\n\n  _MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n    return new (t || _MatAutocompleteBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i1.Platform));\n  };\n\n  _MatAutocompleteBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatAutocompleteBase,\n    viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 7);\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      displayWith: \"displayWith\",\n      autoActiveFirstOption: \"autoActiveFirstOption\",\n      panelWidth: \"panelWidth\",\n      classList: [\"class\", \"classList\"]\n    },\n    outputs: {\n      optionSelected: \"optionSelected\",\n      opened: \"opened\",\n      closed: \"closed\",\n      optionActivated: \"optionActivated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatAutocompleteBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatAutocomplete = /*#__PURE__*/(function () {\n  var MatAutocomplete = /*#__PURE__*/function (_MatAutocompleteBase2) {\n    _inherits(MatAutocomplete, _MatAutocompleteBase2);\n\n    var _super2 = _createSuper(MatAutocomplete);\n\n    function MatAutocomplete() {\n      var _this3;\n\n      _classCallCheck(this, MatAutocomplete);\n\n      _this3 = _super2.apply(this, arguments);\n      _this3._visibleClass = 'mat-autocomplete-visible';\n      _this3._hiddenClass = 'mat-autocomplete-hidden';\n      return _this3;\n    }\n\n    return _createClass(MatAutocomplete);\n  }(_MatAutocompleteBase);\n\n  MatAutocomplete.ɵfac = /* @__PURE__ */function () {\n    var ɵMatAutocomplete_BaseFactory;\n    return function MatAutocomplete_Factory(t) {\n      return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n    };\n  }();\n\n  MatAutocomplete.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatAutocomplete,\n    selectors: [[\"mat-autocomplete\"]],\n    contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-autocomplete\"],\n    inputs: {\n      disableRipple: \"disableRipple\"\n    },\n    exportAs: [\"matAutocomplete\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n    template: function MatAutocomplete_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n      }\n    },\n    directives: [i2.NgClass],\n    styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatAutocomplete;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\nvar MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return MatAutocompleteTrigger;\n  }),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nvar _MatAutocompleteTriggerBase = /*#__PURE__*/(function () {\n  var _MatAutocompleteTriggerBase = /*#__PURE__*/function () {\n    function _MatAutocompleteTriggerBase(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n      var _this4 = this;\n\n      _classCallCheck(this, _MatAutocompleteTriggerBase);\n\n      this._element = _element;\n      this._overlay = _overlay;\n      this._viewContainerRef = _viewContainerRef;\n      this._zone = _zone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dir = _dir;\n      this._formField = _formField;\n      this._document = _document;\n      this._viewportRuler = _viewportRuler;\n      this._defaults = _defaults;\n      this._componentDestroyed = false;\n      this._autocompleteDisabled = false;\n      /** Whether or not the label state is being overridden. */\n\n      this._manuallyFloatingLabel = false;\n      /** Subscription to viewport size changes. */\n\n      this._viewportSubscription = Subscription.EMPTY;\n      /**\n       * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n       * closed autocomplete from being reopened if the user switches to another browser tab and then\n       * comes back.\n       */\n\n      this._canOpenOnNextFocus = true;\n      /** Stream of keyboard events that can close the panel. */\n\n      this._closeKeyEventStream = new Subject();\n      /**\n       * Event handler for when the window is blurred. Needs to be an\n       * arrow function in order to preserve the context.\n       */\n\n      this._windowBlurHandler = function () {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        _this4._canOpenOnNextFocus = _this4._document.activeElement !== _this4._element.nativeElement || _this4.panelOpen;\n      };\n      /** `View -> model callback called when value changes` */\n\n\n      this._onChange = function () {};\n      /** `View -> model callback called when autocomplete has been touched` */\n\n\n      this._onTouched = function () {};\n      /**\n       * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n       * will render the panel underneath the trigger if there is enough space for it to fit in\n       * the viewport, otherwise the panel will be shown above it. If the position is set to\n       * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n       * whether it fits completely in the viewport.\n       */\n\n\n      this.position = 'auto';\n      /**\n       * `autocomplete` attribute to be set on the input element.\n       * @docs-private\n       */\n\n      this.autocompleteAttribute = 'off';\n      this._overlayAttached = false;\n      /** Stream of autocomplete option selections. */\n\n      this.optionSelections = defer(function () {\n        if (_this4.autocomplete && _this4.autocomplete.options) {\n          return merge.apply(void 0, _toConsumableArray(_this4.autocomplete.options.map(function (option) {\n            return option.onSelectionChange;\n          })));\n        } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n\n\n        return _this4._zone.onStable.pipe(take(1), switchMap(function () {\n          return _this4.optionSelections;\n        }));\n      });\n      this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n\n\n    _createClass(_MatAutocompleteTriggerBase, [{\n      key: \"autocompleteDisabled\",\n      get: function get() {\n        return this._autocompleteDisabled;\n      },\n      set: function set(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this5 = this;\n\n        var window = this._getWindow();\n\n        if (typeof window !== 'undefined') {\n          this._zone.runOutsideAngular(function () {\n            return window.addEventListener('blur', _this5._windowBlurHandler);\n          });\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n          this._setStrategyPositions(this._positionStrategy);\n\n          if (this.panelOpen) {\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var window = this._getWindow();\n\n        if (typeof window !== 'undefined') {\n          window.removeEventListener('blur', this._windowBlurHandler);\n        }\n\n        this._viewportSubscription.unsubscribe();\n\n        this._componentDestroyed = true;\n\n        this._destroyPanel();\n\n        this._closeKeyEventStream.complete();\n      }\n      /** Whether or not the autocomplete panel is open. */\n\n    }, {\n      key: \"panelOpen\",\n      get: function get() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n      }\n      /** Opens the autocomplete suggestion panel. */\n\n    }, {\n      key: \"openPanel\",\n      value: function openPanel() {\n        this._attachOverlay();\n\n        this._floatLabel();\n      }\n      /** Closes the autocomplete suggestion panel. */\n\n    }, {\n      key: \"closePanel\",\n      value: function closePanel() {\n        this._resetLabel();\n\n        if (!this._overlayAttached) {\n          return;\n        }\n\n        if (this.panelOpen) {\n          // Only emit if the panel was visible.\n          this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete._isOpen = this._overlayAttached = false;\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n\n          this._closingActionsSubscription.unsubscribe();\n        } // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n        if (!this._componentDestroyed) {\n          // We need to trigger change detection manually, because\n          // `fromEvent` doesn't seem to do it at the proper time.\n          // This ensures that the label is reset when the\n          // user clicks outside.\n          this._changeDetectorRef.detectChanges();\n        }\n      }\n      /**\n       * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n       * within the viewport.\n       */\n\n    }, {\n      key: \"updatePosition\",\n      value: function updatePosition() {\n        if (this._overlayAttached) {\n          this._overlayRef.updatePosition();\n        }\n      }\n      /**\n       * A stream of actions that should close the autocomplete panel, including\n       * when an option is selected, on blur, and when TAB is pressed.\n       */\n\n    }, {\n      key: \"panelClosingActions\",\n      get: function get() {\n        var _this6 = this;\n\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(function () {\n          return _this6._overlayAttached;\n        })), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(function () {\n          return _this6._overlayAttached;\n        })) : of()).pipe( // Normalize the output so we return a consistent type.\n        map(function (event) {\n          return event instanceof MatOptionSelectionChange ? event : null;\n        }));\n      }\n      /** The currently active option, coerced to MatOption type. */\n\n    }, {\n      key: \"activeOption\",\n      get: function get() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n          return this.autocomplete._keyManager.activeItem;\n        }\n\n        return null;\n      }\n      /** Stream of clicks outside of the autocomplete panel. */\n\n    }, {\n      key: \"_getOutsideClickStream\",\n      value: function _getOutsideClickStream() {\n        var _this7 = this;\n\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(function (event) {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          var clickTarget = _getEventTarget(event);\n\n          var formField = _this7._formField ? _this7._formField._elementRef.nativeElement : null;\n          var customOrigin = _this7.connectedTo ? _this7.connectedTo.elementRef.nativeElement : null;\n          return _this7._overlayAttached && clickTarget !== _this7._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!_this7._overlayRef && !_this7._overlayRef.overlayElement.contains(clickTarget);\n        }));\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        var _this8 = this;\n\n        Promise.resolve(null).then(function () {\n          return _this8._setTriggerValue(value);\n        });\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChange = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n      }\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n          this.activeOption._selectViaInteraction();\n\n          this._resetActiveItem();\n\n          event.preventDefault();\n        } else if (this.autocomplete) {\n          var prevActiveItem = this.autocomplete._keyManager.activeItem;\n          var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n          if (this.panelOpen || keyCode === TAB) {\n            this.autocomplete._keyManager.onKeydown(event);\n          } else if (isArrowKey && this._canOpen()) {\n            this.openPanel();\n          }\n\n          if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n            this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n          }\n        }\n      }\n    }, {\n      key: \"_handleInput\",\n      value: function _handleInput(event) {\n        var target = event.target;\n        var value = target.value; // Based on `NumberValueAccessor` from forms.\n\n        if (target.type === 'number') {\n          value = value == '' ? null : parseFloat(value);\n        } // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n        if (this._previousValue !== value) {\n          this._previousValue = value;\n\n          this._onChange(value);\n\n          if (this._canOpen() && this._document.activeElement === event.target) {\n            this.openPanel();\n          }\n        }\n      }\n    }, {\n      key: \"_handleFocus\",\n      value: function _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n          this._canOpenOnNextFocus = true;\n        } else if (this._canOpen()) {\n          this._previousValue = this._element.nativeElement.value;\n\n          this._attachOverlay();\n\n          this._floatLabel(true);\n        }\n      }\n      /**\n       * In \"auto\" mode, the label will animate down as soon as focus is lost.\n       * This causes the value to jump when selecting an option with the mouse.\n       * This method manually floats the label until the panel can be closed.\n       * @param shouldAnimate Whether the label should be animated when it is floated.\n       */\n\n    }, {\n      key: \"_floatLabel\",\n      value: function _floatLabel() {\n        var shouldAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (this._formField && this._formField.floatLabel === 'auto') {\n          if (shouldAnimate) {\n            this._formField._animateAndLockLabel();\n          } else {\n            this._formField.floatLabel = 'always';\n          }\n\n          this._manuallyFloatingLabel = true;\n        }\n      }\n      /** If the label has been manually elevated, return it to its normal state. */\n\n    }, {\n      key: \"_resetLabel\",\n      value: function _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n          this._formField.floatLabel = 'auto';\n          this._manuallyFloatingLabel = false;\n        }\n      }\n      /**\n       * This method listens to a stream of panel closing actions and resets the\n       * stream every time the option list changes.\n       */\n\n    }, {\n      key: \"_subscribeToClosingActions\",\n      value: function _subscribeToClosingActions() {\n        var _this9 = this;\n\n        var firstStable = this._zone.onStable.pipe(take(1));\n\n        var optionChanges = this.autocomplete.options.changes.pipe(tap(function () {\n          return _this9._positionStrategy.reapplyLastPosition();\n        }), // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0)); // When the zone is stable initially, and when the option list changes...\n\n        return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(function () {\n          var wasOpen = _this9.panelOpen;\n\n          _this9._resetActiveItem();\n\n          _this9.autocomplete._setVisibility();\n\n          if (_this9.panelOpen) {\n            _this9._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n            // event, because we may not have emitted it when the panel was attached. This\n            // can happen if the users opens the panel and there are no options, but the\n            // options come in slightly later or as a result of the value changing.\n\n\n            if (wasOpen !== _this9.panelOpen) {\n              _this9.autocomplete.opened.emit();\n            }\n          }\n\n          return _this9.panelClosingActions;\n        }), // when the first closing event occurs...\n        take(1)) // set the value, close the panel, and complete.\n        .subscribe(function (event) {\n          return _this9._setValueAndClose(event);\n        });\n      }\n      /** Destroys the autocomplete suggestion panel. */\n\n    }, {\n      key: \"_destroyPanel\",\n      value: function _destroyPanel() {\n        if (this._overlayRef) {\n          this.closePanel();\n\n          this._overlayRef.dispose();\n\n          this._overlayRef = null;\n        }\n      }\n    }, {\n      key: \"_setTriggerValue\",\n      value: function _setTriggerValue(value) {\n        var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n        var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n\n        if (this._formField) {\n          this._formField._control.value = inputValue;\n        } else {\n          this._element.nativeElement.value = inputValue;\n        }\n\n        this._previousValue = inputValue;\n      }\n      /**\n       * This method closes the panel, and if a value is specified, also sets the associated\n       * control to that value. It will also mark the control as dirty if this interaction\n       * stemmed from the user.\n       */\n\n    }, {\n      key: \"_setValueAndClose\",\n      value: function _setValueAndClose(event) {\n        if (event && event.source) {\n          this._clearPreviousSelectedOption(event.source);\n\n          this._setTriggerValue(event.source.value);\n\n          this._onChange(event.source.value);\n\n          this._element.nativeElement.focus();\n\n          this.autocomplete._emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n      }\n      /**\n       * Clear any previous selected option and emit a selection change event for this option\n       */\n\n    }, {\n      key: \"_clearPreviousSelectedOption\",\n      value: function _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(function (option) {\n          if (option !== skip && option.selected) {\n            option.deselect();\n          }\n        });\n      }\n    }, {\n      key: \"_attachOverlay\",\n      value: function _attachOverlay() {\n        var _this10 = this;\n\n        var _a;\n\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatAutocompleteMissingPanelError();\n        }\n\n        var overlayRef = this._overlayRef;\n\n        if (!overlayRef) {\n          this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n            id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n          });\n          overlayRef = this._overlay.create(this._getOverlayConfig());\n          this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n          // the overlay event targeting provided by the CDK overlay.\n\n          overlayRef.keydownEvents().subscribe(function (event) {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n              _this10._closeKeyEventStream.next();\n\n              _this10._resetActiveItem(); // We need to stop propagation, otherwise the event will eventually\n              // reach the input itself and cause the overlay to be reopened.\n\n\n              event.stopPropagation();\n              event.preventDefault();\n            }\n          });\n          this._viewportSubscription = this._viewportRuler.change().subscribe(function () {\n            if (_this10.panelOpen && overlayRef) {\n              overlayRef.updateSize({\n                width: _this10._getPanelWidth()\n              });\n            }\n          });\n        } else {\n          // Update the trigger, panel width and direction, in case anything has changed.\n          this._positionStrategy.setOrigin(this._getConnectedElement());\n\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n          overlayRef.attach(this._portal);\n          this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n\n        var wasOpen = this.panelOpen;\n\n        this.autocomplete._setVisibility();\n\n        this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n          this.autocomplete.opened.emit();\n        }\n      }\n    }, {\n      key: \"_getOverlayConfig\",\n      value: function _getOverlayConfig() {\n        var _a;\n\n        return new OverlayConfig({\n          positionStrategy: this._getOverlayPosition(),\n          scrollStrategy: this._scrollStrategy(),\n          width: this._getPanelWidth(),\n          direction: this._dir,\n          panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n        });\n      }\n    }, {\n      key: \"_getOverlayPosition\",\n      value: function _getOverlayPosition() {\n        var strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n        this._setStrategyPositions(strategy);\n\n        this._positionStrategy = strategy;\n        return strategy;\n      }\n      /** Sets the positions on a position strategy based on the directive's input state. */\n\n    }, {\n      key: \"_setStrategyPositions\",\n      value: function _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        var belowPositions = [{\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        }, {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        }]; // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n\n        var panelClass = this._aboveClass;\n        var abovePositions = [{\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n          panelClass: panelClass\n        }, {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom',\n          panelClass: panelClass\n        }];\n        var positions;\n\n        if (this.position === 'above') {\n          positions = abovePositions;\n        } else if (this.position === 'below') {\n          positions = belowPositions;\n        } else {\n          positions = [].concat(belowPositions, abovePositions);\n        }\n\n        positionStrategy.withPositions(positions);\n      }\n    }, {\n      key: \"_getConnectedElement\",\n      value: function _getConnectedElement() {\n        if (this.connectedTo) {\n          return this.connectedTo.elementRef;\n        }\n\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n      }\n    }, {\n      key: \"_getPanelWidth\",\n      value: function _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n      }\n      /** Returns the width of the input element, so the panel width can match it. */\n\n    }, {\n      key: \"_getHostWidth\",\n      value: function _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n      }\n      /**\n       * Resets the active item to -1 so arrow events will activate the\n       * correct options, or to 0 if the consumer opted into it.\n       */\n\n    }, {\n      key: \"_resetActiveItem\",\n      value: function _resetActiveItem() {\n        var autocomplete = this.autocomplete;\n\n        if (autocomplete.autoActiveFirstOption) {\n          // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n          // the former will find the next enabled option, if the first one is disabled.\n          autocomplete._keyManager.setFirstItemActive();\n        } else {\n          autocomplete._keyManager.setActiveItem(-1);\n        }\n      }\n      /** Determines whether the panel can be opened. */\n\n    }, {\n      key: \"_canOpen\",\n      value: function _canOpen() {\n        var element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n      }\n      /** Use defaultView of injected document if available or fallback to global window reference */\n\n    }, {\n      key: \"_getWindow\",\n      value: function _getWindow() {\n        var _a;\n\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n      }\n      /** Scrolls to a particular option in the list. */\n\n    }, {\n      key: \"_scrollToOption\",\n      value: function _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        var autocomplete = this.autocomplete;\n\n        var labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n        if (index === 0 && labelCount === 1) {\n          // If we've got one group label before the option and we're at the top option,\n          // scroll the list to the top. This is better UX than scrolling the list to the\n          // top of the option, because it allows the user to read the top group's label.\n          autocomplete._setScrollTop(0);\n        } else if (autocomplete.panel) {\n          var option = autocomplete.options.toArray()[index];\n\n          if (option) {\n            var element = option._getHostElement();\n\n            var newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n            autocomplete._setScrollTop(newScrollPosition);\n          }\n        }\n      }\n    }]);\n\n    return _MatAutocompleteTriggerBase;\n  }();\n\n  _MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n    return new (t || _MatAutocompleteTriggerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n  };\n\n  _MatAutocompleteTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatAutocompleteTriggerBase,\n    inputs: {\n      autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n      position: [\"matAutocompletePosition\", \"position\"],\n      connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"],\n      autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n      autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"]\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return _MatAutocompleteTriggerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatAutocompleteTrigger = /*#__PURE__*/(function () {\n  var MatAutocompleteTrigger = /*#__PURE__*/function (_MatAutocompleteTrigg) {\n    _inherits(MatAutocompleteTrigger, _MatAutocompleteTrigg);\n\n    var _super3 = _createSuper(MatAutocompleteTrigger);\n\n    function MatAutocompleteTrigger() {\n      var _this11;\n\n      _classCallCheck(this, MatAutocompleteTrigger);\n\n      _this11 = _super3.apply(this, arguments);\n      _this11._aboveClass = 'mat-autocomplete-panel-above';\n      return _this11;\n    }\n\n    return _createClass(MatAutocompleteTrigger);\n  }(_MatAutocompleteTriggerBase);\n\n  MatAutocompleteTrigger.ɵfac = /* @__PURE__ */function () {\n    var ɵMatAutocompleteTrigger_BaseFactory;\n    return function MatAutocompleteTrigger_Factory(t) {\n      return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n    };\n  }();\n\n  MatAutocompleteTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatAutocompleteTrigger,\n    selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n    hostAttrs: [1, \"mat-autocomplete-trigger\"],\n    hostVars: 7,\n    hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n          return ctx._handleFocus();\n        })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n          return ctx._onTouched();\n        })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n          return ctx._handleInput($event);\n        })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n      }\n    },\n    exportAs: [\"matAutocompleteTrigger\"],\n    features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAutocompleteTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nvar _MatAutocompleteOriginBase = /*#__PURE__*/(function () {\n  var _MatAutocompleteOriginBase = /*#__PURE__*/_createClass(function _MatAutocompleteOriginBase(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    _classCallCheck(this, _MatAutocompleteOriginBase);\n\n    this.elementRef = elementRef;\n  });\n\n  _MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n    return new (t || _MatAutocompleteOriginBase)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  _MatAutocompleteOriginBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatAutocompleteOriginBase\n  });\n  return _MatAutocompleteOriginBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nvar MatAutocompleteOrigin = /*#__PURE__*/(function () {\n  var MatAutocompleteOrigin = /*#__PURE__*/function (_MatAutocompleteOrigi) {\n    _inherits(MatAutocompleteOrigin, _MatAutocompleteOrigi);\n\n    var _super4 = _createSuper(MatAutocompleteOrigin);\n\n    function MatAutocompleteOrigin() {\n      _classCallCheck(this, MatAutocompleteOrigin);\n\n      return _super4.apply(this, arguments);\n    }\n\n    return _createClass(MatAutocompleteOrigin);\n  }(_MatAutocompleteOriginBase);\n\n  MatAutocompleteOrigin.ɵfac = /* @__PURE__ */function () {\n    var ɵMatAutocompleteOrigin_BaseFactory;\n    return function MatAutocompleteOrigin_Factory(t) {\n      return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n    };\n  }();\n\n  MatAutocompleteOrigin.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatAutocompleteOrigin,\n    selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n    exportAs: [\"matAutocompleteOrigin\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAutocompleteOrigin;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatAutocompleteModule = /*#__PURE__*/(function () {\n  var MatAutocompleteModule = /*#__PURE__*/_createClass(function MatAutocompleteModule() {\n    _classCallCheck(this, MatAutocompleteModule);\n  });\n\n  MatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n    return new (t || MatAutocompleteModule)();\n  };\n\n  MatAutocompleteModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatAutocompleteModule\n  });\n  MatAutocompleteModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n  });\n  return MatAutocompleteModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError }; //# sourceMappingURL=autocomplete.mjs.map","map":null,"metadata":{},"sourceType":"module"}