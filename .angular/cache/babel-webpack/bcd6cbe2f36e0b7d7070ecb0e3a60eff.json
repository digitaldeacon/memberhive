{"ast":null,"code":"import _assertThisInitialized from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { ElementRef, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\n\nfunction throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\n\n\nfunction throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\n\n\nfunction throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\n\n\nfunction throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\n\n\nfunction throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\n\n\nfunction throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\n\n\nvar Portal = /*#__PURE__*/function () {\n  function Portal() {\n    _classCallCheck(this, Portal);\n  }\n\n  _createClass(Portal, [{\n    key: \"attach\",\n    value:\n    /** Attach this portal to a host. */\n    function attach(host) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (host == null) {\n          throwNullPortalOutletError();\n        }\n\n        if (host.hasAttached()) {\n          throwPortalAlreadyAttachedError();\n        }\n      }\n\n      this._attachedHost = host;\n      return host.attach(this);\n    }\n    /** Detach this portal from its host */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var host = this._attachedHost;\n\n      if (host != null) {\n        this._attachedHost = null;\n        host.detach();\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throwNoPortalAttachedError();\n      }\n    }\n    /** Whether this portal is attached to a host. */\n\n  }, {\n    key: \"isAttached\",\n    get: function get() {\n      return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n\n  }, {\n    key: \"setAttachedHost\",\n    value: function setAttachedHost(host) {\n      this._attachedHost = host;\n    }\n  }]);\n\n  return Portal;\n}();\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\n\nvar ComponentPortal = /*#__PURE__*/function (_Portal) {\n  _inherits(ComponentPortal, _Portal);\n\n  var _super = _createSuper(ComponentPortal);\n\n  function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n    var _this;\n\n    _classCallCheck(this, ComponentPortal);\n\n    _this = _super.call(this);\n    _this.component = component;\n    _this.viewContainerRef = viewContainerRef;\n    _this.injector = injector;\n    _this.componentFactoryResolver = componentFactoryResolver;\n    return _this;\n  }\n\n  return _createClass(ComponentPortal);\n}(Portal);\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\n\n\nvar TemplatePortal = /*#__PURE__*/function (_Portal2) {\n  _inherits(TemplatePortal, _Portal2);\n\n  var _super2 = _createSuper(TemplatePortal);\n\n  function TemplatePortal(template, viewContainerRef, context) {\n    var _this2;\n\n    _classCallCheck(this, TemplatePortal);\n\n    _this2 = _super2.call(this);\n    _this2.templateRef = template;\n    _this2.viewContainerRef = viewContainerRef;\n    _this2.context = context;\n    return _this2;\n  }\n\n  _createClass(TemplatePortal, [{\n    key: \"origin\",\n    get: function get() {\n      return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(host) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;\n      this.context = context;\n      return _get(_getPrototypeOf(TemplatePortal.prototype), \"attach\", this).call(this, host);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.context = undefined;\n      return _get(_getPrototypeOf(TemplatePortal.prototype), \"detach\", this).call(this);\n    }\n  }]);\n\n  return TemplatePortal;\n}(Portal);\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\n\n\nvar DomPortal = /*#__PURE__*/function (_Portal3) {\n  _inherits(DomPortal, _Portal3);\n\n  var _super3 = _createSuper(DomPortal);\n\n  function DomPortal(element) {\n    var _this3;\n\n    _classCallCheck(this, DomPortal);\n\n    _this3 = _super3.call(this);\n    _this3.element = element instanceof ElementRef ? element.nativeElement : element;\n    return _this3;\n  }\n\n  return _createClass(DomPortal);\n}(Portal);\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\n\n\nvar BasePortalOutlet = /*#__PURE__*/function () {\n  function BasePortalOutlet() {\n    _classCallCheck(this, BasePortalOutlet);\n\n    /** Whether this host has already been permanently disposed. */\n    this._isDisposed = false; // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n\n    this.attachDomPortal = null;\n  }\n  /** Whether this host has an attached portal. */\n\n\n  _createClass(BasePortalOutlet, [{\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!portal) {\n          throwNullPortalError();\n        }\n\n        if (this.hasAttached()) {\n          throwPortalAlreadyAttachedError();\n        }\n\n        if (this._isDisposed) {\n          throwPortalOutletAlreadyDisposedError();\n        }\n      }\n\n      if (portal instanceof ComponentPortal) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal);\n      } else if (portal instanceof TemplatePortal) {\n        this._attachedPortal = portal;\n        return this.attachTemplatePortal(portal); // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n      } else if (this.attachDomPortal && portal instanceof DomPortal) {\n        this._attachedPortal = portal;\n        return this.attachDomPortal(portal);\n      }\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throwUnknownPortalTypeError();\n      }\n    }\n    /** Detaches a previously attached portal. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._attachedPortal) {\n        this._attachedPortal.setAttachedHost(null);\n\n        this._attachedPortal = null;\n      }\n\n      this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.hasAttached()) {\n        this.detach();\n      }\n\n      this._invokeDisposeFn();\n\n      this._isDisposed = true;\n    }\n    /** @docs-private */\n\n  }, {\n    key: \"setDisposeFn\",\n    value: function setDisposeFn(fn) {\n      this._disposeFn = fn;\n    }\n  }, {\n    key: \"_invokeDisposeFn\",\n    value: function _invokeDisposeFn() {\n      if (this._disposeFn) {\n        this._disposeFn();\n\n        this._disposeFn = null;\n      }\n    }\n  }]);\n\n  return BasePortalOutlet;\n}();\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar BasePortalHost = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(BasePortalHost, _BasePortalOutlet);\n\n  var _super4 = _createSuper(BasePortalHost);\n\n  function BasePortalHost() {\n    _classCallCheck(this, BasePortalHost);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(BasePortalHost);\n}(BasePortalOutlet);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\n\n\nvar DomPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet2) {\n  _inherits(DomPortalOutlet, _BasePortalOutlet2);\n\n  var _super5 = _createSuper(DomPortalOutlet);\n\n  function DomPortalOutlet(\n  /** Element into which the content is projected. */\n  outletElement, _componentFactoryResolver, _appRef, _defaultInjector,\n  /**\n   * @deprecated `_document` Parameter to be made required.\n   * @breaking-change 10.0.0\n   */\n  _document) {\n    var _thisSuper, _this4;\n\n    _classCallCheck(this, DomPortalOutlet);\n\n    _this4 = _super5.call(this);\n    _this4.outletElement = outletElement;\n    _this4._componentFactoryResolver = _componentFactoryResolver;\n    _this4._appRef = _appRef;\n    _this4._defaultInjector = _defaultInjector;\n    /**\n     * Attaches a DOM portal by transferring its content into the outlet.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this4.attachDomPortal = function (portal) {\n      // @breaking-change 10.0.0 Remove check and error once the\n      // `_document` constructor parameter is required.\n      if (!_this4._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Cannot attach DOM portal without _document constructor parameter');\n      }\n\n      var element = portal.element;\n\n      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('DOM portal content must be attached to a parent node.');\n      } // Anchor used to save the element's previous position so\n      // that we can restore it when the portal is detached.\n\n\n      var anchorNode = _this4._document.createComment('dom-portal');\n\n      element.parentNode.insertBefore(anchorNode, element);\n\n      _this4.outletElement.appendChild(element);\n\n      _this4._attachedPortal = portal;\n\n      _get((_thisSuper = _assertThisInitialized(_this4), _getPrototypeOf(DomPortalOutlet.prototype)), \"setDisposeFn\", _thisSuper).call(_thisSuper, function () {\n        // We can't use `replaceWith` here because IE doesn't support it.\n        if (anchorNode.parentNode) {\n          anchorNode.parentNode.replaceChild(element, anchorNode);\n        }\n      });\n    };\n\n    _this4._document = _document;\n    return _this4;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n\n\n  _createClass(DomPortalOutlet, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      var _this5 = this;\n\n      var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n      var componentFactory = resolver.resolveComponentFactory(portal.component);\n      var componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n      // for the component (in terms of Angular's component tree, not rendering).\n      // When the ViewContainerRef is missing, we use the factory to create the component directly\n      // and then manually attach the view to the application.\n\n      if (portal.viewContainerRef) {\n        componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n        this.setDisposeFn(function () {\n          return componentRef.destroy();\n        });\n      } else {\n        componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n\n        this._appRef.attachView(componentRef.hostView);\n\n        this.setDisposeFn(function () {\n          _this5._appRef.detachView(componentRef.hostView);\n\n          componentRef.destroy();\n        });\n      } // At this point the component has been instantiated, so we move it to the location in the DOM\n      // where we want it to be rendered.\n\n\n      this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n      this._attachedPortal = portal;\n      return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      var _this6 = this;\n\n      var viewContainer = portal.viewContainerRef;\n      var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context); // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n      // But for the DomPortalOutlet the view can be added everywhere in the DOM\n      // (e.g Overlay Container) To move the view to the specified host element. We just\n      // re-append the existing root nodes.\n\n      viewRef.rootNodes.forEach(function (rootNode) {\n        return _this6.outletElement.appendChild(rootNode);\n      }); // Note that we want to detect changes after the nodes have been moved so that\n      // any directives inside the portal that are looking at the DOM inside a lifecycle\n      // hook won't be invoked too early.\n\n      viewRef.detectChanges();\n      this.setDisposeFn(function () {\n        var index = viewContainer.indexOf(viewRef);\n\n        if (index !== -1) {\n          viewContainer.remove(index);\n        }\n      });\n      this._attachedPortal = portal; // TODO(jelbourn): Return locals from view.\n\n      return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(DomPortalOutlet.prototype), \"dispose\", this).call(this);\n\n      this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n\n  }, {\n    key: \"_getComponentRootNode\",\n    value: function _getComponentRootNode(componentRef) {\n      return componentRef.hostView.rootNodes[0];\n    }\n  }]);\n\n  return DomPortalOutlet;\n}(BasePortalOutlet);\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar DomPortalHost = /*#__PURE__*/function (_DomPortalOutlet) {\n  _inherits(DomPortalHost, _DomPortalOutlet);\n\n  var _super6 = _createSuper(DomPortalHost);\n\n  function DomPortalHost() {\n    _classCallCheck(this, DomPortalHost);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return _createClass(DomPortalHost);\n}(DomPortalOutlet);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n\n\nvar CdkPortal = /*#__PURE__*/(function () {\n  var CdkPortal = /*#__PURE__*/function (_TemplatePortal) {\n    _inherits(CdkPortal, _TemplatePortal);\n\n    var _super7 = _createSuper(CdkPortal);\n\n    function CdkPortal(templateRef, viewContainerRef) {\n      _classCallCheck(this, CdkPortal);\n\n      return _super7.call(this, templateRef, viewContainerRef);\n    }\n\n    return _createClass(CdkPortal);\n  }(TemplatePortal);\n\n  CdkPortal.ɵfac = function CdkPortal_Factory(t) {\n    return new (t || CdkPortal)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n\n  CdkPortal.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkPortal,\n    selectors: [[\"\", \"cdkPortal\", \"\"]],\n    exportAs: [\"cdkPortal\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkPortal;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar TemplatePortalDirective = /*#__PURE__*/(function () {\n  var TemplatePortalDirective = /*#__PURE__*/function (_CdkPortal) {\n    _inherits(TemplatePortalDirective, _CdkPortal);\n\n    var _super8 = _createSuper(TemplatePortalDirective);\n\n    function TemplatePortalDirective() {\n      _classCallCheck(this, TemplatePortalDirective);\n\n      return _super8.apply(this, arguments);\n    }\n\n    return _createClass(TemplatePortalDirective);\n  }(CdkPortal);\n\n  TemplatePortalDirective.ɵfac = /* @__PURE__ */function () {\n    var ɵTemplatePortalDirective_BaseFactory;\n    return function TemplatePortalDirective_Factory(t) {\n      return (ɵTemplatePortalDirective_BaseFactory || (ɵTemplatePortalDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TemplatePortalDirective)))(t || TemplatePortalDirective);\n    };\n  }();\n\n  TemplatePortalDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TemplatePortalDirective,\n    selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]],\n    exportAs: [\"cdkPortal\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkPortal,\n      useExisting: TemplatePortalDirective\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TemplatePortalDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n\n\nvar CdkPortalOutlet = /*#__PURE__*/(function () {\n  var CdkPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet3) {\n    _inherits(CdkPortalOutlet, _BasePortalOutlet3);\n\n    var _super9 = _createSuper(CdkPortalOutlet);\n\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef,\n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n      var _thisSuper2, _this7;\n\n      _classCallCheck(this, CdkPortalOutlet);\n\n      _this7 = _super9.call(this);\n      _this7._componentFactoryResolver = _componentFactoryResolver;\n      _this7._viewContainerRef = _viewContainerRef;\n      /** Whether the portal component is initialized. */\n\n      _this7._isInitialized = false;\n      /** Emits when a portal is attached to the outlet. */\n\n      _this7.attached = new EventEmitter();\n      /**\n       * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n       * @param portal Portal to be attached.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      _this7.attachDomPortal = function (portal) {\n        // @breaking-change 9.0.0 Remove check and error once the\n        // `_document` constructor parameter is required.\n        if (!_this7._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('Cannot attach DOM portal without _document constructor parameter');\n        }\n\n        var element = portal.element;\n\n        if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('DOM portal content must be attached to a parent node.');\n        } // Anchor used to save the element's previous position so\n        // that we can restore it when the portal is detached.\n\n\n        var anchorNode = _this7._document.createComment('dom-portal');\n\n        portal.setAttachedHost(_assertThisInitialized(_this7));\n        element.parentNode.insertBefore(anchorNode, element);\n\n        _this7._getRootNode().appendChild(element);\n\n        _this7._attachedPortal = portal;\n\n        _get((_thisSuper2 = _assertThisInitialized(_this7), _getPrototypeOf(CdkPortalOutlet.prototype)), \"setDisposeFn\", _thisSuper2).call(_thisSuper2, function () {\n          if (anchorNode.parentNode) {\n            anchorNode.parentNode.replaceChild(element, anchorNode);\n          }\n        });\n      };\n\n      _this7._document = _document;\n      return _this7;\n    }\n    /** Portal associated with the Portal outlet. */\n\n\n    _createClass(CdkPortalOutlet, [{\n      key: \"portal\",\n      get: function get() {\n        return this._attachedPortal;\n      },\n      set: function set(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n          return;\n        }\n\n        if (this.hasAttached()) {\n          _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"detach\", this).call(this);\n        }\n\n        if (portal) {\n          _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"attach\", this).call(this, portal);\n        }\n\n        this._attachedPortal = portal || null;\n      }\n      /** Component or view reference that is attached to the portal. */\n\n    }, {\n      key: \"attachedRef\",\n      get: function get() {\n        return this._attachedRef;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._isInitialized = true;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"dispose\", this).call(this);\n\n        this._attachedPortal = null;\n        this._attachedRef = null;\n      }\n      /**\n       * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n       *\n       * @param portal Portal to be attached to the portal outlet.\n       * @returns Reference to the created component.\n       */\n\n    }, {\n      key: \"attachComponentPortal\",\n      value: function attachComponentPortal(portal) {\n        portal.setAttachedHost(this); // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n\n        var viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector); // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n\n        if (viewContainerRef !== this._viewContainerRef) {\n          this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n\n        _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"setDisposeFn\", this).call(this, function () {\n          return ref.destroy();\n        });\n\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n      }\n      /**\n       * Attach the given TemplatePortal to this PortalHost as an embedded View.\n       * @param portal Portal to be attached.\n       * @returns Reference to the created embedded view.\n       */\n\n    }, {\n      key: \"attachTemplatePortal\",\n      value: function attachTemplatePortal(portal) {\n        var _this8 = this;\n\n        portal.setAttachedHost(this);\n\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n\n        _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"setDisposeFn\", this).call(this, function () {\n          return _this8._viewContainerRef.clear();\n        });\n\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n      }\n      /** Gets the root node of the portal outlet. */\n\n    }, {\n      key: \"_getRootNode\",\n      value: function _getRootNode() {\n        var nativeElement = this._viewContainerRef.element.nativeElement; // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n\n        return nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement : nativeElement.parentNode;\n      }\n    }]);\n\n    return CdkPortalOutlet;\n  }(BasePortalOutlet);\n\n  CdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) {\n    return new (t || CdkPortalOutlet)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  CdkPortalOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkPortalOutlet,\n    selectors: [[\"\", \"cdkPortalOutlet\", \"\"]],\n    inputs: {\n      portal: [\"cdkPortalOutlet\", \"portal\"]\n    },\n    outputs: {\n      attached: \"attached\"\n    },\n    exportAs: [\"cdkPortalOutlet\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkPortalOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar PortalHostDirective = /*#__PURE__*/(function () {\n  var PortalHostDirective = /*#__PURE__*/function (_CdkPortalOutlet) {\n    _inherits(PortalHostDirective, _CdkPortalOutlet);\n\n    var _super10 = _createSuper(PortalHostDirective);\n\n    function PortalHostDirective() {\n      _classCallCheck(this, PortalHostDirective);\n\n      return _super10.apply(this, arguments);\n    }\n\n    return _createClass(PortalHostDirective);\n  }(CdkPortalOutlet);\n\n  PortalHostDirective.ɵfac = /* @__PURE__ */function () {\n    var ɵPortalHostDirective_BaseFactory;\n    return function PortalHostDirective_Factory(t) {\n      return (ɵPortalHostDirective_BaseFactory || (ɵPortalHostDirective_BaseFactory = i0.ɵɵgetInheritedFactory(PortalHostDirective)))(t || PortalHostDirective);\n    };\n  }();\n\n  PortalHostDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PortalHostDirective,\n    selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]],\n    inputs: {\n      portal: [\"cdkPortalHost\", \"portal\"]\n    },\n    exportAs: [\"cdkPortalHost\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkPortalOutlet,\n      useExisting: PortalHostDirective\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return PortalHostDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar PortalModule = /*#__PURE__*/(function () {\n  var PortalModule = /*#__PURE__*/_createClass(function PortalModule() {\n    _classCallCheck(this, PortalModule);\n  });\n\n  PortalModule.ɵfac = function PortalModule_Factory(t) {\n    return new (t || PortalModule)();\n  };\n\n  PortalModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PortalModule\n  });\n  PortalModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return PortalModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\n\n\nvar PortalInjector = /*#__PURE__*/function () {\n  function PortalInjector(_parentInjector, _customTokens) {\n    _classCallCheck(this, PortalInjector);\n\n    this._parentInjector = _parentInjector;\n    this._customTokens = _customTokens;\n  }\n\n  _createClass(PortalInjector, [{\n    key: \"get\",\n    value: function get(token, notFoundValue) {\n      var value = this._customTokens.get(token);\n\n      if (typeof value !== 'undefined') {\n        return value;\n      }\n\n      return this._parentInjector.get(token, notFoundValue);\n    }\n  }]);\n\n  return PortalInjector;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective }; //# sourceMappingURL=portal.mjs.map","map":null,"metadata":{},"sourceType":"module"}