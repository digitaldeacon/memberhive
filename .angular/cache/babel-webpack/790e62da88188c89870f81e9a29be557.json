{"ast":null,"code":"import _get from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _toConsumableArray from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    i0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelementStart(1, \"div\", 14, 15);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      var ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      var ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    i0.ɵɵprojection(3, 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: /*#__PURE__*/trigger('transformPanelWrap', [/*#__PURE__*/transition('* => void', /*#__PURE__*/query('@transformPanel', [/*#__PURE__*/animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: /*#__PURE__*/trigger('transformPanel', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), /*#__PURE__*/state('showing', /*#__PURE__*/style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), /*#__PURE__*/state('showing-multiple', /*#__PURE__*/style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), /*#__PURE__*/transition('void => *', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)')), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms 25ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel. */\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\n\nvar SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\n\nvar SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\n\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nvar MAT_SELECT_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nvar MAT_SELECT_CONFIG = /*#__PURE__*/new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nvar MatSelectChange = /*#__PURE__*/_createClass(function MatSelectChange(\n/** Reference to the select that emitted the change event. */\nsource,\n/** Current value of the select that emitted the event. */\nvalue) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n}); // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nvar _MatSelectMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled( /*#__PURE__*/mixinErrorState( /*#__PURE__*/function () {\n  function _class(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n  return _createClass(_class);\n}()))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar MAT_SELECT_TRIGGER = /*#__PURE__*/new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\nvar MatSelectTrigger = /*#__PURE__*/(function () {\n  var MatSelectTrigger = /*#__PURE__*/_createClass(function MatSelectTrigger() {\n    _classCallCheck(this, MatSelectTrigger);\n  });\n\n  MatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n    return new (t || MatSelectTrigger)();\n  };\n\n  MatSelectTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatSelectTrigger,\n    selectors: [[\"mat-select-trigger\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_SELECT_TRIGGER,\n      useExisting: MatSelectTrigger\n    }])]\n  });\n  return MatSelectTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class with all of the `MatSelect` functionality. */\n\n\nvar _MatSelectBase = /*#__PURE__*/(function () {\n  var _MatSelectBase = /*#__PURE__*/function (_MatSelectMixinBase2) {\n    _inherits(_MatSelectBase, _MatSelectMixinBase2);\n\n    var _super = _createSuper(_MatSelectBase);\n\n    function _MatSelectBase(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n      var _this;\n\n      _classCallCheck(this, _MatSelectBase);\n\n      var _a, _b, _c;\n\n      _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      _this._viewportRuler = _viewportRuler;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._ngZone = _ngZone;\n      _this._dir = _dir;\n      _this._parentFormField = _parentFormField;\n      _this._liveAnnouncer = _liveAnnouncer;\n      _this._defaultOptions = _defaultOptions;\n      /** Whether or not the overlay panel is open. */\n\n      _this._panelOpen = false;\n      /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n      _this._compareWith = function (o1, o2) {\n        return o1 === o2;\n      };\n      /** Unique id for this input. */\n\n\n      _this._uid = \"mat-select-\".concat(nextUniqueId++);\n      /** Current `ariar-labelledby` value for the select trigger. */\n\n      _this._triggerAriaLabelledBy = null;\n      /** Emits whenever the component is destroyed. */\n\n      _this._destroy = new Subject();\n      /** `View -> model callback called when value changes` */\n\n      _this._onChange = function () {};\n      /** `View -> model callback called when select has been touched` */\n\n\n      _this._onTouched = function () {};\n      /** ID for the DOM node containing the select's value. */\n\n\n      _this._valueId = \"mat-select-value-\".concat(nextUniqueId++);\n      /** Emits when the panel element is finished transforming in. */\n\n      _this._panelDoneAnimatingStream = new Subject();\n      _this._overlayPanelClass = ((_a = _this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n      _this._focused = false;\n      /** A name for this control that can be used by `mat-form-field`. */\n\n      _this.controlType = 'mat-select';\n      _this._multiple = false;\n      _this._disableOptionCentering = (_c = (_b = _this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n      /** Aria label of the select. */\n\n      _this.ariaLabel = '';\n      /** Combined stream of all of the child options' change events. */\n\n      _this.optionSelectionChanges = defer(function () {\n        var options = _this.options;\n\n        if (options) {\n          return options.changes.pipe(startWith(options), switchMap(function () {\n            return merge.apply(void 0, _toConsumableArray(options.map(function (option) {\n              return option.onSelectionChange;\n            })));\n          }));\n        }\n\n        return _this._ngZone.onStable.pipe(take(1), switchMap(function () {\n          return _this.optionSelectionChanges;\n        }));\n      });\n      /** Event emitted when the select panel has been toggled. */\n\n      _this.openedChange = new EventEmitter();\n      /** Event emitted when the select has been opened. */\n\n      _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n        return o;\n      }), map(function () {}));\n      /** Event emitted when the select has been closed. */\n\n      _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n        return !o;\n      }), map(function () {}));\n      /** Event emitted when the selected value has been changed by the user. */\n\n      _this.selectionChange = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the select changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      _this.valueChange = new EventEmitter();\n\n      if (_this.ngControl) {\n        // Note: we provide the value accessor through here, instead of\n        // the `providers` to avoid running into a circular import.\n        _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n      } // Note that we only want to set this when the defaults pass it in, otherwise it should\n      // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n      if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n        _this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n      }\n\n      _this._scrollStrategyFactory = scrollStrategyFactory;\n      _this._scrollStrategy = _this._scrollStrategyFactory();\n      _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n      _this.id = _this.id;\n      return _this;\n    }\n    /** Whether the select is focused. */\n\n\n    _createClass(_MatSelectBase, [{\n      key: \"focused\",\n      get: function get() {\n        return this._focused || this._panelOpen;\n      }\n      /** Placeholder to be shown if no value has been selected. */\n\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._placeholder;\n      },\n      set: function set(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n      }\n      /** Whether the component is required. */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        var _a, _b, _c, _d;\n\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n      }\n      /** Whether the user should be allowed to select multiple options. */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._multiple;\n      },\n      set: function set(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n      }\n      /** Whether to center the active option over the trigger. */\n\n    }, {\n      key: \"disableOptionCentering\",\n      get: function get() {\n        return this._disableOptionCentering;\n      },\n      set: function set(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n      }\n      /**\n       * Function to compare the option values with the selected values. The first argument\n       * is a value from an option. The second is a value from the selection. A boolean\n       * should be returned.\n       */\n\n    }, {\n      key: \"compareWith\",\n      get: function get() {\n        return this._compareWith;\n      },\n      set: function set(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n          // A different comparator means the selection could change.\n          this._initializeSelection();\n        }\n      }\n      /** Value of the select control. */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n          if (this.options) {\n            this._setSelectionByValue(newValue);\n          }\n\n          this._value = newValue;\n        }\n      }\n      /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n    }, {\n      key: \"typeaheadDebounceInterval\",\n      get: function get() {\n        return this._typeaheadDebounceInterval;\n      },\n      set: function set(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n      }\n      /** Unique id of the element. */\n\n    }, {\n      key: \"id\",\n      get: function get() {\n        return this._id;\n      },\n      set: function set(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n\n        this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n          return _this2._panelDoneAnimating(_this2.panelOpen);\n        });\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this3 = this;\n\n        this._initKeyManager();\n\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n          event.added.forEach(function (option) {\n            return option.select();\n          });\n          event.removed.forEach(function (option) {\n            return option.deselect();\n          });\n        });\n\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n          _this3._resetOptions();\n\n          _this3._initializeSelection();\n        });\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        var newAriaLabelledby = this._getTriggerAriaLabelledby(); // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n\n\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n          var element = this._elementRef.nativeElement;\n          this._triggerAriaLabelledBy = newAriaLabelledby;\n\n          if (newAriaLabelledby) {\n            element.setAttribute('aria-labelledby', newAriaLabelledby);\n          } else {\n            element.removeAttribute('aria-labelledby');\n          }\n        }\n\n        if (this.ngControl) {\n          this.updateErrorState();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n          this.stateChanges.next();\n        }\n\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n          this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroy.next();\n\n        this._destroy.complete();\n\n        this.stateChanges.complete();\n      }\n      /** Toggles the overlay panel open or closed. */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this.panelOpen ? this.close() : this.open();\n      }\n      /** Opens the overlay panel. */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        if (this._canOpen()) {\n          this._panelOpen = true;\n\n          this._keyManager.withHorizontalOrientation(null);\n\n          this._highlightCorrectOption();\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /** Closes the overlay panel and focuses the host element. */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this._panelOpen) {\n          this._panelOpen = false;\n\n          this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n          this._changeDetectorRef.markForCheck();\n\n          this._onTouched();\n        }\n      }\n      /**\n       * Sets the select's value. Part of the ControlValueAccessor interface\n       * required to integrate with Angular's core forms API.\n       *\n       * @param value New value to be written to the model.\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n      }\n      /**\n       * Saves a callback function to be invoked when the select's value\n       * changes from user input. Part of the ControlValueAccessor interface\n       * required to integrate with Angular's core forms API.\n       *\n       * @param fn Callback to be triggered when the value changes.\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChange = fn;\n      }\n      /**\n       * Saves a callback function to be invoked when the select is blurred\n       * by the user. Part of the ControlValueAccessor interface required\n       * to integrate with Angular's core forms API.\n       *\n       * @param fn Callback to be triggered when the component has been touched.\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      }\n      /**\n       * Disables the select. Part of the ControlValueAccessor interface required\n       * to integrate with Angular's core forms API.\n       *\n       * @param isDisabled Sets whether the component is disabled.\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n      /** Whether or not the overlay panel is open. */\n\n    }, {\n      key: \"panelOpen\",\n      get: function get() {\n        return this._panelOpen;\n      }\n      /** The currently selected option. */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        var _a, _b;\n\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n      }\n      /** The value displayed in the trigger. */\n\n    }, {\n      key: \"triggerValue\",\n      get: function get() {\n        if (this.empty) {\n          return '';\n        }\n\n        if (this._multiple) {\n          var selectedOptions = this._selectionModel.selected.map(function (option) {\n            return option.viewValue;\n          });\n\n          if (this._isRtl()) {\n            selectedOptions.reverse();\n          } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n          return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n      }\n      /** Whether the element is in RTL mode. */\n\n    }, {\n      key: \"_isRtl\",\n      value: function _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n      }\n      /** Handles all keydown events on the select. */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (!this.disabled) {\n          this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n      }\n      /** Handles keyboard events while the select is closed. */\n\n    }, {\n      key: \"_handleClosedKeydown\",\n      value: function _handleClosedKeydown(event) {\n        var keyCode = event.keyCode;\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n        if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n          event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n          this.open();\n        } else if (!this.multiple) {\n          var previouslySelectedOption = this.selected;\n          manager.onKeydown(event);\n          var selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n          if (selectedOption && previouslySelectedOption !== selectedOption) {\n            // We set a duration on the live announcement, because we want the live element to be\n            // cleared after a while so that users can't navigate to it using the arrow keys.\n            this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n          }\n        }\n      }\n      /** Handles keyboard events when the selected is open. */\n\n    }, {\n      key: \"_handleOpenKeydown\",\n      value: function _handleOpenKeydown(event) {\n        var manager = this._keyManager;\n        var keyCode = event.keyCode;\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        var isTyping = manager.isTyping();\n\n        if (isArrowKey && event.altKey) {\n          // Close the select on ALT + arrow key to match the native <select>\n          event.preventDefault();\n          this.close(); // Don't do anything in this case if the user is typing,\n          // because the typing sequence can include the space key.\n        } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          manager.activeItem._selectViaInteraction();\n        } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n          event.preventDefault();\n          var hasDeselectedOptions = this.options.some(function (opt) {\n            return !opt.disabled && !opt.selected;\n          });\n          this.options.forEach(function (option) {\n            if (!option.disabled) {\n              hasDeselectedOptions ? option.select() : option.deselect();\n            }\n          });\n        } else {\n          var previouslyFocusedIndex = manager.activeItemIndex;\n          manager.onKeydown(event);\n\n          if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n            manager.activeItem._selectViaInteraction();\n          }\n        }\n      }\n    }, {\n      key: \"_onFocus\",\n      value: function _onFocus() {\n        if (!this.disabled) {\n          this._focused = true;\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n       * \"blur\" to the panel when it opens, causing a false positive.\n       */\n\n    }, {\n      key: \"_onBlur\",\n      value: function _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n          this._onTouched();\n\n          this._changeDetectorRef.markForCheck();\n\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Callback that is invoked when the overlay panel has been attached.\n       */\n\n    }, {\n      key: \"_onAttached\",\n      value: function _onAttached() {\n        var _this4 = this;\n\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n          _this4._changeDetectorRef.detectChanges();\n\n          _this4._positioningSettled();\n        });\n      }\n      /** Returns the theme to be used on the panel. */\n\n    }, {\n      key: \"_getPanelTheme\",\n      value: function _getPanelTheme() {\n        return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n      }\n      /** Whether the select has a value. */\n\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n      }\n    }, {\n      key: \"_initializeSelection\",\n      value: function _initializeSelection() {\n        var _this5 = this;\n\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n          _this5._setSelectionByValue(_this5.ngControl ? _this5.ngControl.value : _this5._value);\n\n          _this5.stateChanges.next();\n        });\n      }\n      /**\n       * Sets the selected option based on a value. If no option can be\n       * found with the designated value, the select trigger is cleared.\n       */\n\n    }, {\n      key: \"_setSelectionByValue\",\n      value: function _setSelectionByValue(value) {\n        var _this6 = this;\n\n        this._selectionModel.selected.forEach(function (option) {\n          return option.setInactiveStyles();\n        });\n\n        this._selectionModel.clear();\n\n        if (this.multiple && value) {\n          if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonArrayValueError();\n          }\n\n          value.forEach(function (currentValue) {\n            return _this6._selectValue(currentValue);\n          });\n\n          this._sortValues();\n        } else {\n          var correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n          // mode, because we don't know what option the user interacted with last.\n\n\n          if (correspondingOption) {\n            this._keyManager.updateActiveItem(correspondingOption);\n          } else if (!this.panelOpen) {\n            // Otherwise reset the highlighted option. Note that we only want to do this while\n            // closed, because doing it while open can shift the user's focus unnecessarily.\n            this._keyManager.updateActiveItem(-1);\n          }\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Finds and selects and option based on its value.\n       * @returns Option that has the corresponding value.\n       */\n\n    }, {\n      key: \"_selectValue\",\n      value: function _selectValue(value) {\n        var _this7 = this;\n\n        var correspondingOption = this.options.find(function (option) {\n          // Skip options that are already in the model. This allows us to handle cases\n          // where the same primitive value is selected multiple times.\n          if (_this7._selectionModel.isSelected(option)) {\n            return false;\n          }\n\n          try {\n            // Treat null as a special reset value.\n            return option.value != null && _this7._compareWith(option.value, value);\n          } catch (error) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n              // Notify developers of errors in their comparator.\n              console.warn(error);\n            }\n\n            return false;\n          }\n        });\n\n        if (correspondingOption) {\n          this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n      }\n      /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n    }, {\n      key: \"_initKeyManager\",\n      value: function _initKeyManager() {\n        var _this8 = this;\n\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this8.panelOpen) {\n            // Select the active item when tabbing away. This is consistent with how the native\n            // select behaves. Note that we only want to do this in single selection mode.\n            if (!_this8.multiple && _this8._keyManager.activeItem) {\n              _this8._keyManager.activeItem._selectViaInteraction();\n            } // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n\n\n            _this8.focus();\n\n            _this8.close();\n          }\n        });\n\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this8._panelOpen && _this8.panel) {\n            _this8._scrollOptionIntoView(_this8._keyManager.activeItemIndex || 0);\n          } else if (!_this8._panelOpen && !_this8.multiple && _this8._keyManager.activeItem) {\n            _this8._keyManager.activeItem._selectViaInteraction();\n          }\n        });\n      }\n      /** Drops current option subscriptions and IDs and resets from scratch. */\n\n    }, {\n      key: \"_resetOptions\",\n      value: function _resetOptions() {\n        var _this9 = this;\n\n        var changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n          _this9._onSelect(event.source, event.isUserInput);\n\n          if (event.isUserInput && !_this9.multiple && _this9._panelOpen) {\n            _this9.close();\n\n            _this9.focus();\n          }\n        }); // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n\n        merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n          return option._stateChanges;\n        }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n          _this9._changeDetectorRef.markForCheck();\n\n          _this9.stateChanges.next();\n        });\n      }\n      /** Invoked when an option is clicked. */\n\n    }, {\n      key: \"_onSelect\",\n      value: function _onSelect(option, isUserInput) {\n        var wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n          option.deselect();\n\n          this._selectionModel.clear();\n\n          if (this.value != null) {\n            this._propagateChanges(option.value);\n          }\n        } else {\n          if (wasSelected !== option.selected) {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n          }\n\n          if (isUserInput) {\n            this._keyManager.setActiveItem(option);\n          }\n\n          if (this.multiple) {\n            this._sortValues();\n\n            if (isUserInput) {\n              // In case the user selected the option with their mouse, we\n              // want to restore focus back to the trigger, in order to\n              // prevent the select keyboard controls from clashing with\n              // the ones from `mat-option`.\n              this.focus();\n            }\n          }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n          this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n      }\n      /** Sorts the selected values in the selected based on their order in the panel. */\n\n    }, {\n      key: \"_sortValues\",\n      value: function _sortValues() {\n        var _this10 = this;\n\n        if (this.multiple) {\n          var options = this.options.toArray();\n\n          this._selectionModel.sort(function (a, b) {\n            return _this10.sortComparator ? _this10.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n          });\n\n          this.stateChanges.next();\n        }\n      }\n      /** Emits change event to set the model value. */\n\n    }, {\n      key: \"_propagateChanges\",\n      value: function _propagateChanges(fallbackValue) {\n        var valueToEmit = null;\n\n        if (this.multiple) {\n          valueToEmit = this.selected.map(function (option) {\n            return option.value;\n          });\n        } else {\n          valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n\n        this._onChange(valueToEmit);\n\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Highlights the selected item. If no option is selected, it will highlight\n       * the first item instead.\n       */\n\n    }, {\n      key: \"_highlightCorrectOption\",\n      value: function _highlightCorrectOption() {\n        if (this._keyManager) {\n          if (this.empty) {\n            this._keyManager.setFirstItemActive();\n          } else {\n            this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n          }\n        }\n      }\n      /** Whether the panel is allowed to open. */\n\n    }, {\n      key: \"_canOpen\",\n      value: function _canOpen() {\n        var _a;\n\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n      }\n      /** Focuses the select element. */\n\n    }, {\n      key: \"focus\",\n      value: function focus(options) {\n        this._elementRef.nativeElement.focus(options);\n      }\n      /** Gets the aria-labelledby for the select panel. */\n\n    }, {\n      key: \"_getPanelAriaLabelledby\",\n      value: function _getPanelAriaLabelledby() {\n        var _a;\n\n        if (this.ariaLabel) {\n          return null;\n        }\n\n        var labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        var labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n      }\n      /** Determines the `aria-activedescendant` to be set on the host. */\n\n    }, {\n      key: \"_getAriaActiveDescendant\",\n      value: function _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n          return this._keyManager.activeItem.id;\n        }\n\n        return null;\n      }\n      /** Gets the aria-labelledby of the select component trigger. */\n\n    }, {\n      key: \"_getTriggerAriaLabelledby\",\n      value: function _getTriggerAriaLabelledby() {\n        var _a;\n\n        if (this.ariaLabel) {\n          return null;\n        }\n\n        var labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        var value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n        if (this.ariaLabelledby) {\n          value += ' ' + this.ariaLabelledby;\n        }\n\n        return value;\n      }\n      /** Called when the overlay panel is done animating. */\n\n    }, {\n      key: \"_panelDoneAnimating\",\n      value: function _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"setDescribedByIds\",\n      value: function setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"onContainerClick\",\n      value: function onContainerClick() {\n        this.focus();\n        this.open();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"shouldLabelFloat\",\n      get: function get() {\n        return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n      }\n    }]);\n\n    return _MatSelectBase;\n  }(_MatSelectMixinBase);\n\n  _MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n    return new (t || _MatSelectBase)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NgForm, 8), i0.ɵɵdirectiveInject(i4.FormGroupDirective, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), i0.ɵɵdirectiveInject(i4.NgControl, 10), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.LiveAnnouncer), i0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n  };\n\n  _MatSelectBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatSelectBase,\n    viewQuery: function _MatSelectBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n      }\n    },\n    inputs: {\n      panelClass: \"panelClass\",\n      placeholder: \"placeholder\",\n      required: \"required\",\n      multiple: \"multiple\",\n      disableOptionCentering: \"disableOptionCentering\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      errorStateMatcher: \"errorStateMatcher\",\n      typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n      sortComparator: \"sortComparator\",\n      id: \"id\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      _openedStream: \"opened\",\n      _closedStream: \"closed\",\n      selectionChange: \"selectionChange\",\n      valueChange: \"valueChange\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n  return _MatSelectBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatSelect = /*#__PURE__*/(function () {\n  var MatSelect = /*#__PURE__*/function (_MatSelectBase2) {\n    _inherits(MatSelect, _MatSelectBase2);\n\n    var _super2 = _createSuper(MatSelect);\n\n    function MatSelect() {\n      var _this11;\n\n      _classCallCheck(this, MatSelect);\n\n      _this11 = _super2.apply(this, arguments);\n      /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n      _this11._scrollTop = 0;\n      /** The cached font-size of the trigger element. */\n\n      _this11._triggerFontSize = 0;\n      /** The value of the select panel's transform-origin property. */\n\n      _this11._transformOrigin = 'top';\n      /**\n       * The y-offset of the overlay panel in relation to the trigger's top start corner.\n       * This must be adjusted to align the selected option text over the trigger text.\n       * when the panel opens. Will change based on the y-position of the selected option.\n       */\n\n      _this11._offsetY = 0;\n      _this11._positions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n      }];\n      return _this11;\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n\n\n    _createClass(MatSelect, [{\n      key: \"_calculateOverlayScroll\",\n      value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        var halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n\n        var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this12 = this;\n\n        _get(_getPrototypeOf(MatSelect.prototype), \"ngOnInit\", this).call(this);\n\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this12.panelOpen) {\n            _this12._triggerRect = _this12.trigger.nativeElement.getBoundingClientRect();\n\n            _this12._changeDetectorRef.markForCheck();\n          }\n        });\n      }\n    }, {\n      key: \"open\",\n      value: function open() {\n        var _this13 = this;\n\n        if (_get(_getPrototypeOf(MatSelect.prototype), \"_canOpen\", this).call(this)) {\n          _get(_getPrototypeOf(MatSelect.prototype), \"open\", this).call(this);\n\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n          // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n          this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n          this._calculateOverlayPosition(); // Set the font size on the panel element once it exists.\n\n\n          this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n            if (_this13._triggerFontSize && _this13._overlayDir.overlayRef && _this13._overlayDir.overlayRef.overlayElement) {\n              _this13._overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this13._triggerFontSize, \"px\");\n            }\n          });\n        }\n      }\n      /** Scrolls the active option into view. */\n\n    }, {\n      key: \"_scrollOptionIntoView\",\n      value: function _scrollOptionIntoView(index) {\n        var labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n        var itemHeight = this._getItemHeight();\n\n        if (index === 0 && labelCount === 1) {\n          // If we've got one group label before the option and we're at the top option,\n          // scroll the list to the top. This is better UX than scrolling the list to the\n          // top of the option, because it allows the user to read the top group's label.\n          this.panel.nativeElement.scrollTop = 0;\n        } else {\n          this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n      }\n    }, {\n      key: \"_positioningSettled\",\n      value: function _positioningSettled() {\n        this._calculateOverlayOffsetX();\n\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n      }\n    }, {\n      key: \"_panelDoneAnimating\",\n      value: function _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n        } else {\n          this._overlayDir.offsetX = 0;\n\n          this._changeDetectorRef.markForCheck();\n        }\n\n        _get(_getPrototypeOf(MatSelect.prototype), \"_panelDoneAnimating\", this).call(this, isOpen);\n      }\n    }, {\n      key: \"_getChangeEvent\",\n      value: function _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n      }\n      /**\n       * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n       * This must be adjusted to align the selected option text over the trigger text when\n       * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n       * can't be calculated until the panel has been attached, because we need to know the\n       * content width in order to constrain the panel within the viewport.\n       */\n\n    }, {\n      key: \"_calculateOverlayOffsetX\",\n      value: function _calculateOverlayOffsetX() {\n        var overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n        var viewportSize = this._viewportRuler.getViewportSize();\n\n        var isRtl = this._isRtl();\n\n        var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n        var offsetX; // Adjust the offset, depending on the option padding.\n\n        if (this.multiple) {\n          offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        } else if (this.disableOptionCentering) {\n          offsetX = SELECT_PANEL_PADDING_X;\n        } else {\n          var selected = this._selectionModel.selected[0] || this.options.first;\n          offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        } // Invert the offset in LTR.\n\n\n        if (!isRtl) {\n          offsetX *= -1;\n        } // Determine how much the select overflows on each side.\n\n\n        var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n        if (leftOverflow > 0) {\n          offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n          offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n\n\n        this._overlayDir.offsetX = Math.round(offsetX);\n\n        this._overlayDir.overlayRef.updatePosition();\n      }\n      /**\n       * Calculates the y-offset of the select's overlay panel in relation to the\n       * top start corner of the trigger. It has to be adjusted in order for the\n       * selected option to be aligned over the trigger when the panel opens.\n       */\n\n    }, {\n      key: \"_calculateOverlayOffsetY\",\n      value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n        if (this.disableOptionCentering) {\n          return 0;\n        }\n\n        if (this._scrollTop === 0) {\n          optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        } else if (this._scrollTop === maxScroll) {\n          var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n          var selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n          // portion of it is shown in the viewport and account for it in our offset.\n\n          var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n          // there is always extra padding at the top or bottom of the panel. When\n          // scrolled to the very bottom, this padding is at the top of the panel and\n          // must be added to the offset.\n\n          optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        } else {\n          // If the option was scrolled to the middle of the panel using a scroll buffer,\n          // its offset will be the scroll buffer minus the half height that was added to\n          // center it.\n          optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        } // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n\n\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n      }\n      /**\n       * Checks that the attempted overlay position will fit within the viewport.\n       * If it will not fit, tries to adjust the scroll position and the associated\n       * y-offset so the panel can open fully on-screen. If it still won't fit,\n       * sets the offset back to 0 to allow the fallback position to take over.\n       */\n\n    }, {\n      key: \"_checkOverlayWithinViewport\",\n      value: function _checkOverlayWithinViewport(maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var viewportSize = this._viewportRuler.getViewportSize();\n\n        var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        var panelHeightTop = Math.abs(this._offsetY);\n        var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n          this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n          this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n          this._transformOrigin = this._getOriginBasedOnOption();\n        }\n      }\n      /** Adjusts the overlay panel up to fit in the viewport. */\n\n    }, {\n      key: \"_adjustPanelUp\",\n      value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n\n        if (this._scrollTop <= 0) {\n          this._scrollTop = 0;\n          this._offsetY = 0;\n          this._transformOrigin = \"50% bottom 0px\";\n        }\n      }\n      /** Adjusts the overlay panel down to fit in the viewport. */\n\n    }, {\n      key: \"_adjustPanelDown\",\n      value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n\n        if (this._scrollTop >= maxScroll) {\n          this._scrollTop = maxScroll;\n          this._offsetY = 0;\n          this._transformOrigin = \"50% top 0px\";\n          return;\n        }\n      }\n      /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n    }, {\n      key: \"_calculateOverlayPosition\",\n      value: function _calculateOverlayPosition() {\n        var itemHeight = this._getItemHeight();\n\n        var items = this._getItemCount();\n\n        var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        var scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n        var maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n        var selectedOptionOffset;\n\n        if (this.empty) {\n          selectedOptionOffset = 0;\n        } else {\n          selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n\n        var scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n        this._checkOverlayWithinViewport(maxScroll);\n      }\n      /** Sets the transform origin point based on the selected option. */\n\n    }, {\n      key: \"_getOriginBasedOnOption\",\n      value: function _getOriginBasedOnOption() {\n        var itemHeight = this._getItemHeight();\n\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return \"50% \".concat(originY, \"px 0px\");\n      }\n      /** Calculates the height of the select's options. */\n\n    }, {\n      key: \"_getItemHeight\",\n      value: function _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n      }\n      /** Calculates the amount of items in the select. This includes options and group labels. */\n\n    }, {\n      key: \"_getItemCount\",\n      value: function _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n      }\n    }]);\n\n    return MatSelect;\n  }(_MatSelectBase);\n\n  MatSelect.ɵfac = /* @__PURE__ */function () {\n    var ɵMatSelect_BaseFactory;\n    return function MatSelect_Factory(t) {\n      return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n    };\n  }();\n\n  MatSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSelect,\n    selectors: [[\"mat-select\"]],\n    contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n    hostVars: 20,\n    hostBindings: function MatSelect_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        i0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matSelect\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatSelect\n    }, {\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatSelect\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c3,\n    decls: 9,\n    vars: 12,\n    consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n    template: function MatSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c2);\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n          return ctx.toggle();\n        });\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        i0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelement(7, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        i0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n          return ctx.close();\n        })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n          return ctx._onAttached();\n        })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n          return ctx.close();\n        });\n      }\n\n      if (rf & 2) {\n        var _r0 = i0.ɵɵreference(1);\n\n        i0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        i0.ɵɵattribute(\"id\", ctx._valueId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", false);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n      }\n    },\n    directives: [i7.CdkOverlayOrigin, i8.NgSwitch, i8.NgSwitchCase, i7.CdkConnectedOverlay, i8.NgSwitchDefault, i8.NgClass],\n    styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n    },\n    changeDetection: 0\n  });\n  return MatSelect;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSelectModule = /*#__PURE__*/(function () {\n  var MatSelectModule = /*#__PURE__*/_createClass(function MatSelectModule() {\n    _classCallCheck(this, MatSelectModule);\n  });\n\n  MatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n    return new (t || MatSelectModule)();\n  };\n\n  MatSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatSelectModule\n  });\n  MatSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n    imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n  });\n  return MatSelectModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations }; //# sourceMappingURL=select.mjs.map","map":null,"metadata":{},"sourceType":"module"}