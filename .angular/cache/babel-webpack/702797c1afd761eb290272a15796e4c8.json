{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { GeocodeService } from '../../services/geocode.service';\nimport { Utils } from '../../common/common.utils';\nimport { HttpClient } from '@angular/common/http';\nimport { PeopleActionTypes, ListPeopleSuccessAction, ListPeopleFailureAction, UpdatePersonSuccessAction, UpdatePersonFailureAction, CreatePersonSuccessAction, CreatePersonFailureAction, DeletePersonSuccessAction, DeletePersonFailureAction, CalcPersonGeoFailureAction, CalcPersonGeoSuccessAction } from './person.actions';\nimport { UpdateFamilySuccessAction } from '../family/family.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../../services/geocode.service\";\nexport var PersonEffects = /*#__PURE__*/_createClass(function PersonEffects(_actions$, _http, _geoCoder) {\n  var _this = this;\n\n  _classCallCheck(this, PersonEffects);\n\n  this._actions$ = _actions$;\n  this._http = _http;\n  this._geoCoder = _geoCoder;\n  this.getPeople$ = this._actions$.pipe(ofType(PeopleActionTypes.LIST_PEOPLE), map(function (action) {\n    return action.payload;\n  }), switchMap(function () {\n    return _this._http.get('api/person/list').pipe(map(function (r) {\n      return new ListPeopleSuccessAction(r);\n    }), catchError(function (r) {\n      return of(new ListPeopleFailureAction(r));\n    }));\n  }));\n  this.updatePerson$ = this._actions$.pipe(ofType(PeopleActionTypes.UPDATE_PERSON), map(function (action) {\n    return action.payload;\n  }), mergeMap(function (data) {\n    return _this._http.post('api/person/update?id=' + data.uid, data).pipe(map(function (r) {\n      return new UpdatePersonSuccessAction(r);\n    }), catchError(function (r) {\n      return of(new UpdatePersonFailureAction(r));\n    }));\n  }));\n  this.createPerson$ = this._actions$.pipe(ofType(PeopleActionTypes.CREATE_PERSON), map(function (action) {\n    return action.payload;\n  }), mergeMap(function (data) {\n    return _this._http.post('api/person/create', data).pipe(switchMap(function (r) {\n      return [new CreatePersonSuccessAction(r.person), new UpdateFamilySuccessAction(r.family)];\n    }), catchError(function (r) {\n      return of(new CreatePersonFailureAction(r));\n    }));\n  }));\n  this.uploadAvatar$ = this._actions$.pipe(ofType(PeopleActionTypes.UPLOAD_PERSON_AVATAR), map(function (action) {\n    return action.payload;\n  }), mergeMap(function (data) {\n    return _this._http.post('api/person/upload-avatar', data).pipe(map(function (r) {\n      return new UpdatePersonSuccessAction(r);\n    }), catchError(function (r) {\n      return of(new UpdatePersonFailureAction(r));\n    }));\n  }));\n  this.deletePerson$ = this._actions$.pipe(ofType(PeopleActionTypes.DELETE_PERSON), map(function (action) {\n    return action.payload;\n  }), mergeMap(function (data) {\n    return _this._http.post('api/person/delete?id=' + data.uid, data).pipe(map(function (r) {\n      return new DeletePersonSuccessAction(r);\n    }), catchError(function (r) {\n      return of(new DeletePersonFailureAction(r));\n    }));\n  }));\n  this.calcPersonGeo$ = this._actions$.pipe(ofType(PeopleActionTypes.CALC_PERSON_GEO), map(function (action) {\n    return action.payload;\n  }), mergeMap(function (payload) {\n    var address = payload.person.address;\n\n    if (Utils.objEmptyProperties(address, 'home', ['city', 'street', 'zip'])) {\n      return of();\n    }\n\n    _this._geoCoder.apiKey = payload.apiKey;\n    _this._geoCoder.address = address.home;\n    return _this._geoCoder.calc().pipe(map(function (data) {\n      payload.person.address.home.geocode = data;\n      return new CalcPersonGeoSuccessAction(payload);\n    }), catchError(function (error) {\n      return of(new CalcPersonGeoFailureAction(error));\n    }));\n  }));\n});\n\nPersonEffects.ɵfac = function PersonEffects_Factory(t) {\n  return new (t || PersonEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.GeocodeService));\n};\n\nPersonEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PersonEffects,\n  factory: PersonEffects.ɵfac\n});\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], PersonEffects.prototype, \"getPeople$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], PersonEffects.prototype, \"updatePerson$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], PersonEffects.prototype, \"createPerson$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], PersonEffects.prototype, \"uploadAvatar$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], PersonEffects.prototype, \"deletePerson$\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], PersonEffects.prototype, \"calcPersonGeo$\", void 0);","map":null,"metadata":{},"sourceType":"module"}