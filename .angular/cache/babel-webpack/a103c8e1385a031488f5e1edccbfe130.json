{"ast":null,"code":"import _createForOfIteratorHelper from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _inherits from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar DataSource = /*#__PURE__*/_createClass(function DataSource() {\n  _classCallCheck(this, DataSource);\n});\n/** Checks whether an object is a data source. */\n\n\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** DataSource wrapper for a native array. */\n\n\nvar ArrayDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(ArrayDataSource, _DataSource);\n\n  var _super = _createSuper(ArrayDataSource);\n\n  function ArrayDataSource(_data) {\n    var _this;\n\n    _classCallCheck(this, ArrayDataSource);\n\n    _this = _super.call(this);\n    _this._data = _data;\n    return _this;\n  }\n\n  _createClass(ArrayDataSource, [{\n    key: \"connect\",\n    value: function connect() {\n      return isObservable(this._data) ? this._data : of(this._data);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return ArrayDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nvar _DisposeViewRepeaterStrategy = /*#__PURE__*/function () {\n  function _DisposeViewRepeaterStrategy() {\n    _classCallCheck(this, _DisposeViewRepeaterStrategy);\n  }\n\n  _createClass(_DisposeViewRepeaterStrategy, [{\n    key: \"applyChanges\",\n    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n        var view;\n        var operation;\n\n        if (record.previousIndex == null) {\n          var insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n          operation = 1\n          /* INSERTED */\n          ;\n        } else if (currentIndex == null) {\n          viewContainerRef.remove(adjustedPreviousIndex);\n          operation = 3\n          /* REMOVED */\n          ;\n        } else {\n          view = viewContainerRef.get(adjustedPreviousIndex);\n          viewContainerRef.move(view, currentIndex);\n          operation = 2\n          /* MOVED */\n          ;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view === null || view === void 0 ? void 0 : view.context,\n            operation: operation,\n            record: record\n          });\n        }\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {}\n  }]);\n\n  return _DisposeViewRepeaterStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nvar _RecycleViewRepeaterStrategy = /*#__PURE__*/function () {\n  function _RecycleViewRepeaterStrategy() {\n    _classCallCheck(this, _RecycleViewRepeaterStrategy);\n\n    /**\n     * The size of the cache used to store unused views.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n     */\n    this.viewCacheSize = 20;\n    /**\n     * View cache that stores embedded view instances that have been previously stamped out,\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\n     * creating brand new ones.\n     *\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n     */\n\n    this._viewCache = [];\n  }\n  /** Apply changes to the DOM. */\n\n\n  _createClass(_RecycleViewRepeaterStrategy, [{\n    key: \"applyChanges\",\n    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n      var _this2 = this;\n\n      // Rearrange the views to put them in the right location.\n      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n        var view;\n        var operation;\n\n        if (record.previousIndex == null) {\n          // Item added.\n          var viewArgsFactory = function viewArgsFactory() {\n            return itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          };\n\n          view = _this2._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n          operation = view ? 1\n          /* INSERTED */\n          : 0\n          /* REPLACED */\n          ;\n        } else if (currentIndex == null) {\n          // Item removed.\n          _this2._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n\n          operation = 3\n          /* REMOVED */\n          ;\n        } else {\n          // Item moved.\n          view = _this2._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n          operation = 2\n          /* MOVED */\n          ;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view === null || view === void 0 ? void 0 : view.context,\n            operation: operation,\n            record: record\n          });\n        }\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var _iterator = _createForOfIteratorHelper(this._viewCache),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          view.destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n\n  }, {\n    key: \"_insertView\",\n    value: function _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n      var cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n\n      if (cachedView) {\n        cachedView.context.$implicit = value;\n        return undefined;\n      }\n\n      var viewArgs = viewArgsFactory();\n      return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n\n  }, {\n    key: \"_detachAndCacheView\",\n    value: function _detachAndCacheView(index, viewContainerRef) {\n      var detachedView = viewContainerRef.detach(index);\n\n      this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n\n  }, {\n    key: \"_moveView\",\n    value: function _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n      var view = viewContainerRef.get(adjustedPreviousIndex);\n      viewContainerRef.move(view, currentIndex);\n      view.context.$implicit = value;\n      return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n\n  }, {\n    key: \"_maybeCacheView\",\n    value: function _maybeCacheView(view, viewContainerRef) {\n      if (this._viewCache.length < this.viewCacheSize) {\n        this._viewCache.push(view);\n      } else {\n        var index = viewContainerRef.indexOf(view); // The host component could remove views from the container outside of\n        // the view repeater. It's unlikely this will occur, but just in case,\n        // destroy the view on its own, otherwise destroy it through the\n        // container to ensure that all the references are removed.\n\n        if (index === -1) {\n          view.destroy();\n        } else {\n          viewContainerRef.remove(index);\n        }\n      }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n\n  }, {\n    key: \"_insertViewFromCache\",\n    value: function _insertViewFromCache(index, viewContainerRef) {\n      var cachedView = this._viewCache.pop();\n\n      if (cachedView) {\n        viewContainerRef.insert(cachedView, index);\n      }\n\n      return cachedView || null;\n    }\n  }]);\n\n  return _RecycleViewRepeaterStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\n\n\nvar SelectionModel = /*#__PURE__*/function () {\n  function SelectionModel() {\n    var _this3 = this;\n\n    var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, SelectionModel);\n\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    /** Currently-selected values. */\n\n    this._selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n\n    this._deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n\n    this._selectedToEmit = [];\n    /** Event emitted when the value has changed. */\n\n    this.changed = new Subject();\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(function (value) {\n          return _this3._markSelected(value);\n        });\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      } // Clear the array in order to avoid firing the change event for preselected values.\n\n\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /** Selected values. */\n\n\n  _createClass(SelectionModel, [{\n    key: \"selected\",\n    get: function get() {\n      if (!this._selected) {\n        this._selected = Array.from(this._selection.values());\n      }\n\n      return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      var _this4 = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this4._markSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this5._unmarkSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(value) {\n      this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._unmarkAll();\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(value) {\n      return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(predicate) {\n      if (this._multiple && this.selected) {\n        this._selected.sort(predicate);\n      }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      // Clear the selected values so they can be re-cached.\n      this._selected = null;\n\n      if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n        this.changed.next({\n          source: this,\n          added: this._selectedToEmit,\n          removed: this._deselectedToEmit\n        });\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n      }\n    }\n    /** Selects a value. */\n\n  }, {\n    key: \"_markSelected\",\n    value: function _markSelected(value) {\n      if (!this.isSelected(value)) {\n        if (!this._multiple) {\n          this._unmarkAll();\n        }\n\n        this._selection.add(value);\n\n        if (this._emitChanges) {\n          this._selectedToEmit.push(value);\n        }\n      }\n    }\n    /** Deselects a value. */\n\n  }, {\n    key: \"_unmarkSelected\",\n    value: function _unmarkSelected(value) {\n      if (this.isSelected(value)) {\n        this._selection.delete(value);\n\n        if (this._emitChanges) {\n          this._deselectedToEmit.push(value);\n        }\n      }\n    }\n    /** Clears out the selected values. */\n\n  }, {\n    key: \"_unmarkAll\",\n    value: function _unmarkAll() {\n      var _this6 = this;\n\n      if (!this.isEmpty()) {\n        this._selection.forEach(function (value) {\n          return _this6._unmarkSelected(value);\n        });\n      }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n\n  }, {\n    key: \"_verifyValueAssignment\",\n    value: function _verifyValueAssignment(values) {\n      if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMultipleValuesInSingleSelectionError();\n      }\n    }\n  }]);\n\n  return SelectionModel;\n}();\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\n\n\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n\n\nvar UniqueSelectionDispatcher = /*#__PURE__*/(function () {\n  var UniqueSelectionDispatcher = /*#__PURE__*/function () {\n    function UniqueSelectionDispatcher() {\n      _classCallCheck(this, UniqueSelectionDispatcher);\n\n      this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n\n\n    _createClass(UniqueSelectionDispatcher, [{\n      key: \"notify\",\n      value: function notify(id, name) {\n        var _iterator2 = _createForOfIteratorHelper(this._listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener(id, name);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      /**\n       * Listen for future changes to item selection.\n       * @return Function used to deregister listener\n       */\n\n    }, {\n      key: \"listen\",\n      value: function listen(listener) {\n        var _this7 = this;\n\n        this._listeners.push(listener);\n\n        return function () {\n          _this7._listeners = _this7._listeners.filter(function (registered) {\n            return listener !== registered;\n          });\n        };\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._listeners = [];\n      }\n    }]);\n\n    return UniqueSelectionDispatcher;\n  }();\n\n  UniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n    return new (t || UniqueSelectionDispatcher)();\n  };\n\n  UniqueSelectionDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UniqueSelectionDispatcher,\n    factory: UniqueSelectionDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n  return UniqueSelectionDispatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\n\n\nvar _VIEW_REPEATER_STRATEGY = /*#__PURE__*/new InjectionToken('_ViewRepeater');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource }; //# sourceMappingURL=collections.mjs.map","map":null,"metadata":{},"sourceType":"module"}