{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar LayoutModule = /*#__PURE__*/(function () {\n  var LayoutModule = /*#__PURE__*/_createClass(function LayoutModule() {\n    _classCallCheck(this, LayoutModule);\n  });\n\n  LayoutModule.ɵfac = function LayoutModule_Factory(t) {\n    return new (t || LayoutModule)();\n  };\n\n  LayoutModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  LayoutModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return LayoutModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Global registry for all dynamically-created, injected media queries. */\n\n\nvar mediaQueriesForWebkitCompatibility = /*#__PURE__*/new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\n\nvar mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\n\nvar MediaMatcher = /*#__PURE__*/(function () {\n  var MediaMatcher = /*#__PURE__*/function () {\n    function MediaMatcher(_platform) {\n      _classCallCheck(this, MediaMatcher);\n\n      this._platform = _platform;\n      this._matchMedia = this._platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n\n\n    _createClass(MediaMatcher, [{\n      key: \"matchMedia\",\n      value: function matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n          createEmptyStyleRule(query);\n        }\n\n        return this._matchMedia(query);\n      }\n    }]);\n\n    return MediaMatcher;\n  }();\n\n  MediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n    return new (t || MediaMatcher)(i0.ɵɵinject(i1.Platform));\n  };\n\n  MediaMatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MediaMatcher,\n    factory: MediaMatcher.ɵfac,\n    providedIn: 'root'\n  });\n  return MediaMatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\n\n\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(\"@media \".concat(query, \" {body{ }}\"), 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\n\n\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: function addListener() {},\n    removeListener: function removeListener() {}\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Utility for checking the matching state of @media queries. */\n\n\nvar BreakpointObserver = /*#__PURE__*/(function () {\n  var BreakpointObserver = /*#__PURE__*/function () {\n    function BreakpointObserver(_mediaMatcher, _zone) {\n      _classCallCheck(this, BreakpointObserver);\n\n      this._mediaMatcher = _mediaMatcher;\n      this._zone = _zone;\n      /**  A map of all media queries currently being listened for. */\n\n      this._queries = new Map();\n      /** A subject for all other observables to takeUntil based on. */\n\n      this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n\n\n    _createClass(BreakpointObserver, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroySubject.next();\n\n        this._destroySubject.complete();\n      }\n      /**\n       * Whether one or more media queries match the current viewport size.\n       * @param value One or more media queries to check.\n       * @returns Whether any of the media queries match.\n       */\n\n    }, {\n      key: \"isMatched\",\n      value: function isMatched(value) {\n        var _this = this;\n\n        var queries = splitQueries(coerceArray(value));\n        return queries.some(function (mediaQuery) {\n          return _this._registerQuery(mediaQuery).mql.matches;\n        });\n      }\n      /**\n       * Gets an observable of results for the given queries that will emit new results for any changes\n       * in matching of the given queries.\n       * @param value One or more media queries to check.\n       * @returns A stream of matches for the given queries.\n       */\n\n    }, {\n      key: \"observe\",\n      value: function observe(value) {\n        var _this2 = this;\n\n        var queries = splitQueries(coerceArray(value));\n        var observables = queries.map(function (query) {\n          return _this2._registerQuery(query).observable;\n        });\n        var stateObservable = combineLatest(observables); // Emit the first state immediately, and then debounce the subsequent emissions.\n\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(function (breakpointStates) {\n          var response = {\n            matches: false,\n            breakpoints: {}\n          };\n          breakpointStates.forEach(function (_ref) {\n            var matches = _ref.matches,\n                query = _ref.query;\n            response.matches = response.matches || matches;\n            response.breakpoints[query] = matches;\n          });\n          return response;\n        }));\n      }\n      /** Registers a specific query to be listened for. */\n\n    }, {\n      key: \"_registerQuery\",\n      value: function _registerQuery(query) {\n        var _this3 = this;\n\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n          return this._queries.get(query);\n        }\n\n        var mql = this._mediaMatcher.matchMedia(query); // Create callback for match changes and add it is as a listener.\n\n\n        var queryObservable = new Observable(function (observer) {\n          // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n          // back into the zone because matchMedia is only included in Zone.js by loading the\n          // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n          // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n          // patches it.\n          var handler = function handler(e) {\n            return _this3._zone.run(function () {\n              return observer.next(e);\n            });\n          };\n\n          mql.addListener(handler);\n          return function () {\n            mql.removeListener(handler);\n          };\n        }).pipe(startWith(mql), map(function (_ref2) {\n          var matches = _ref2.matches;\n          return {\n            query: query,\n            matches: matches\n          };\n        }), takeUntil(this._destroySubject)); // Add the MediaQueryList to the set of queries.\n\n        var output = {\n          observable: queryObservable,\n          mql: mql\n        };\n\n        this._queries.set(query, output);\n\n        return output;\n      }\n    }]);\n\n    return BreakpointObserver;\n  }();\n\n  BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n    return new (t || BreakpointObserver)(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone));\n  };\n\n  BreakpointObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BreakpointObserver,\n    factory: BreakpointObserver.ɵfac,\n    providedIn: 'root'\n  });\n  return BreakpointObserver;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(function (query) {\n    return query.split(',');\n  }).reduce(function (a1, a2) {\n    return a1.concat(a2);\n  }).map(function (query) {\n    return query.trim();\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n\n\nvar Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' + '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher }; //# sourceMappingURL=layout.mjs.map","map":null,"metadata":{},"sourceType":"module"}