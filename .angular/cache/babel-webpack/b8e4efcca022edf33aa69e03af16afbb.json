{"ast":null,"code":"import _inherits from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform'; // Boilerplate for applying mixins to MatToolbar.\n\n/** @docs-private */\n\nvar _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nvar _c1 = [\"*\", \"mat-toolbar-row\"];\n\nvar _MatToolbarBase = /*#__PURE__*/mixinColor( /*#__PURE__*/function () {\n  function _class(_elementRef) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n  }\n\n  return _createClass(_class);\n}());\n\nvar MatToolbarRow = /*#__PURE__*/(function () {\n  var MatToolbarRow = /*#__PURE__*/_createClass(function MatToolbarRow() {\n    _classCallCheck(this, MatToolbarRow);\n  });\n\n  MatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) {\n    return new (t || MatToolbarRow)();\n  };\n\n  MatToolbarRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatToolbarRow,\n    selectors: [[\"mat-toolbar-row\"]],\n    hostAttrs: [1, \"mat-toolbar-row\"],\n    exportAs: [\"matToolbarRow\"]\n  });\n  return MatToolbarRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatToolbar = /*#__PURE__*/(function () {\n  var MatToolbar = /*#__PURE__*/function (_MatToolbarBase2) {\n    _inherits(MatToolbar, _MatToolbarBase2);\n\n    var _super = _createSuper(MatToolbar);\n\n    function MatToolbar(elementRef, _platform, document) {\n      var _this;\n\n      _classCallCheck(this, MatToolbar);\n\n      _this = _super.call(this, elementRef);\n      _this._platform = _platform; // TODO: make the document a required param when doing breaking changes.\n\n      _this._document = document;\n      return _this;\n    }\n\n    _createClass(MatToolbar, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        if (this._platform.isBrowser) {\n          this._checkToolbarMixedModes();\n\n          this._toolbarRows.changes.subscribe(function () {\n            return _this2._checkToolbarMixedModes();\n          });\n        }\n      }\n      /**\n       * Throws an exception when developers are attempting to combine the different toolbar row modes.\n       */\n\n    }, {\n      key: \"_checkToolbarMixedModes\",\n      value: function _checkToolbarMixedModes() {\n        var _this3 = this;\n\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          // Check if there are any other DOM nodes that can display content but aren't inside of\n          // a <mat-toolbar-row> element.\n          var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(function (node) {\n            return !(node.classList && node.classList.contains('mat-toolbar-row'));\n          }).filter(function (node) {\n            return node.nodeType !== (_this3._document ? _this3._document.COMMENT_NODE : 8);\n          }).some(function (node) {\n            return !!(node.textContent && node.textContent.trim());\n          });\n\n          if (isCombinedUsage) {\n            throwToolbarMixedModesError();\n          }\n        }\n      }\n    }]);\n\n    return MatToolbar;\n  }(_MatToolbarBase);\n\n  MatToolbar.ɵfac = function MatToolbar_Factory(t) {\n    return new (t || MatToolbar)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  MatToolbar.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatToolbar,\n    selectors: [[\"mat-toolbar\"]],\n    contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatToolbarRow, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-toolbar\"],\n    hostVars: 4,\n    hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n      }\n    },\n    inputs: {\n      color: \"color\"\n    },\n    exportAs: [\"matToolbar\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 0,\n    template: function MatToolbar_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵprojection(0);\n        i0.ɵɵprojection(1, 1);\n      }\n    },\n    styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatToolbar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\n\n\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatToolbarModule = /*#__PURE__*/(function () {\n  var MatToolbarModule = /*#__PURE__*/_createClass(function MatToolbarModule() {\n    _classCallCheck(this, MatToolbarModule);\n  });\n\n  MatToolbarModule.ɵfac = function MatToolbarModule_Factory(t) {\n    return new (t || MatToolbarModule)();\n  };\n\n  MatToolbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatToolbarModule\n  });\n  MatToolbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatToolbarModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError }; //# sourceMappingURL=toolbar.mjs.map","map":null,"metadata":{},"sourceType":"module"}