{"ast":null,"code":"import _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { DialogService } from '../common/dialog.service';\nimport { Store } from '@ngrx/store';\nimport { isAuth, AppState, AuthService } from '@memberhivex/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@memberhivex/core\";\nimport * as i4 from \"../common/dialog.service\";\nexport var AuthGuard = /*#__PURE__*/(function () {\n  var AuthGuard = /*#__PURE__*/function () {\n    function AuthGuard(_store, _router, _authSrv, _dialogSrv) {\n      _classCallCheck(this, AuthGuard);\n\n      this._store = _store;\n      this._router = _router;\n      this._authSrv = _authSrv;\n      this._dialogSrv = _dialogSrv;\n    }\n\n    _createClass(AuthGuard, [{\n      key: \"canActivate\",\n      value: function canActivate(route, state) {\n        var _this = this;\n\n        var isAuthentic$ = this._store.select(isAuth);\n\n        var isExpired = true;\n        isAuthentic$.subscribe(function (authenticated) {\n          // we must call this here because the token exp date won't be instantiated at isExpired declaration time\n          isExpired = _this._authSrv.isTokenExpired();\n\n          if (authenticated && isExpired) {\n            _this._dialogSrv.login('Your session expired').subscribe(function (confirmed) {// console.log(confirmed);\n            });\n          } else if (!authenticated) {\n            _this._router.navigate(['/login']);\n          }\n        });\n        return isAuthentic$;\n      }\n    }]);\n\n    return AuthGuard;\n  }();\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.DialogService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}