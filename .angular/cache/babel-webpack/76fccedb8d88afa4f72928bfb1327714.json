{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _regeneratorRuntime from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from 'tslib';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, Inject, LOCALE_ID, Directive, Input, EventEmitter, Output, Self, Component, ElementRef, PLATFORM_ID, ContentChildren, QueryList, forwardRef, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, ReplaySubject, bindCallback, of, throwError, fromEventPattern, merge, Subject } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, multicast, startWith, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"*\"];\nvar MapsAPILoader = /*#__PURE__*/(function () {\n  var MapsAPILoader = /*#__PURE__*/_createClass(function MapsAPILoader() {\n    _classCallCheck(this, MapsAPILoader);\n  });\n\n  MapsAPILoader.ɵfac = function MapsAPILoader_Factory(t) {\n    return new (t || MapsAPILoader)();\n  };\n\n  MapsAPILoader.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MapsAPILoader,\n    factory: MapsAPILoader.ɵfac\n  });\n  return MapsAPILoader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n\n\nvar GoogleMapsAPIWrapper = /*#__PURE__*/(function () {\n  var GoogleMapsAPIWrapper = /*#__PURE__*/function () {\n    function GoogleMapsAPIWrapper(_loader, _zone) {\n      var _this = this;\n\n      _classCallCheck(this, GoogleMapsAPIWrapper);\n\n      this._loader = _loader;\n      this._zone = _zone;\n      this._map = new Promise(function (resolve) {\n        _this._mapResolver = resolve;\n      });\n    }\n\n    _createClass(GoogleMapsAPIWrapper, [{\n      key: \"createMap\",\n      value: function createMap(el, mapOptions) {\n        var _this2 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this2._loader.load().then(function () {\n            var map = new google.maps.Map(el, mapOptions);\n\n            _this2._mapResolver(map);\n\n            return;\n          });\n        });\n      }\n    }, {\n      key: \"setMapOptions\",\n      value: function setMapOptions(options) {\n        var _this3 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          _this3._map.then(function (m) {\n            m.setOptions(options);\n          });\n        });\n      }\n      /**\n       * Creates a google map marker with the map context\n       */\n\n    }, {\n      key: \"createMarker\",\n      value: function createMarker() {\n        var _this4 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var addToMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return this._zone.runOutsideAngular(function () {\n          return _this4._map.then(function (map) {\n            if (addToMap) {\n              options.map = map;\n            }\n\n            return new google.maps.Marker(options);\n          });\n        });\n      }\n    }, {\n      key: \"createInfoWindow\",\n      value: function createInfoWindow(options) {\n        var _this5 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this5._map.then(function () {\n            return new google.maps.InfoWindow(options);\n          });\n        });\n      }\n      /**\n       * Creates a google.map.Circle for the current map.\n       */\n\n    }, {\n      key: \"createCircle\",\n      value: function createCircle(options) {\n        var _this6 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this6._map.then(function (map) {\n            options.map = map;\n            return new google.maps.Circle(options);\n          });\n        });\n      }\n      /**\n       * Creates a google.map.Rectangle for the current map.\n       */\n\n    }, {\n      key: \"createRectangle\",\n      value: function createRectangle(options) {\n        var _this7 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this7._map.then(function (map) {\n            options.map = map;\n            return new google.maps.Rectangle(options);\n          });\n        });\n      }\n    }, {\n      key: \"createPolyline\",\n      value: function createPolyline(options) {\n        var _this8 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this8.getNativeMap().then(function (map) {\n            var line = new google.maps.Polyline(options);\n            line.setMap(map);\n            return line;\n          });\n        });\n      }\n    }, {\n      key: \"createPolygon\",\n      value: function createPolygon(options) {\n        var _this9 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this9.getNativeMap().then(function (map) {\n            var polygon = new google.maps.Polygon(options);\n            polygon.setMap(map);\n            return polygon;\n          });\n        });\n      }\n      /**\n       * Creates a new google.map.Data layer for the current map\n       */\n\n    }, {\n      key: \"createDataLayer\",\n      value: function createDataLayer(options) {\n        var _this10 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this10._map.then(function (m) {\n            var data = new google.maps.Data(options);\n            data.setMap(m);\n            return data;\n          });\n        });\n      }\n      /**\n       * Creates a TransitLayer instance for a map\n       * @returns a new transit layer object\n       */\n\n    }, {\n      key: \"createTransitLayer\",\n      value: function createTransitLayer() {\n        var _this11 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this11._map.then(function (map) {\n            var newLayer = new google.maps.TransitLayer();\n            newLayer.setMap(map);\n            return newLayer;\n          });\n        });\n      }\n      /**\n       * Creates a BicyclingLayer instance for a map\n       * @returns a new bicycling layer object\n       */\n\n    }, {\n      key: \"createBicyclingLayer\",\n      value: function createBicyclingLayer() {\n        var _this12 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this12._map.then(function (map) {\n            var newLayer = new google.maps.BicyclingLayer();\n            newLayer.setMap(map);\n            return newLayer;\n          });\n        });\n      }\n      /**\n       * Determines if given coordinates are insite a Polygon path.\n       */\n\n    }, {\n      key: \"containsLocation\",\n      value: function containsLocation(latLng, polygon) {\n        return this._map.then(function () {\n          return google.maps.geometry.poly.containsLocation(latLng, polygon);\n        });\n      }\n    }, {\n      key: \"subscribeToMapEvent\",\n      value: function subscribeToMapEvent(eventName) {\n        var _arguments = arguments,\n            _this13 = this;\n\n        return new Observable(function (observer) {\n          _this13._map.then(function (m) {\n            return m.addListener(eventName, function () {\n              return _this13._zone.run(function () {\n                return observer.next(_arguments[0]);\n              });\n            });\n          });\n        });\n      }\n    }, {\n      key: \"clearInstanceListeners\",\n      value: function clearInstanceListeners() {\n        var _this14 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          _this14._map.then(function (map) {\n            google.maps.event.clearInstanceListeners(map);\n          });\n        });\n      }\n    }, {\n      key: \"setCenter\",\n      value: function setCenter(latLng) {\n        var _this15 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this15._map.then(function (map) {\n            return map.setCenter(latLng);\n          });\n        });\n      }\n    }, {\n      key: \"getZoom\",\n      value: function getZoom() {\n        var _this16 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this16._map.then(function (map) {\n            return map.getZoom();\n          });\n        });\n      }\n    }, {\n      key: \"getBounds\",\n      value: function getBounds() {\n        var _this17 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this17._map.then(function (map) {\n            return map.getBounds();\n          });\n        });\n      }\n    }, {\n      key: \"getMapTypeId\",\n      value: function getMapTypeId() {\n        var _this18 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this18._map.then(function (map) {\n            return map.getMapTypeId();\n          });\n        });\n      }\n    }, {\n      key: \"setZoom\",\n      value: function setZoom(zoom) {\n        var _this19 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this19._map.then(function (map) {\n            return map.setZoom(zoom);\n          });\n        });\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter() {\n        var _this20 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this20._map.then(function (map) {\n            return map.getCenter();\n          });\n        });\n      }\n    }, {\n      key: \"panTo\",\n      value: function panTo(latLng) {\n        var _this21 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this21._map.then(function (map) {\n            return map.panTo(latLng);\n          });\n        });\n      }\n    }, {\n      key: \"panBy\",\n      value: function panBy(x, y) {\n        var _this22 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this22._map.then(function (map) {\n            return map.panBy(x, y);\n          });\n        });\n      }\n    }, {\n      key: \"fitBounds\",\n      value: function fitBounds(latLng, padding) {\n        var _this23 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this23._map.then(function (map) {\n            return map.fitBounds(latLng, padding);\n          });\n        });\n      }\n    }, {\n      key: \"panToBounds\",\n      value: function panToBounds(latLng, padding) {\n        var _this24 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this24._map.then(function (map) {\n            return map.panToBounds(latLng, padding);\n          });\n        });\n      }\n      /**\n       * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n       */\n\n    }, {\n      key: \"getNativeMap\",\n      value: function getNativeMap() {\n        return this._map;\n      }\n      /**\n       * Triggers the given event name on the map instance.\n       */\n\n    }, {\n      key: \"triggerMapEvent\",\n      value: function triggerMapEvent(eventName) {\n        return this._map.then(function (m) {\n          return google.maps.event.trigger(m, eventName);\n        });\n      }\n    }]);\n\n    return GoogleMapsAPIWrapper;\n  }();\n\n  GoogleMapsAPIWrapper.ɵfac = function GoogleMapsAPIWrapper_Factory(t) {\n    return new (t || GoogleMapsAPIWrapper)(ɵngcc0.ɵɵinject(MapsAPILoader), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  GoogleMapsAPIWrapper.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: GoogleMapsAPIWrapper,\n    factory: GoogleMapsAPIWrapper.ɵfac\n  });\n  return GoogleMapsAPIWrapper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar CircleManager = /*#__PURE__*/(function () {\n  var CircleManager = /*#__PURE__*/function () {\n    function CircleManager(_apiWrapper, _zone) {\n      _classCallCheck(this, CircleManager);\n\n      this._apiWrapper = _apiWrapper;\n      this._zone = _zone;\n      this._circles = new Map();\n    }\n\n    _createClass(CircleManager, [{\n      key: \"addCircle\",\n      value: function addCircle(circle) {\n        var _this25 = this;\n\n        this._apiWrapper.getNativeMap().then(function () {\n          return _this25._circles.set(circle, _this25._apiWrapper.createCircle({\n            center: {\n              lat: circle.latitude,\n              lng: circle.longitude\n            },\n            clickable: circle.clickable,\n            draggable: circle.draggable,\n            editable: circle.editable,\n            fillColor: circle.fillColor,\n            fillOpacity: circle.fillOpacity,\n            radius: circle.radius,\n            strokeColor: circle.strokeColor,\n            strokeOpacity: circle.strokeOpacity,\n            strokePosition: google.maps.StrokePosition[circle.strokePosition],\n            strokeWeight: circle.strokeWeight,\n            visible: circle.visible,\n            zIndex: circle.zIndex\n          }));\n        });\n      }\n      /**\n       * Removes the given circle from the map.\n       */\n\n    }, {\n      key: \"removeCircle\",\n      value: function removeCircle(circle) {\n        var _this26 = this;\n\n        return this._circles.get(circle).then(function (c) {\n          c.setMap(null);\n\n          _this26._circles.delete(circle);\n        });\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(circle, options) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", this._circles.get(circle).then(function (c) {\n                    var actualParam = options.strokePosition;\n                    options.strokePosition = google.maps.StrokePosition[actualParam];\n                    c.setOptions(options);\n                  }));\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"getBounds\",\n      value: function getBounds(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.getBounds();\n        });\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.getCenter();\n        });\n      }\n    }, {\n      key: \"getRadius\",\n      value: function getRadius(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.getRadius();\n        });\n      }\n    }, {\n      key: \"setCenter\",\n      value: function setCenter(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setCenter({\n            lat: circle.latitude,\n            lng: circle.longitude\n          });\n        });\n      }\n    }, {\n      key: \"setEditable\",\n      value: function setEditable(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setEditable(circle.editable);\n        });\n      }\n    }, {\n      key: \"setDraggable\",\n      value: function setDraggable(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setDraggable(circle.draggable);\n        });\n      }\n    }, {\n      key: \"setVisible\",\n      value: function setVisible(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setVisible(circle.visible);\n        });\n      }\n    }, {\n      key: \"setRadius\",\n      value: function setRadius(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setRadius(circle.radius);\n        });\n      }\n    }, {\n      key: \"getNativeCircle\",\n      value: function getNativeCircle(circle) {\n        return this._circles.get(circle);\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, circle) {\n        var _this27 = this;\n\n        return new Observable(function (observer) {\n          var listener = null;\n\n          _this27._circles.get(circle).then(function (c) {\n            listener = c.addListener(eventName, function (e) {\n              return _this27._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n\n          return function () {\n            if (listener !== null) {\n              listener.remove();\n            }\n          };\n        });\n      }\n    }]);\n\n    return CircleManager;\n  }();\n\n  CircleManager.ɵfac = function CircleManager_Factory(t) {\n    return new (t || CircleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  CircleManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: CircleManager,\n    factory: CircleManager.ɵfac\n  });\n  return CircleManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n\n\nvar DataLayerManager = /*#__PURE__*/(function () {\n  var DataLayerManager = /*#__PURE__*/function () {\n    function DataLayerManager(_wrapper, _zone) {\n      _classCallCheck(this, DataLayerManager);\n\n      this._wrapper = _wrapper;\n      this._zone = _zone;\n      this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n\n\n    _createClass(DataLayerManager, [{\n      key: \"addDataLayer\",\n      value: function addDataLayer(layer) {\n        var _this28 = this;\n\n        var newLayer = this._wrapper.createDataLayer({\n          style: layer.style\n        }).then(function (d) {\n          if (layer.geoJson) {\n            // NOTE: accessing \"features\" on google.maps.Data is undocumented\n            _this28.getDataFeatures(d, layer.geoJson).then(function (features) {\n              return d.features = features;\n            });\n          }\n\n          return d;\n        });\n\n        this._layers.set(layer, newLayer);\n      }\n    }, {\n      key: \"deleteDataLayer\",\n      value: function deleteDataLayer(layer) {\n        var _this29 = this;\n\n        this._layers.get(layer).then(function (l) {\n          l.setMap(null);\n\n          _this29._layers.delete(layer);\n        });\n      }\n    }, {\n      key: \"updateGeoJson\",\n      value: function updateGeoJson(layer, geoJson) {\n        var _this30 = this;\n\n        this._layers.get(layer).then(function (l) {\n          l.forEach(function (feature) {\n            l.remove(feature); // NOTE: accessing \"features\" on google.maps.Data is undocumented\n\n            var index = l.features.indexOf(feature, 0);\n\n            if (index > -1) {\n              l.features.splice(index, 1);\n            }\n          });\n\n          _this30.getDataFeatures(l, geoJson).then(function (features) {\n            return l.features = features;\n          });\n        });\n      }\n    }, {\n      key: \"setDataOptions\",\n      value: function setDataOptions(layer, options) {\n        this._layers.get(layer).then(function (l) {\n          l.setControlPosition(options.controlPosition);\n          l.setControls(options.controls);\n          l.setDrawingMode(options.drawingMode);\n          l.setStyle(options.style);\n        });\n      }\n      /**\n       * Creates a Google Maps event listener for the given DataLayer as an Observable\n       */\n\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, layer) {\n        var _this31 = this;\n\n        return new Observable(function (observer) {\n          _this31._layers.get(layer).then(function (d) {\n            d.addListener(eventName, function (e) {\n              return _this31._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n      /**\n       * Extract features from a geoJson using google.maps Data Class\n       * @param d : google.maps.Data class instance\n       * @param geoJson : url or geojson object\n       */\n\n    }, {\n      key: \"getDataFeatures\",\n      value: function getDataFeatures(d, geoJson) {\n        return new Promise(function (resolve, reject) {\n          if (typeof geoJson === 'object') {\n            try {\n              var features = d.addGeoJson(geoJson);\n              resolve(features);\n            } catch (e) {\n              reject(e);\n            }\n          } else if (typeof geoJson === 'string') {\n            d.loadGeoJson(geoJson, null, resolve);\n          } else {\n            reject(\"Impossible to extract features from geoJson: wrong argument type\");\n          }\n        });\n      }\n    }]);\n\n    return DataLayerManager;\n  }();\n\n  DataLayerManager.ɵfac = function DataLayerManager_Factory(t) {\n    return new (t || DataLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  DataLayerManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DataLayerManager,\n    factory: DataLayerManager.ɵfac\n  });\n  return DataLayerManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\n\n\nvar FitBoundsAccessor = /*#__PURE__*/_createClass(function FitBoundsAccessor() {\n  _classCallCheck(this, FitBoundsAccessor);\n});\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\n\n\nvar FitBoundsService = /*#__PURE__*/(function () {\n  var FitBoundsService = /*#__PURE__*/function () {\n    function FitBoundsService(loader) {\n      var _this32 = this;\n\n      _classCallCheck(this, FitBoundsService);\n\n      this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n      this._includeInBounds$ = new BehaviorSubject(new Map());\n      this.bounds$ = from(loader.load()).pipe(flatMap(function () {\n        return _this32._includeInBounds$;\n      }), sample(this._boundsChangeSampleTime$.pipe(switchMap(function (time) {\n        return timer(0, time);\n      }))), map(function (includeInBounds) {\n        return _this32._generateBounds(includeInBounds);\n      }), shareReplay(1));\n    }\n\n    _createClass(FitBoundsService, [{\n      key: \"_generateBounds\",\n      value: function _generateBounds(includeInBounds) {\n        var bounds = new google.maps.LatLngBounds();\n        includeInBounds.forEach(function (b) {\n          return bounds.extend(b);\n        });\n        return bounds;\n      }\n    }, {\n      key: \"addToBounds\",\n      value: function addToBounds(latLng) {\n        var id = this._createIdentifier(latLng);\n\n        if (this._includeInBounds$.value.has(id)) {\n          return;\n        }\n\n        var boundsMap = this._includeInBounds$.value;\n        boundsMap.set(id, latLng);\n\n        this._includeInBounds$.next(boundsMap);\n      }\n    }, {\n      key: \"removeFromBounds\",\n      value: function removeFromBounds(latLng) {\n        var boundsMap = this._includeInBounds$.value;\n        boundsMap.delete(this._createIdentifier(latLng));\n\n        this._includeInBounds$.next(boundsMap);\n      }\n    }, {\n      key: \"changeFitBoundsChangeSampleTime\",\n      value: function changeFitBoundsChangeSampleTime(timeMs) {\n        this._boundsChangeSampleTime$.next(timeMs);\n      }\n    }, {\n      key: \"getBounds$\",\n      value: function getBounds$() {\n        return this.bounds$;\n      }\n    }, {\n      key: \"_createIdentifier\",\n      value: function _createIdentifier(latLng) {\n        return \"\".concat(latLng.lat, \"+\").concat(latLng.lng);\n      }\n    }]);\n\n    return FitBoundsService;\n  }();\n\n  FitBoundsService.ɵfac = function FitBoundsService_Factory(t) {\n    return new (t || FitBoundsService)(ɵngcc0.ɵɵinject(MapsAPILoader));\n  };\n\n  FitBoundsService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FitBoundsService,\n    factory: FitBoundsService.ɵfac\n  });\n  return FitBoundsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmGeocoder = /*#__PURE__*/(function () {\n  var AgmGeocoder = /*#__PURE__*/function () {\n    function AgmGeocoder(loader) {\n      var _this33 = this;\n\n      _classCallCheck(this, AgmGeocoder);\n\n      var connectableGeocoder$ = new Observable(function (subscriber) {\n        loader.load().then(function () {\n          return subscriber.next();\n        });\n      }).pipe(map(function () {\n        return _this33._createGeocoder();\n      }), multicast(new ReplaySubject(1)));\n      connectableGeocoder$.connect(); // ignore the subscription\n      // since we will remain subscribed till application exits\n\n      this.geocoder$ = connectableGeocoder$;\n    }\n\n    _createClass(AgmGeocoder, [{\n      key: \"geocode\",\n      value: function geocode(request) {\n        var _this34 = this;\n\n        return this.geocoder$.pipe(switchMap(function (geocoder) {\n          return _this34._getGoogleResults(geocoder, request);\n        }));\n      }\n    }, {\n      key: \"_getGoogleResults\",\n      value: function _getGoogleResults(geocoder, request) {\n        var geocodeObservable = bindCallback(geocoder.geocode);\n        return geocodeObservable(request).pipe(switchMap(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              results = _ref2[0],\n              status = _ref2[1];\n\n          if (status === google.maps.GeocoderStatus.OK) {\n            return of(results);\n          }\n\n          return throwError(status);\n        }));\n      }\n    }, {\n      key: \"_createGeocoder\",\n      value: function _createGeocoder() {\n        return new google.maps.Geocoder();\n      }\n    }]);\n\n    return AgmGeocoder;\n  }();\n\n  AgmGeocoder.ɵfac = function AgmGeocoder_Factory(t) {\n    return new (t || AgmGeocoder)(ɵngcc0.ɵɵinject(MapsAPILoader));\n  };\n\n  AgmGeocoder.ɵprov = ɵɵdefineInjectable({\n    factory: function AgmGeocoder_Factory() {\n      return new AgmGeocoder(ɵɵinject(MapsAPILoader));\n    },\n    token: AgmGeocoder,\n    providedIn: \"root\"\n  });\n  return AgmGeocoder;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar WindowRef = /*#__PURE__*/function () {\n  function WindowRef() {\n    _classCallCheck(this, WindowRef);\n  }\n\n  _createClass(WindowRef, [{\n    key: \"getNativeWindow\",\n    value: function getNativeWindow() {\n      return window;\n    }\n  }]);\n\n  return WindowRef;\n}();\n\nvar DocumentRef = /*#__PURE__*/function () {\n  function DocumentRef() {\n    _classCallCheck(this, DocumentRef);\n  }\n\n  _createClass(DocumentRef, [{\n    key: \"getNativeDocument\",\n    value: function getNativeDocument() {\n      return document;\n    }\n  }]);\n\n  return DocumentRef;\n}();\n\nvar BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\nvar GoogleMapsScriptProtocol = /*#__PURE__*/(function () {\n  (function (GoogleMapsScriptProtocol) {\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n  })(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n\n  return GoogleMapsScriptProtocol;\n})();\n\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nvar LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\nvar LazyMapsAPILoader = /*#__PURE__*/(function () {\n  var LazyMapsAPILoader = /*#__PURE__*/function (_MapsAPILoader) {\n    _inherits(LazyMapsAPILoader, _MapsAPILoader);\n\n    var _super = _createSuper(LazyMapsAPILoader);\n\n    function LazyMapsAPILoader() {\n      var _this35;\n\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var w = arguments.length > 1 ? arguments[1] : undefined;\n      var d = arguments.length > 2 ? arguments[2] : undefined;\n      var localeId = arguments.length > 3 ? arguments[3] : undefined;\n\n      _classCallCheck(this, LazyMapsAPILoader);\n\n      _this35 = _super.call(this);\n      _this35.localeId = localeId;\n      _this35._SCRIPT_ID = 'agmGoogleMapsApiScript';\n      _this35.callbackName = \"agmLazyMapsAPILoader\";\n      _this35._config = config || {};\n      _this35._windowRef = w;\n      _this35._documentRef = d;\n      return _this35;\n    }\n\n    _createClass(LazyMapsAPILoader, [{\n      key: \"load\",\n      value: function load() {\n        var window = this._windowRef.getNativeWindow();\n\n        if (window.google && window.google.maps) {\n          // Google maps already loaded on the page.\n          return Promise.resolve();\n        }\n\n        if (this._scriptLoadingPromise) {\n          return this._scriptLoadingPromise;\n        } // this can happen in HMR situations or Stackblitz.io editors.\n\n\n        var scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n\n        if (scriptOnPage) {\n          this._assignScriptLoadingPromise(scriptOnPage);\n\n          return this._scriptLoadingPromise;\n        }\n\n        var script = this._documentRef.getNativeDocument().createElement('script');\n\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.id = this._SCRIPT_ID;\n        script.src = this._getScriptSrc(this.callbackName);\n\n        this._assignScriptLoadingPromise(script);\n\n        this._documentRef.getNativeDocument().body.appendChild(script);\n\n        return this._scriptLoadingPromise;\n      }\n    }, {\n      key: \"_assignScriptLoadingPromise\",\n      value: function _assignScriptLoadingPromise(scriptElem) {\n        var _this36 = this;\n\n        this._scriptLoadingPromise = new Promise(function (resolve, reject) {\n          _this36._windowRef.getNativeWindow()[_this36.callbackName] = function () {\n            resolve();\n          };\n\n          scriptElem.onerror = function (error) {\n            reject(error);\n          };\n        });\n      }\n    }, {\n      key: \"_getScriptSrc\",\n      value: function _getScriptSrc(callbackName) {\n        var protocolType = this._config && this._config.protocol || GoogleMapsScriptProtocol.HTTPS;\n        var protocol;\n\n        switch (protocolType) {\n          case GoogleMapsScriptProtocol.AUTO:\n            protocol = '';\n            break;\n\n          case GoogleMapsScriptProtocol.HTTP:\n            protocol = 'http:';\n            break;\n\n          case GoogleMapsScriptProtocol.HTTPS:\n            protocol = 'https:';\n            break;\n        }\n\n        var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        var queryParams = {\n          v: this._config.apiVersion || 'quarterly',\n          callback: callbackName,\n          key: this._config.apiKey,\n          client: this._config.clientId,\n          channel: this._config.channel,\n          libraries: this._config.libraries,\n          region: this._config.region,\n          language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null)\n        };\n        var params = Object.keys(queryParams).filter(function (k) {\n          return queryParams[k] != null;\n        }).filter(function (k) {\n          // remove empty arrays\n          return !Array.isArray(queryParams[k]) || Array.isArray(queryParams[k]) && queryParams[k].length > 0;\n        }).map(function (k) {\n          // join arrays as comma seperated strings\n          var i = queryParams[k];\n\n          if (Array.isArray(i)) {\n            return {\n              key: k,\n              value: i.join(',')\n            };\n          }\n\n          return {\n            key: k,\n            value: queryParams[k]\n          };\n        }).map(function (entry) {\n          return \"\".concat(entry.key, \"=\").concat(entry.value);\n        }).join('&');\n        return \"\".concat(protocol, \"//\").concat(hostAndPath, \"?\").concat(params);\n      }\n    }]);\n\n    return LazyMapsAPILoader;\n  }(MapsAPILoader);\n\n  LazyMapsAPILoader.ɵfac = function LazyMapsAPILoader_Factory(t) {\n    return new (t || LazyMapsAPILoader)(ɵngcc0.ɵɵinject(LAZY_MAPS_API_CONFIG, 8), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject(DocumentRef), ɵngcc0.ɵɵinject(LOCALE_ID));\n  };\n\n  LazyMapsAPILoader.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LazyMapsAPILoader,\n    factory: LazyMapsAPILoader.ɵfac\n  });\n  return LazyMapsAPILoader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MarkerManager = /*#__PURE__*/(function () {\n  var MarkerManager = /*#__PURE__*/function () {\n    function MarkerManager(_mapsWrapper, _zone) {\n      _classCallCheck(this, MarkerManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._markers = new Map();\n    }\n\n    _createClass(MarkerManager, [{\n      key: \"convertAnimation\",\n      value: function convertAnimation(uiAnim) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(uiAnim === null)) {\n                    _context2.next = 4;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", null);\n\n                case 4:\n                  return _context2.abrupt(\"return\", this._mapsWrapper.getNativeMap().then(function () {\n                    return google.maps.Animation[uiAnim];\n                  }));\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n    }, {\n      key: \"deleteMarker\",\n      value: function deleteMarker(markerDirective) {\n        var _this37 = this;\n\n        var markerPromise = this._markers.get(markerDirective);\n\n        if (markerPromise == null) {\n          // marker already deleted\n          return Promise.resolve();\n        }\n\n        return markerPromise.then(function (marker) {\n          return _this37._zone.run(function () {\n            marker.setMap(null);\n\n            _this37._markers.delete(markerDirective);\n          });\n        });\n      }\n    }, {\n      key: \"updateMarkerPosition\",\n      value: function updateMarkerPosition(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setPosition({\n            lat: marker.latitude,\n            lng: marker.longitude\n          });\n        });\n      }\n    }, {\n      key: \"updateTitle\",\n      value: function updateTitle(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setTitle(marker.title);\n        });\n      }\n    }, {\n      key: \"updateLabel\",\n      value: function updateLabel(marker) {\n        return this._markers.get(marker).then(function (m) {\n          m.setLabel(marker.label);\n        });\n      }\n    }, {\n      key: \"updateDraggable\",\n      value: function updateDraggable(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setDraggable(marker.draggable);\n        });\n      }\n    }, {\n      key: \"updateIcon\",\n      value: function updateIcon(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setIcon(marker.iconUrl);\n        });\n      }\n    }, {\n      key: \"updateOpacity\",\n      value: function updateOpacity(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setOpacity(marker.opacity);\n        });\n      }\n    }, {\n      key: \"updateVisible\",\n      value: function updateVisible(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setVisible(marker.visible);\n        });\n      }\n    }, {\n      key: \"updateZIndex\",\n      value: function updateZIndex(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setZIndex(marker.zIndex);\n        });\n      }\n    }, {\n      key: \"updateClickable\",\n      value: function updateClickable(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setClickable(marker.clickable);\n        });\n      }\n    }, {\n      key: \"updateAnimation\",\n      value: function updateAnimation(marker) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          var m;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return this._markers.get(marker);\n\n                case 2:\n                  m = _context3.sent;\n                  _context3.t0 = m;\n                  _context3.next = 6;\n                  return this.convertAnimation(marker.animation);\n\n                case 6:\n                  _context3.t1 = _context3.sent;\n\n                  _context3.t0.setAnimation.call(_context3.t0, _context3.t1);\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      }\n    }, {\n      key: \"addMarker\",\n      value: function addMarker(marker) {\n        var _this38 = this;\n\n        var markerPromise = new Promise(function (resolve) {\n          return __awaiter(_this38, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.t0 = this._mapsWrapper;\n                    _context4.t1 = {\n                      lat: marker.latitude,\n                      lng: marker.longitude\n                    };\n                    _context4.t2 = marker.label;\n                    _context4.t3 = marker.draggable;\n                    _context4.t4 = marker.iconUrl;\n                    _context4.t5 = marker.opacity;\n                    _context4.t6 = marker.visible;\n                    _context4.t7 = marker.zIndex;\n                    _context4.t8 = marker.title;\n                    _context4.t9 = marker.clickable;\n                    _context4.next = 12;\n                    return this.convertAnimation(marker.animation);\n\n                  case 12:\n                    _context4.t10 = _context4.sent;\n                    _context4.t11 = {\n                      position: _context4.t1,\n                      label: _context4.t2,\n                      draggable: _context4.t3,\n                      icon: _context4.t4,\n                      opacity: _context4.t5,\n                      visible: _context4.t6,\n                      zIndex: _context4.t7,\n                      title: _context4.t8,\n                      clickable: _context4.t9,\n                      animation: _context4.t10\n                    };\n                    return _context4.abrupt(\"return\", _context4.t0.createMarker.call(_context4.t0, _context4.t11).then(resolve));\n\n                  case 15:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4, this);\n          }));\n        });\n\n        this._markers.set(marker, markerPromise);\n      }\n    }, {\n      key: \"getNativeMarker\",\n      value: function getNativeMarker(marker) {\n        return this._markers.get(marker);\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, marker) {\n        var _this39 = this;\n\n        return new Observable(function (observer) {\n          _this39._markers.get(marker).then(function (m) {\n            return m.addListener(eventName, function (e) {\n              return _this39._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }]);\n\n    return MarkerManager;\n  }();\n\n  MarkerManager.ɵfac = function MarkerManager_Factory(t) {\n    return new (t || MarkerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  MarkerManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MarkerManager,\n    factory: MarkerManager.ɵfac\n  });\n  return MarkerManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar InfoWindowManager = /*#__PURE__*/(function () {\n  var InfoWindowManager = /*#__PURE__*/function () {\n    function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {\n      _classCallCheck(this, InfoWindowManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._markerManager = _markerManager;\n      this._infoWindows = new Map();\n    }\n\n    _createClass(InfoWindowManager, [{\n      key: \"deleteInfoWindow\",\n      value: function deleteInfoWindow(infoWindow) {\n        var _this40 = this;\n\n        var iWindow = this._infoWindows.get(infoWindow);\n\n        if (iWindow == null) {\n          // info window already deleted\n          return Promise.resolve();\n        }\n\n        return iWindow.then(function (i) {\n          return _this40._zone.run(function () {\n            i.close();\n\n            _this40._infoWindows.delete(infoWindow);\n          });\n        });\n      }\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (i) {\n          return i.setPosition({\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude\n          });\n        });\n      }\n    }, {\n      key: \"setZIndex\",\n      value: function setZIndex(infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (i) {\n          return i.setZIndex(infoWindow.zIndex);\n        });\n      }\n    }, {\n      key: \"open\",\n      value: function open(infoWindow) {\n        var _this41 = this;\n\n        return this._infoWindows.get(infoWindow).then(function (w) {\n          if (infoWindow.hostMarker != null) {\n            return _this41._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {\n              return _this41._mapsWrapper.getNativeMap().then(function (map) {\n                return w.open(map, marker);\n              });\n            });\n          }\n\n          return _this41._mapsWrapper.getNativeMap().then(function (map) {\n            return w.open(map);\n          });\n        });\n      }\n    }, {\n      key: \"close\",\n      value: function close(infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (w) {\n          return w.close();\n        });\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(infoWindow, options) {\n        return this._infoWindows.get(infoWindow).then(function (i) {\n          return i.setOptions(options);\n        });\n      }\n    }, {\n      key: \"addInfoWindow\",\n      value: function addInfoWindow(infoWindow) {\n        var options = {\n          content: infoWindow.content,\n          maxWidth: infoWindow.maxWidth,\n          zIndex: infoWindow.zIndex,\n          disableAutoPan: infoWindow.disableAutoPan\n        };\n\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n          options.position = {\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude\n          };\n        }\n\n        var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n\n        this._infoWindows.set(infoWindow, infoWindowPromise);\n      }\n      /**\n       * Creates a Google Maps event listener for the given InfoWindow as an Observable\n       */\n\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, infoWindow) {\n        var _this42 = this;\n\n        return new Observable(function (observer) {\n          _this42._infoWindows.get(infoWindow).then(function (i) {\n            i.addListener(eventName, function (e) {\n              return _this42._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }]);\n\n    return InfoWindowManager;\n  }();\n\n  InfoWindowManager.ɵfac = function InfoWindowManager_Factory(t) {\n    return new (t || InfoWindowManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(MarkerManager));\n  };\n\n  InfoWindowManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: InfoWindowManager,\n    factory: InfoWindowManager.ɵfac\n  });\n  return InfoWindowManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n\n\nvar KmlLayerManager = /*#__PURE__*/(function () {\n  var KmlLayerManager = /*#__PURE__*/function () {\n    function KmlLayerManager(_wrapper, _zone) {\n      _classCallCheck(this, KmlLayerManager);\n\n      this._wrapper = _wrapper;\n      this._zone = _zone;\n      this._layers = new Map();\n    }\n    /**\n     * Adds a new KML Layer to the map.\n     */\n\n\n    _createClass(KmlLayerManager, [{\n      key: \"addKmlLayer\",\n      value: function addKmlLayer(layer) {\n        var newLayer = this._wrapper.getNativeMap().then(function (m) {\n          return new google.maps.KmlLayer({\n            clickable: layer.clickable,\n            map: m,\n            preserveViewport: layer.preserveViewport,\n            screenOverlays: layer.screenOverlays,\n            suppressInfoWindows: layer.suppressInfoWindows,\n            url: layer.url,\n            zIndex: layer.zIndex\n          });\n        });\n\n        this._layers.set(layer, newLayer);\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(layer, options) {\n        this._layers.get(layer).then(function (l) {\n          return l.setOptions(options);\n        });\n      }\n    }, {\n      key: \"deleteKmlLayer\",\n      value: function deleteKmlLayer(layer) {\n        var _this43 = this;\n\n        this._layers.get(layer).then(function (l) {\n          l.setMap(null);\n\n          _this43._layers.delete(layer);\n        });\n      }\n      /**\n       * Creates a Google Maps event listener for the given KmlLayer as an Observable\n       */\n\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, layer) {\n        var _this44 = this;\n\n        return new Observable(function (observer) {\n          _this44._layers.get(layer).then(function (m) {\n            m.addListener(eventName, function (e) {\n              return _this44._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }]);\n\n    return KmlLayerManager;\n  }();\n\n  KmlLayerManager.ɵfac = function KmlLayerManager_Factory(t) {\n    return new (t || KmlLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  KmlLayerManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: KmlLayerManager,\n    factory: KmlLayerManager.ɵfac\n  });\n  return KmlLayerManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\n\n\nvar LayerManager = /*#__PURE__*/(function () {\n  var LayerManager = /*#__PURE__*/function () {\n    function LayerManager(_wrapper) {\n      _classCallCheck(this, LayerManager);\n\n      this._wrapper = _wrapper;\n      this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map instance.\n     * @param layer - a TransitLayer object\n     * @param _options - TransitLayerOptions options\n     * @returns void\n     */\n\n\n    _createClass(LayerManager, [{\n      key: \"addTransitLayer\",\n      value: function addTransitLayer(layer) {\n        var newLayer = this._wrapper.createTransitLayer();\n\n        this._layers.set(layer, newLayer);\n      }\n      /**\n       * Adds a bicycling layer to a map instance.\n       * @param layer - a bicycling layer object\n       * @param _options - BicyclingLayer options\n       * @returns void\n       */\n\n    }, {\n      key: \"addBicyclingLayer\",\n      value: function addBicyclingLayer(layer) {\n        var newLayer = this._wrapper.createBicyclingLayer();\n\n        this._layers.set(layer, newLayer);\n      }\n      /**\n       * Deletes a map layer\n       * @param layer - the layer to delete\n       */\n\n    }, {\n      key: \"deleteLayer\",\n      value: function deleteLayer(layer) {\n        var _this45 = this;\n\n        return this._layers.get(layer).then(function (currentLayer) {\n          currentLayer.setMap(null);\n\n          _this45._layers.delete(layer);\n        });\n      }\n    }]);\n\n    return LayerManager;\n  }();\n\n  LayerManager.ɵfac = function LayerManager_Factory(t) {\n    return new (t || LayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper));\n  };\n\n  LayerManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LayerManager,\n    factory: LayerManager.ɵfac\n  });\n  return LayerManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\n\n\nvar NoOpMapsAPILoader = /*#__PURE__*/function () {\n  function NoOpMapsAPILoader() {\n    _classCallCheck(this, NoOpMapsAPILoader);\n  }\n\n  _createClass(NoOpMapsAPILoader, [{\n    key: \"load\",\n    value: function load() {\n      if (!window.google || !window.google.maps) {\n        throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n      }\n\n      return Promise.resolve();\n    }\n  }]);\n\n  return NoOpMapsAPILoader;\n}();\n\nfunction createMVCEventObservable(array) {\n  var eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(function (handler) {\n    return eventNames.map(function (eventName) {\n      return array.addListener(eventName, function (index, previous) {\n        return handler.apply(array, [{\n          newArr: array.getArray(),\n          eventName: eventName,\n          index: index,\n          previous: previous\n        }]);\n      });\n    });\n  }, function (_handler, evListeners) {\n    return evListeners.forEach(function (evListener) {\n      return evListener.remove();\n    });\n  });\n}\n\nvar MvcArrayMock = /*#__PURE__*/function () {\n  function MvcArrayMock() {\n    _classCallCheck(this, MvcArrayMock);\n\n    this.vals = [];\n    this.listeners = {\n      remove_at: [],\n      insert_at: [],\n      set_at: []\n    };\n  }\n\n  _createClass(MvcArrayMock, [{\n    key: \"clear\",\n    value: function clear() {\n      for (var i = this.vals.length - 1; i >= 0; i--) {\n        this.removeAt(i);\n      }\n    }\n  }, {\n    key: \"getArray\",\n    value: function getArray() {\n      return _toConsumableArray(this.vals);\n    }\n  }, {\n    key: \"getAt\",\n    value: function getAt(i) {\n      return this.vals[i];\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.vals.length;\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(i, elem) {\n      this.vals.splice(i, 0, elem);\n      this.listeners.insert_at.forEach(function (listener) {\n        return listener(i);\n      });\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var _this46 = this;\n\n      var deleted = this.vals.pop();\n      this.listeners.remove_at.forEach(function (listener) {\n        return listener(_this46.vals.length, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"push\",\n    value: function push(elem) {\n      var _this47 = this;\n\n      this.vals.push(elem);\n      this.listeners.insert_at.forEach(function (listener) {\n        return listener(_this47.vals.length - 1);\n      });\n      return this.vals.length;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(i) {\n      var deleted = this.vals.splice(i, 1)[0];\n      this.listeners.remove_at.forEach(function (listener) {\n        return listener(i, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"setAt\",\n    value: function setAt(i, elem) {\n      var deleted = this.vals[i];\n      this.vals[i] = elem;\n      this.listeners.set_at.forEach(function (listener) {\n        return listener(i, deleted);\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      this.vals.forEach(callback);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(eventName, handler) {\n      var listenerArr = this.listeners[eventName];\n      listenerArr.push(handler);\n      return {\n        remove: function remove() {\n          listenerArr.splice(listenerArr.indexOf(handler), 1);\n        }\n      };\n    }\n  }, {\n    key: \"bindTo\",\n    value: function bindTo() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"changed\",\n    value: function changed() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"setValues\",\n    value: function setValues() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"unbindAll\",\n    value: function unbindAll() {\n      throw new Error('Not implemented');\n    }\n  }]);\n\n  return MvcArrayMock;\n}();\n\nvar PolygonManager = /*#__PURE__*/(function () {\n  var PolygonManager = /*#__PURE__*/function () {\n    function PolygonManager(_mapsWrapper, _zone) {\n      _classCallCheck(this, PolygonManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._polygons = new Map();\n    }\n\n    _createClass(PolygonManager, [{\n      key: \"addPolygon\",\n      value: function addPolygon(path) {\n        var polygonPromise = this._mapsWrapper.createPolygon({\n          clickable: path.clickable,\n          draggable: path.draggable,\n          editable: path.editable,\n          fillColor: path.fillColor,\n          fillOpacity: path.fillOpacity,\n          geodesic: path.geodesic,\n          paths: path.paths,\n          strokeColor: path.strokeColor,\n          strokeOpacity: path.strokeOpacity,\n          strokeWeight: path.strokeWeight,\n          visible: path.visible,\n          zIndex: path.zIndex\n        });\n\n        this._polygons.set(path, polygonPromise);\n      }\n    }, {\n      key: \"updatePolygon\",\n      value: function updatePolygon(polygon) {\n        var _this48 = this;\n\n        var m = this._polygons.get(polygon);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this48._zone.run(function () {\n            l.setPaths(polygon.paths);\n          });\n        });\n      }\n    }, {\n      key: \"setPolygonOptions\",\n      value: function setPolygonOptions(path, options) {\n        return this._polygons.get(path).then(function (l) {\n          l.setOptions(options);\n        });\n      }\n    }, {\n      key: \"deletePolygon\",\n      value: function deletePolygon(paths) {\n        var _this49 = this;\n\n        var m = this._polygons.get(paths);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this49._zone.run(function () {\n            l.setMap(null);\n\n            _this49._polygons.delete(paths);\n          });\n        });\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath(polygonDirective) {\n        return this._polygons.get(polygonDirective).then(function (polygon) {\n          return polygon.getPath().getArray();\n        });\n      }\n    }, {\n      key: \"getPaths\",\n      value: function getPaths(polygonDirective) {\n        return this._polygons.get(polygonDirective).then(function (polygon) {\n          return polygon.getPaths().getArray().map(function (p) {\n            return p.getArray();\n          });\n        });\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, path) {\n        var _this50 = this;\n\n        return new Observable(function (observer) {\n          _this50._polygons.get(path).then(function (l) {\n            l.addListener(eventName, function (e) {\n              return _this50._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }, {\n      key: \"createPathEventObservable\",\n      value: function createPathEventObservable(agmPolygon) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n          var polygon, paths, pathsChanges$;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return this._polygons.get(agmPolygon);\n\n                case 2:\n                  polygon = _context5.sent;\n                  paths = polygon.getPaths();\n                  pathsChanges$ = createMVCEventObservable(paths);\n                  return _context5.abrupt(\"return\", pathsChanges$.pipe(startWith({\n                    newArr: paths.getArray()\n                  }), // in order to subscribe to them all\n                  switchMap(function (parentMVEvent) {\n                    return merge.apply(void 0, _toConsumableArray( // rest parameter\n                    parentMVEvent.newArr.map(function (chMVC, index) {\n                      return createMVCEventObservable(chMVC).pipe(map(function (chMVCEvent) {\n                        return {\n                          parentMVEvent: parentMVEvent,\n                          chMVCEvent: chMVCEvent,\n                          pathIndex: index\n                        };\n                      }));\n                    }))).pipe( // start the merged ob with an event signinifing change to parent\n                    startWith({\n                      parentMVEvent: parentMVEvent,\n                      chMVCEvent: null,\n                      pathIndex: null\n                    }));\n                  }), skip(1), // skip the manually added event\n                  map(function (_ref3) {\n                    var parentMVEvent = _ref3.parentMVEvent,\n                        chMVCEvent = _ref3.chMVCEvent,\n                        pathIndex = _ref3.pathIndex;\n                    var retVal;\n\n                    if (!chMVCEvent) {\n                      retVal = {\n                        newArr: parentMVEvent.newArr.map(function (subArr) {\n                          return subArr.getArray().map(function (latLng) {\n                            return latLng.toJSON();\n                          });\n                        }),\n                        eventName: parentMVEvent.eventName,\n                        index: parentMVEvent.index\n                      };\n\n                      if (parentMVEvent.previous) {\n                        retVal.previous = parentMVEvent.previous.getArray();\n                      }\n                    } else {\n                      retVal = {\n                        newArr: parentMVEvent.newArr.map(function (subArr) {\n                          return subArr.getArray().map(function (latLng) {\n                            return latLng.toJSON();\n                          });\n                        }),\n                        pathIndex: pathIndex,\n                        eventName: chMVCEvent.eventName,\n                        index: chMVCEvent.index\n                      };\n\n                      if (chMVCEvent.previous) {\n                        retVal.previous = chMVCEvent.previous;\n                      }\n                    }\n\n                    return retVal;\n                  })));\n\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n      }\n    }]);\n\n    return PolygonManager;\n  }();\n\n  PolygonManager.ɵfac = function PolygonManager_Factory(t) {\n    return new (t || PolygonManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  PolygonManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PolygonManager,\n    factory: PolygonManager.ɵfac\n  });\n  return PolygonManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar PolylineManager = /*#__PURE__*/(function () {\n  var PolylineManager = /*#__PURE__*/function () {\n    function PolylineManager(_mapsWrapper, _zone) {\n      _classCallCheck(this, PolylineManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._polylines = new Map();\n    }\n\n    _createClass(PolylineManager, [{\n      key: \"addPolyline\",\n      value: function addPolyline(line) {\n        var _this51 = this;\n\n        var polylinePromise = this._mapsWrapper.getNativeMap().then(function () {\n          return [PolylineManager._convertPoints(line), PolylineManager._convertIcons(line)];\n        }).then(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n              path = _ref5[0],\n              icons = _ref5[1];\n\n          return _this51._mapsWrapper.createPolyline({\n            clickable: line.clickable,\n            draggable: line.draggable,\n            editable: line.editable,\n            geodesic: line.geodesic,\n            strokeColor: line.strokeColor,\n            strokeOpacity: line.strokeOpacity,\n            strokeWeight: line.strokeWeight,\n            visible: line.visible,\n            zIndex: line.zIndex,\n            path: path,\n            icons: icons\n          });\n        });\n\n        this._polylines.set(line, polylinePromise);\n      }\n    }, {\n      key: \"updatePolylinePoints\",\n      value: function updatePolylinePoints(line) {\n        var _this52 = this;\n\n        var path = PolylineManager._convertPoints(line);\n\n        var m = this._polylines.get(line);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this52._zone.run(function () {\n            return l.setPath(path);\n          });\n        });\n      }\n    }, {\n      key: \"updateIconSequences\",\n      value: function updateIconSequences(line) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n          var _this53 = this;\n\n          var icons, m;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return this._mapsWrapper.getNativeMap();\n\n                case 2:\n                  icons = PolylineManager._convertIcons(line);\n                  m = this._polylines.get(line);\n\n                  if (!(m == null)) {\n                    _context6.next = 6;\n                    break;\n                  }\n\n                  return _context6.abrupt(\"return\");\n\n                case 6:\n                  return _context6.abrupt(\"return\", m.then(function (l) {\n                    return _this53._zone.run(function () {\n                      return l.setOptions({\n                        icons: icons\n                      });\n                    });\n                  }));\n\n                case 7:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, this);\n        }));\n      }\n    }, {\n      key: \"setPolylineOptions\",\n      value: function setPolylineOptions(line, options) {\n        return this._polylines.get(line).then(function (l) {\n          l.setOptions(options);\n        });\n      }\n    }, {\n      key: \"deletePolyline\",\n      value: function deletePolyline(line) {\n        var _this54 = this;\n\n        var m = this._polylines.get(line);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this54._zone.run(function () {\n            l.setMap(null);\n\n            _this54._polylines.delete(line);\n          });\n        });\n      }\n    }, {\n      key: \"getMVCPath\",\n      value: function getMVCPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n          var polyline;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return this._polylines.get(agmPolyline);\n\n                case 2:\n                  polyline = _context7.sent;\n                  return _context7.abrupt(\"return\", polyline.getPath());\n\n                case 4:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, this);\n        }));\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return this.getMVCPath(agmPolyline);\n\n                case 2:\n                  return _context8.abrupt(\"return\", _context8.sent.getArray());\n\n                case 3:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, this);\n        }));\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, line) {\n        var _this55 = this;\n\n        return new Observable(function (observer) {\n          _this55._polylines.get(line).then(function (l) {\n            l.addListener(eventName, function (e) {\n              return _this55._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }, {\n      key: \"createPathEventObservable\",\n      value: function createPathEventObservable(line) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n          var mvcPath;\n          return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  _context9.next = 2;\n                  return this.getMVCPath(line);\n\n                case 2:\n                  mvcPath = _context9.sent;\n                  return _context9.abrupt(\"return\", createMVCEventObservable(mvcPath));\n\n                case 4:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9, this);\n        }));\n      }\n    }], [{\n      key: \"_convertPoints\",\n      value: function _convertPoints(line) {\n        var path = line._getPoints().map(function (point) {\n          return {\n            lat: point.latitude,\n            lng: point.longitude\n          };\n        });\n\n        return path;\n      }\n    }, {\n      key: \"_convertPath\",\n      value: function _convertPath(path) {\n        var symbolPath = google.maps.SymbolPath[path];\n\n        if (typeof symbolPath === 'number') {\n          return symbolPath;\n        } else {\n          return path;\n        }\n      }\n    }, {\n      key: \"_convertIcons\",\n      value: function _convertIcons(line) {\n        var icons = line._getIcons().map(function (agmIcon) {\n          return {\n            fixedRotation: agmIcon.fixedRotation,\n            offset: agmIcon.offset,\n            repeat: agmIcon.repeat,\n            icon: {\n              anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n              fillColor: agmIcon.fillColor,\n              fillOpacity: agmIcon.fillOpacity,\n              path: PolylineManager._convertPath(agmIcon.path),\n              rotation: agmIcon.rotation,\n              scale: agmIcon.scale,\n              strokeColor: agmIcon.strokeColor,\n              strokeOpacity: agmIcon.strokeOpacity,\n              strokeWeight: agmIcon.strokeWeight\n            }\n          };\n        }); // prune undefineds;\n\n\n        icons.forEach(function (icon) {\n          Object.entries(icon).forEach(function (_ref6) {\n            var _ref7 = _slicedToArray(_ref6, 2),\n                key = _ref7[0],\n                val = _ref7[1];\n\n            if (typeof val === 'undefined') {\n              delete icon[key];\n            }\n          });\n\n          if (typeof icon.icon.anchor.x === 'undefined' || typeof icon.icon.anchor.y === 'undefined') {\n            delete icon.icon.anchor;\n          }\n        });\n        return icons;\n      }\n    }]);\n\n    return PolylineManager;\n  }();\n\n  PolylineManager.ɵfac = function PolylineManager_Factory(t) {\n    return new (t || PolylineManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  PolylineManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PolylineManager,\n    factory: PolylineManager.ɵfac\n  });\n  return PolylineManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar RectangleManager = /*#__PURE__*/(function () {\n  var RectangleManager = /*#__PURE__*/function () {\n    function RectangleManager(_apiWrapper, _zone) {\n      _classCallCheck(this, RectangleManager);\n\n      this._apiWrapper = _apiWrapper;\n      this._zone = _zone;\n      this._rectangles = new Map();\n    }\n\n    _createClass(RectangleManager, [{\n      key: \"addRectangle\",\n      value: function addRectangle(rectangle) {\n        var _this56 = this;\n\n        this._apiWrapper.getNativeMap().then(function () {\n          return _this56._rectangles.set(rectangle, _this56._apiWrapper.createRectangle({\n            bounds: {\n              north: rectangle.north,\n              east: rectangle.east,\n              south: rectangle.south,\n              west: rectangle.west\n            },\n            clickable: rectangle.clickable,\n            draggable: rectangle.draggable,\n            editable: rectangle.editable,\n            fillColor: rectangle.fillColor,\n            fillOpacity: rectangle.fillOpacity,\n            strokeColor: rectangle.strokeColor,\n            strokeOpacity: rectangle.strokeOpacity,\n            strokePosition: google.maps.StrokePosition[rectangle.strokePosition],\n            strokeWeight: rectangle.strokeWeight,\n            visible: rectangle.visible,\n            zIndex: rectangle.zIndex\n          }));\n        });\n      }\n      /**\n       * Removes the given rectangle from the map.\n       */\n\n    }, {\n      key: \"removeRectangle\",\n      value: function removeRectangle(rectangle) {\n        var _this57 = this;\n\n        return this._rectangles.get(rectangle).then(function (r) {\n          r.setMap(null);\n\n          _this57._rectangles.delete(rectangle);\n        });\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(rectangle, options) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          var actualStrokePosition = options.strokePosition;\n          options.strokePosition = google.maps.StrokePosition[actualStrokePosition];\n          r.setOptions(options);\n        });\n      }\n    }, {\n      key: \"getBounds\",\n      value: function getBounds(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.getBounds();\n        });\n      }\n    }, {\n      key: \"setBounds\",\n      value: function setBounds(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setBounds({\n            north: rectangle.north,\n            east: rectangle.east,\n            south: rectangle.south,\n            west: rectangle.west\n          });\n        });\n      }\n    }, {\n      key: \"setEditable\",\n      value: function setEditable(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setEditable(rectangle.editable);\n        });\n      }\n    }, {\n      key: \"setDraggable\",\n      value: function setDraggable(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setDraggable(rectangle.draggable);\n        });\n      }\n    }, {\n      key: \"setVisible\",\n      value: function setVisible(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setVisible(rectangle.visible);\n        });\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, rectangle) {\n        var _this58 = this;\n\n        return new Observable(function (subsrciber) {\n          var listener = null;\n\n          _this58._rectangles.get(rectangle).then(function (r) {\n            listener = r.addListener(eventName, function (e) {\n              return _this58._zone.run(function () {\n                return subsrciber.next(e);\n              });\n            });\n          });\n\n          return function () {\n            if (listener !== null) {\n              listener.remove();\n            }\n          };\n        });\n      }\n    }]);\n\n    return RectangleManager;\n  }();\n\n  RectangleManager.ɵfac = function RectangleManager_Factory(t) {\n    return new (t || RectangleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  RectangleManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: RectangleManager,\n    factory: RectangleManager.ɵfac\n  });\n  return RectangleManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\n\nvar AgmBicyclingLayer = /*#__PURE__*/(function () {\n  var AgmBicyclingLayer = /*#__PURE__*/function () {\n    function AgmBicyclingLayer(_manager) {\n      _classCallCheck(this, AgmBicyclingLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId++).toString();\n      /**\n       * Hide/show bicycling layer\n       */\n\n      this.visible = true;\n    }\n\n    _createClass(AgmBicyclingLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addBicyclingLayer(this);\n\n        this._addedToManager = true;\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmBicyclingLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteLayer(this);\n      }\n    }]);\n\n    return AgmBicyclingLayer;\n  }();\n\n  AgmBicyclingLayer.ɵfac = function AgmBicyclingLayer_Factory(t) {\n    return new (t || AgmBicyclingLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager));\n  };\n\n  AgmBicyclingLayer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmBicyclingLayer,\n    selectors: [[\"agm-bicycling-layer\"]],\n    inputs: {\n      visible: \"visible\"\n    }\n  });\n  return AgmBicyclingLayer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmCircle = /*#__PURE__*/(function () {\n  var AgmCircle = /*#__PURE__*/function () {\n    function AgmCircle(_manager) {\n      _classCallCheck(this, AgmCircle);\n\n      this._manager = _manager;\n      /**\n       * Indicates whether this Circle handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this circle over the map. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this circle by dragging the control points shown at\n       * the center and around the circumference of the circle. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * The radius in meters on the Earth's surface.\n       */\n\n      this.radius = 0;\n      /**\n       * The stroke position. Defaults to CENTER.\n       * This property is not supported on Internet Explorer 8 and earlier.\n       */\n\n      this.strokePosition = 'CENTER';\n      /**\n       * The stroke width in pixels.\n       */\n\n      this.strokeWeight = 0;\n      /**\n       * Whether this circle is visible on the map. Defaults to true.\n       */\n\n      this.visible = true;\n      /**\n       * This event is fired when the circle's center is changed.\n       */\n\n      this.centerChange = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user clicks on the circle.\n       */\n\n      this.circleClick = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user clicks on the circle.\n       */\n\n      this.circleDblClick = new EventEmitter();\n      /**\n       * This event is repeatedly fired while the user drags the circle.\n       */\n      // tslint:disable-next-line: no-output-native\n\n      this.drag = new EventEmitter();\n      /**\n       * This event is fired when the user stops dragging the circle.\n       */\n\n      this.dragEnd = new EventEmitter();\n      /**\n       * This event is fired when the user starts dragging the circle.\n       */\n\n      this.dragStart = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the circle.\n       */\n\n      this.mouseDown = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the circle.\n       */\n\n      this.mouseMove = new EventEmitter();\n      /**\n       * This event is fired on circle mouseout.\n       */\n\n      this.mouseOut = new EventEmitter();\n      /**\n       * This event is fired on circle mouseover.\n       */\n\n      this.mouseOver = new EventEmitter();\n      /**\n       * This event is fired when the DOM mouseup event is fired on the circle.\n       */\n\n      this.mouseUp = new EventEmitter();\n      /**\n       * This event is fired when the circle's radius is changed.\n       */\n\n      this.radiusChange = new EventEmitter();\n      /**\n       * This event is fired when the circle is right-clicked on.\n       */\n\n      this.rightClick = new EventEmitter();\n      this._circleAddedToManager = false;\n      this._eventSubscriptions = [];\n    }\n    /** @internal */\n\n\n    _createClass(AgmCircle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._manager.addCircle(this);\n\n        this._circleAddedToManager = true;\n\n        this._registerEventListeners();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._circleAddedToManager) {\n          return;\n        } // tslint:disable: no-string-literal\n\n\n        if (changes['latitude'] || changes['longitude']) {\n          this._manager.setCenter(this);\n        }\n\n        if (changes['editable']) {\n          this._manager.setEditable(this);\n        }\n\n        if (changes['draggable']) {\n          this._manager.setDraggable(this);\n        }\n\n        if (changes['visible']) {\n          this._manager.setVisible(this);\n        }\n\n        if (changes['radius']) {\n          this._manager.setRadius(this);\n        } // tslint:enable: no-string-literal\n\n\n        this._updateCircleOptionsChanges(changes);\n      }\n    }, {\n      key: \"_updateCircleOptionsChanges\",\n      value: function _updateCircleOptionsChanges(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmCircle._mapOptions.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        if (optionKeys.length > 0) {\n          this._manager.setOptions(this, options);\n        }\n      }\n    }, {\n      key: \"_registerEventListeners\",\n      value: function _registerEventListeners() {\n        var _this59 = this;\n\n        var events = new Map();\n        events.set('center_changed', this.centerChange);\n        events.set('click', this.circleClick);\n        events.set('dblclick', this.circleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragstart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('radius_changed', this.radiusChange);\n        events.set('rightclick', this.rightClick);\n        events.forEach(function (eventEmitter, eventName) {\n          _this59._eventSubscriptions.push(_this59._manager.createEventObservable(eventName, _this59).subscribe(function (value) {\n            switch (eventName) {\n              case 'radius_changed':\n                _this59._manager.getRadius(_this59).then(function (radius) {\n                  return eventEmitter.emit(radius);\n                });\n\n                break;\n\n              case 'center_changed':\n                _this59._manager.getCenter(_this59).then(function (center) {\n                  return eventEmitter.emit({\n                    lat: center.lat(),\n                    lng: center.lng()\n                  });\n                });\n\n                break;\n\n              default:\n                eventEmitter.emit(value);\n            }\n          }));\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n\n        this._eventSubscriptions = null;\n\n        this._manager.removeCircle(this);\n      }\n      /**\n       * Gets the LatLngBounds of this Circle.\n       */\n\n    }, {\n      key: \"getBounds\",\n      value: function getBounds() {\n        return this._manager.getBounds(this);\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter() {\n        return this._manager.getCenter(this);\n      }\n    }]);\n\n    return AgmCircle;\n  }();\n\n  AgmCircle.ɵfac = function AgmCircle_Factory(t) {\n    return new (t || AgmCircle)(ɵngcc0.ɵɵdirectiveInject(CircleManager));\n  };\n\n  AgmCircle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmCircle,\n    selectors: [[\"agm-circle\"]],\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"circleDraggable\", \"draggable\"],\n      editable: \"editable\",\n      radius: \"radius\",\n      strokePosition: \"strokePosition\",\n      strokeWeight: \"strokeWeight\",\n      visible: \"visible\",\n      latitude: \"latitude\",\n      longitude: \"longitude\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      centerChange: \"centerChange\",\n      circleClick: \"circleClick\",\n      circleDblClick: \"circleDblClick\",\n      drag: \"drag\",\n      dragEnd: \"dragEnd\",\n      dragStart: \"dragStart\",\n      mouseDown: \"mouseDown\",\n      mouseMove: \"mouseMove\",\n      mouseOut: \"mouseOut\",\n      mouseOver: \"mouseOver\",\n      mouseUp: \"mouseUp\",\n      radiusChange: \"radiusChange\",\n      rightClick: \"rightClick\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  AgmCircle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n  return AgmCircle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n\nvar AgmDataLayer = /*#__PURE__*/(function () {\n  var AgmDataLayer = /*#__PURE__*/function () {\n    function AgmDataLayer(_manager) {\n      _classCallCheck(this, AgmDataLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId$1++).toString();\n      this._subscriptions = [];\n      /**\n       * This event is fired when a feature in the layer is clicked.\n       */\n\n      this.layerClick = new EventEmitter();\n      /**\n       * The geoJson to be displayed\n       */\n\n      this.geoJson = null;\n    }\n\n    _createClass(AgmDataLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addDataLayer(this);\n\n        this._addedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this60 = this;\n\n        var listeners = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this60.layerClick.emit(ev);\n          }\n        }];\n        listeners.forEach(function (obj) {\n          var os = _this60._manager.createEventObservable(obj.name, _this60).subscribe(obj.handler);\n\n          _this60._subscriptions.push(os);\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmDataLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteDataLayer(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this61 = this;\n\n        if (!this._addedToManager) {\n          return;\n        } // tslint:disable-next-line: no-string-literal\n\n\n        var geoJsonChange = changes['geoJson'];\n\n        if (geoJsonChange) {\n          this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n        }\n\n        var dataOptions = AgmDataLayer._dataOptionsAttributes.reduce(function (options, k) {\n          return options[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : _this61[k];\n        }, {});\n\n        this._manager.setDataOptions(this, dataOptions);\n      }\n    }]);\n\n    return AgmDataLayer;\n  }();\n\n  AgmDataLayer.ɵfac = function AgmDataLayer_Factory(t) {\n    return new (t || AgmDataLayer)(ɵngcc0.ɵɵdirectiveInject(DataLayerManager));\n  };\n\n  AgmDataLayer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmDataLayer,\n    selectors: [[\"agm-data-layer\"]],\n    inputs: {\n      geoJson: \"geoJson\",\n      style: \"style\"\n    },\n    outputs: {\n      layerClick: \"layerClick\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  AgmDataLayer._dataOptionsAttributes = ['style'];\n  return AgmDataLayer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\n\n\nvar AgmFitBounds = /*#__PURE__*/(function () {\n  var AgmFitBounds = /*#__PURE__*/function () {\n    function AgmFitBounds(_fitBoundsAccessor, _fitBoundsService) {\n      _classCallCheck(this, AgmFitBounds);\n\n      this._fitBoundsAccessor = _fitBoundsAccessor;\n      this._fitBoundsService = _fitBoundsService;\n      /**\n       * If the value is true, the element gets added to the bounds of the map.\n       * Default: true.\n       */\n\n      this.agmFitBounds = true;\n      this._destroyed$ = new Subject();\n      this._latestFitBoundsDetails = null;\n    }\n    /**\n     * @internal\n     */\n\n\n    _createClass(AgmFitBounds, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this._updateBounds();\n      }\n      /**\n       * @internal\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this62 = this;\n\n        this._fitBoundsAccessor.getFitBoundsDetails$().pipe(distinctUntilChanged(function (x, y) {\n          return x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng;\n        }), takeUntil(this._destroyed$)).subscribe(function (details) {\n          return _this62._updateBounds(details);\n        });\n      }\n      /*\n       Either the location changed, or visible status changed.\n       Possible state changes are\n       invisible -> visible\n       visible -> invisible\n       visible -> visible (new location)\n      */\n\n    }, {\n      key: \"_updateBounds\",\n      value: function _updateBounds(newFitBoundsDetails) {\n        // either visibility will change, or location, so remove the old one anyway\n        if (this._latestFitBoundsDetails) {\n          this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng); // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n          // true -> false -> true, in which case we still need old value cached here\n\n        }\n\n        if (newFitBoundsDetails) {\n          this._latestFitBoundsDetails = newFitBoundsDetails;\n        }\n\n        if (!this._latestFitBoundsDetails) {\n          return;\n        }\n\n        if (this.agmFitBounds === true) {\n          this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n        }\n      }\n      /**\n       * @internal\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed$.next();\n\n        this._destroyed$.complete();\n\n        if (this._latestFitBoundsDetails !== null) {\n          this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n        }\n      }\n    }]);\n\n    return AgmFitBounds;\n  }();\n\n  AgmFitBounds.ɵfac = function AgmFitBounds_Factory(t) {\n    return new (t || AgmFitBounds)(ɵngcc0.ɵɵdirectiveInject(FitBoundsAccessor, 2), ɵngcc0.ɵɵdirectiveInject(FitBoundsService));\n  };\n\n  AgmFitBounds.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmFitBounds,\n    selectors: [[\"\", \"agmFitBounds\", \"\"]],\n    inputs: {\n      agmFitBounds: \"agmFitBounds\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return AgmFitBounds;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmInfoWindow = /*#__PURE__*/(function () {\n  var AgmInfoWindow = /*#__PURE__*/function () {\n    function AgmInfoWindow(_infoWindowManager, _el) {\n      _classCallCheck(this, AgmInfoWindow);\n\n      this._infoWindowManager = _infoWindowManager;\n      this._el = _el;\n      /**\n       * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n       */\n\n      this.isOpen = false;\n      /**\n       * Emits an event when the info window is closed.\n       */\n\n      this.infoWindowClose = new EventEmitter();\n      this._infoWindowAddedToManager = false;\n      this._id = (infoWindowId++).toString();\n    }\n\n    _createClass(AgmInfoWindow, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n\n        this._infoWindowManager.addInfoWindow(this);\n\n        this._infoWindowAddedToManager = true;\n\n        this._updateOpenState();\n\n        this._registerEventListeners();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._infoWindowAddedToManager) {\n          return;\n        } // tslint:disable: no-string-literal\n\n\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' && typeof this.longitude === 'number') {\n          this._infoWindowManager.setPosition(this);\n        }\n\n        if (changes['zIndex']) {\n          this._infoWindowManager.setZIndex(this);\n        }\n\n        if (changes['isOpen']) {\n          this._updateOpenState();\n        }\n\n        this._setInfoWindowOptions(changes);\n      } // tslint:enable: no-string-literal\n\n    }, {\n      key: \"_registerEventListeners\",\n      value: function _registerEventListeners() {\n        var _this63 = this;\n\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {\n          _this63.isOpen = false;\n\n          _this63.infoWindowClose.emit();\n        });\n      }\n    }, {\n      key: \"_updateOpenState\",\n      value: function _updateOpenState() {\n        this.isOpen ? this.open() : this.close();\n      }\n    }, {\n      key: \"_setInfoWindowOptions\",\n      value: function _setInfoWindowOptions(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        this._infoWindowManager.setOptions(this, options);\n      }\n      /**\n       * Opens the info window.\n       */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        return this._infoWindowManager.open(this);\n      }\n      /**\n       * Closes the info window.\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        var _this64 = this;\n\n        return this._infoWindowManager.close(this).then(function () {\n          _this64.infoWindowClose.emit();\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return 'AgmInfoWindow-' + this._id.toString();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._infoWindowManager.deleteInfoWindow(this);\n      }\n    }]);\n\n    return AgmInfoWindow;\n  }();\n\n  AgmInfoWindow.ɵfac = function AgmInfoWindow_Factory(t) {\n    return new (t || AgmInfoWindow)(ɵngcc0.ɵɵdirectiveInject(InfoWindowManager), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  AgmInfoWindow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AgmInfoWindow,\n    selectors: [[\"agm-info-window\"]],\n    inputs: {\n      isOpen: \"isOpen\",\n      latitude: \"latitude\",\n      longitude: \"longitude\",\n      disableAutoPan: \"disableAutoPan\",\n      zIndex: \"zIndex\",\n      maxWidth: \"maxWidth\"\n    },\n    outputs: {\n      infoWindowClose: \"infoWindowClose\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"agm-info-window-content\"]],\n    template: function AgmInfoWindow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  AgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\n  return AgmInfoWindow;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar layerId$2 = 0;\nvar AgmKmlLayer = /*#__PURE__*/(function () {\n  var AgmKmlLayer = /*#__PURE__*/function () {\n    function AgmKmlLayer(_manager) {\n      _classCallCheck(this, AgmKmlLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId$2++).toString();\n      this._subscriptions = [];\n      /**\n       * If true, the layer receives mouse events. Default value is true.\n       */\n\n      this.clickable = true;\n      /**\n       * By default, the input map is centered and zoomed to the bounding box of the contents of the\n       * layer.\n       * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n       * were never set.\n       */\n\n      this.preserveViewport = false;\n      /**\n       * Whether to render the screen overlays. Default true.\n       */\n\n      this.screenOverlays = true;\n      /**\n       * Suppress the rendering of info windows when layer features are clicked.\n       */\n\n      this.suppressInfoWindows = false;\n      /**\n       * The URL of the KML document to display.\n       */\n\n      this.url = null;\n      /**\n       * The z-index of the layer.\n       */\n\n      this.zIndex = null;\n      /**\n       * This event is fired when a feature in the layer is clicked.\n       */\n\n      this.layerClick = new EventEmitter();\n      /**\n       * This event is fired when the KML layers default viewport has changed.\n       */\n\n      this.defaultViewportChange = new EventEmitter();\n      /**\n       * This event is fired when the KML layer has finished loading.\n       * At this point it is safe to read the status property to determine if the layer loaded\n       * successfully.\n       */\n\n      this.statusChange = new EventEmitter();\n    }\n\n    _createClass(AgmKmlLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addKmlLayer(this);\n\n        this._addedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._addedToManager) {\n          return;\n        }\n\n        this._updatePolygonOptions(changes);\n      }\n    }, {\n      key: \"_updatePolygonOptions\",\n      value: function _updatePolygonOptions(changes) {\n        var options = Object.keys(changes).filter(function (k) {\n          return AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1;\n        }).reduce(function (obj, k) {\n          obj[k] = changes[k].currentValue;\n          return obj;\n        }, {});\n\n        if (Object.keys(options).length > 0) {\n          this._manager.setOptions(this, options);\n        }\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this65 = this;\n\n        var listeners = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this65.layerClick.emit(ev);\n          }\n        }, {\n          name: 'defaultviewport_changed',\n          handler: function handler() {\n            return _this65.defaultViewportChange.emit();\n          }\n        }, {\n          name: 'status_changed',\n          handler: function handler() {\n            return _this65.statusChange.emit();\n          }\n        }];\n        listeners.forEach(function (obj) {\n          var os = _this65._manager.createEventObservable(obj.name, _this65).subscribe(obj.handler);\n\n          _this65._subscriptions.push(os);\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmKmlLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteKmlLayer(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }]);\n\n    return AgmKmlLayer;\n  }();\n\n  AgmKmlLayer.ɵfac = function AgmKmlLayer_Factory(t) {\n    return new (t || AgmKmlLayer)(ɵngcc0.ɵɵdirectiveInject(KmlLayerManager));\n  };\n\n  AgmKmlLayer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmKmlLayer,\n    selectors: [[\"agm-kml-layer\"]],\n    inputs: {\n      clickable: \"clickable\",\n      preserveViewport: \"preserveViewport\",\n      screenOverlays: \"screenOverlays\",\n      suppressInfoWindows: \"suppressInfoWindows\",\n      url: \"url\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      layerClick: \"layerClick\",\n      defaultViewportChange: \"defaultViewportChange\",\n      statusChange: \"statusChange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  AgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n  return AgmKmlLayer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmMapControl = /*#__PURE__*/(function () {\n  var AgmMapControl = /*#__PURE__*/_createClass(function AgmMapControl() {\n    _classCallCheck(this, AgmMapControl);\n  });\n\n  AgmMapControl.ɵfac = function AgmMapControl_Factory(t) {\n    return new (t || AgmMapControl)();\n  };\n\n  AgmMapControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmMapControl,\n    inputs: {\n      position: \"position\"\n    }\n  });\n  return AgmMapControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmFullscreenControl = /*#__PURE__*/(function () {\n  var AgmFullscreenControl = /*#__PURE__*/function (_AgmMapControl) {\n    _inherits(AgmFullscreenControl, _AgmMapControl);\n\n    var _super2 = _createSuper(AgmFullscreenControl);\n\n    function AgmFullscreenControl() {\n      _classCallCheck(this, AgmFullscreenControl);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(AgmFullscreenControl, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          fullscreenControl: true,\n          fullscreenControlOptions: {\n            position: this.position && google.maps.ControlPosition[this.position]\n          }\n        };\n      }\n    }]);\n\n    return AgmFullscreenControl;\n  }(AgmMapControl);\n\n  AgmFullscreenControl.ɵfac = /*@__PURE__*/function () {\n    var ɵAgmFullscreenControl_BaseFactory;\n    return function AgmFullscreenControl_Factory(t) {\n      return (ɵAgmFullscreenControl_BaseFactory || (ɵAgmFullscreenControl_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AgmFullscreenControl)))(t || AgmFullscreenControl);\n    };\n  }();\n\n  AgmFullscreenControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmFullscreenControl,\n    selectors: [[\"agm-fullscreen-control\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: AgmMapControl,\n      useExisting: AgmFullscreenControl\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AgmFullscreenControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmMapTypeControl = /*#__PURE__*/(function () {\n  var AgmMapTypeControl = /*#__PURE__*/function (_AgmMapControl2) {\n    _inherits(AgmMapTypeControl, _AgmMapControl2);\n\n    var _super3 = _createSuper(AgmMapTypeControl);\n\n    function AgmMapTypeControl() {\n      _classCallCheck(this, AgmMapTypeControl);\n\n      return _super3.apply(this, arguments);\n    }\n\n    _createClass(AgmMapTypeControl, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          mapTypeControl: true,\n          mapTypeControlOptions: {\n            position: this.position && google.maps.ControlPosition[this.position],\n            style: this.style && google.maps.MapTypeControlStyle[this.style],\n            mapTypeIds: this.mapTypeIds && this.mapTypeIds.map(function (mapTypeId) {\n              return google.maps.MapTypeId[mapTypeId];\n            })\n          }\n        };\n      }\n    }]);\n\n    return AgmMapTypeControl;\n  }(AgmMapControl);\n\n  AgmMapTypeControl.ɵfac = /*@__PURE__*/function () {\n    var ɵAgmMapTypeControl_BaseFactory;\n    return function AgmMapTypeControl_Factory(t) {\n      return (ɵAgmMapTypeControl_BaseFactory || (ɵAgmMapTypeControl_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AgmMapTypeControl)))(t || AgmMapTypeControl);\n    };\n  }();\n\n  AgmMapTypeControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmMapTypeControl,\n    selectors: [[\"agm-map-type-control\"]],\n    inputs: {\n      mapTypeIds: \"mapTypeIds\",\n      style: \"style\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: AgmMapControl,\n      useExisting: AgmMapTypeControl\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AgmMapTypeControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmPanControl = /*#__PURE__*/(function () {\n  var AgmPanControl = /*#__PURE__*/function (_AgmMapControl3) {\n    _inherits(AgmPanControl, _AgmMapControl3);\n\n    var _super4 = _createSuper(AgmPanControl);\n\n    function AgmPanControl() {\n      _classCallCheck(this, AgmPanControl);\n\n      return _super4.apply(this, arguments);\n    }\n\n    _createClass(AgmPanControl, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          panControl: true,\n          panControlOptions: {\n            position: this.position && google.maps.ControlPosition[this.position]\n          }\n        };\n      }\n    }]);\n\n    return AgmPanControl;\n  }(AgmMapControl);\n\n  AgmPanControl.ɵfac = /*@__PURE__*/function () {\n    var ɵAgmPanControl_BaseFactory;\n    return function AgmPanControl_Factory(t) {\n      return (ɵAgmPanControl_BaseFactory || (ɵAgmPanControl_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AgmPanControl)))(t || AgmPanControl);\n    };\n  }();\n\n  AgmPanControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmPanControl,\n    selectors: [[\"agm-pan-control\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: AgmMapControl,\n      useExisting: AgmPanControl\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AgmPanControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmRotateControl = /*#__PURE__*/(function () {\n  var AgmRotateControl = /*#__PURE__*/function (_AgmMapControl4) {\n    _inherits(AgmRotateControl, _AgmMapControl4);\n\n    var _super5 = _createSuper(AgmRotateControl);\n\n    function AgmRotateControl() {\n      _classCallCheck(this, AgmRotateControl);\n\n      return _super5.apply(this, arguments);\n    }\n\n    _createClass(AgmRotateControl, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          rotateControl: true,\n          rotateControlOptions: {\n            position: this.position && google.maps.ControlPosition[this.position]\n          }\n        };\n      }\n    }]);\n\n    return AgmRotateControl;\n  }(AgmMapControl);\n\n  AgmRotateControl.ɵfac = /*@__PURE__*/function () {\n    var ɵAgmRotateControl_BaseFactory;\n    return function AgmRotateControl_Factory(t) {\n      return (ɵAgmRotateControl_BaseFactory || (ɵAgmRotateControl_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AgmRotateControl)))(t || AgmRotateControl);\n    };\n  }();\n\n  AgmRotateControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmRotateControl,\n    selectors: [[\"agm-rotate-control\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: AgmMapControl,\n      useExisting: AgmRotateControl\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AgmRotateControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmScaleControl = /*#__PURE__*/(function () {\n  var AgmScaleControl = /*#__PURE__*/function (_AgmMapControl5) {\n    _inherits(AgmScaleControl, _AgmMapControl5);\n\n    var _super6 = _createSuper(AgmScaleControl);\n\n    function AgmScaleControl() {\n      _classCallCheck(this, AgmScaleControl);\n\n      return _super6.apply(this, arguments);\n    }\n\n    _createClass(AgmScaleControl, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          scaleControl: true\n        };\n      }\n    }]);\n\n    return AgmScaleControl;\n  }(AgmMapControl);\n\n  AgmScaleControl.ɵfac = /*@__PURE__*/function () {\n    var ɵAgmScaleControl_BaseFactory;\n    return function AgmScaleControl_Factory(t) {\n      return (ɵAgmScaleControl_BaseFactory || (ɵAgmScaleControl_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AgmScaleControl)))(t || AgmScaleControl);\n    };\n  }();\n\n  AgmScaleControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmScaleControl,\n    selectors: [[\"agm-scale-control\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: AgmMapControl,\n      useExisting: AgmScaleControl\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AgmScaleControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmStreetViewControl = /*#__PURE__*/(function () {\n  var AgmStreetViewControl = /*#__PURE__*/function (_AgmMapControl6) {\n    _inherits(AgmStreetViewControl, _AgmMapControl6);\n\n    var _super7 = _createSuper(AgmStreetViewControl);\n\n    function AgmStreetViewControl() {\n      _classCallCheck(this, AgmStreetViewControl);\n\n      return _super7.apply(this, arguments);\n    }\n\n    _createClass(AgmStreetViewControl, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          streetViewControl: true,\n          streetViewControlOptions: {\n            position: this.position && google.maps.ControlPosition[this.position]\n          }\n        };\n      }\n    }]);\n\n    return AgmStreetViewControl;\n  }(AgmMapControl);\n\n  AgmStreetViewControl.ɵfac = /*@__PURE__*/function () {\n    var ɵAgmStreetViewControl_BaseFactory;\n    return function AgmStreetViewControl_Factory(t) {\n      return (ɵAgmStreetViewControl_BaseFactory || (ɵAgmStreetViewControl_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AgmStreetViewControl)))(t || AgmStreetViewControl);\n    };\n  }();\n\n  AgmStreetViewControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmStreetViewControl,\n    selectors: [[\"agm-street-view-control\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: AgmMapControl,\n      useExisting: AgmStreetViewControl\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AgmStreetViewControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmZoomControl = /*#__PURE__*/(function () {\n  var AgmZoomControl = /*#__PURE__*/function (_AgmMapControl7) {\n    _inherits(AgmZoomControl, _AgmMapControl7);\n\n    var _super8 = _createSuper(AgmZoomControl);\n\n    function AgmZoomControl() {\n      _classCallCheck(this, AgmZoomControl);\n\n      return _super8.apply(this, arguments);\n    }\n\n    _createClass(AgmZoomControl, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          zoomControl: true,\n          zoomControlOptions: {\n            position: this.position && google.maps.ControlPosition[this.position],\n            style: this.style && google.maps.ZoomControlStyle[this.style]\n          }\n        };\n      }\n    }]);\n\n    return AgmZoomControl;\n  }(AgmMapControl);\n\n  AgmZoomControl.ɵfac = /*@__PURE__*/function () {\n    var ɵAgmZoomControl_BaseFactory;\n    return function AgmZoomControl_Factory(t) {\n      return (ɵAgmZoomControl_BaseFactory || (ɵAgmZoomControl_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AgmZoomControl)))(t || AgmZoomControl);\n    };\n  }();\n\n  AgmZoomControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmZoomControl,\n    selectors: [[\"agm-zoom-control\"]],\n    inputs: {\n      style: \"style\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: AgmMapControl,\n      useExisting: AgmZoomControl\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AgmZoomControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\n\nvar AgmMap = /*#__PURE__*/(function () {\n  var AgmMap = /*#__PURE__*/function () {\n    function AgmMap(_elem, _mapsWrapper, // tslint:disable-next-line: ban-types\n    _platformId, _fitBoundsService, _zone) {\n      _classCallCheck(this, AgmMap);\n\n      this._elem = _elem;\n      this._mapsWrapper = _mapsWrapper;\n      this._platformId = _platformId;\n      this._fitBoundsService = _fitBoundsService;\n      this._zone = _zone;\n      /**\n       * The longitude that defines the center of the map.\n       */\n\n      this.longitude = 0;\n      /**\n       * The latitude that defines the center of the map.\n       */\n\n      this.latitude = 0;\n      /**\n       * The zoom level of the map. The default zoom level is 8.\n       */\n\n      this.zoom = 8;\n      /**\n       * Enables/disables if map is draggable.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = true;\n      /**\n       * Enables/disables zoom and center on double click. Enabled by default.\n       */\n\n      this.disableDoubleClickZoom = false;\n      /**\n       * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n       * value cannot get updated.\n       */\n\n      this.disableDefaultUI = false;\n      /**\n       * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n       */\n\n      this.scrollwheel = true;\n      /**\n       * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n       * enabled by default.\n       */\n\n      this.keyboardShortcuts = true;\n      /**\n       * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n       * modes, these styles will only apply to labels and geometry.\n       */\n\n      this.styles = [];\n      /**\n       * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n       * used to\n       * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n       */\n\n      this.usePanning = false;\n      /**\n       * Sets the viewport to contain the given bounds.\n       * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n       */\n\n      this.fitBounds = false;\n      /**\n       * The map mapTypeId. Defaults to 'roadmap'.\n       */\n\n      this.mapTypeId = 'ROADMAP';\n      /**\n       * When false, map icons are not clickable. A map icon represents a point of interest,\n       * also known as a POI. By default map icons are clickable.\n       */\n\n      this.clickableIcons = true;\n      /**\n       * A map icon represents a point of interest, also known as a POI.\n       * When map icons are clickable by default, an info window is displayed.\n       * When this property is set to false, the info window will not be shown but the click event\n       * will still fire\n       */\n\n      this.showDefaultInfoWindow = true;\n      /**\n       * This setting controls how gestures on the map are handled.\n       * Allowed values:\n       * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n       * - 'greedy'      (All touch gestures pan or zoom the map.)\n       * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n       * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n       */\n\n      this.gestureHandling = 'auto';\n      /**\n       * Controls the automatic switching behavior for the angle of incidence of\n       * the map. The only allowed values are 0 and 45. The value 0 causes the map\n       * to always use a 0° overhead view regardless of the zoom level and\n       * viewport. The value 45 causes the tilt angle to automatically switch to\n       * 45 whenever 45° imagery is available for the current zoom level and\n       * viewport, and switch back to 0 whenever 45° imagery is not available\n       * (this is the default behavior). 45° imagery is only available for\n       * satellite and hybrid map types, within some locations, and at some zoom\n       * levels. Note: getTilt returns the current tilt angle, not the value\n       * specified by this option. Because getTilt and this option refer to\n       * different things, do not bind() the tilt property; doing so may yield\n       * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n       */\n\n      this.tilt = 0;\n      this._observableSubscriptions = [];\n      /**\n       * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n       * marker or infoWindow).\n       */\n      // tslint:disable-next-line: max-line-length\n\n      this.mapClick = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n       * on a marker or infoWindow).\n       */\n\n      this.mapRightClick = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n       * on a marker or infoWindow).\n       */\n\n      this.mapDblClick = new EventEmitter();\n      /**\n       * This event emitter is fired when the map center changes.\n       */\n\n      this.centerChange = new EventEmitter();\n      /**\n       * This event is fired when the viewport bounds have changed.\n       */\n\n      this.boundsChange = new EventEmitter();\n      /**\n       * This event is fired when the mapTypeId property changes.\n       */\n\n      this.mapTypeIdChange = new EventEmitter();\n      /**\n       * This event is fired when the map becomes idle after panning or zooming.\n       */\n\n      this.idle = new EventEmitter();\n      /**\n       * This event is fired when the zoom level has changed.\n       */\n\n      this.zoomChange = new EventEmitter();\n      /**\n       * This event is fired when the google map is fully initialized.\n       * You get the google.maps.Map instance as a result of this EventEmitter.\n       */\n\n      this.mapReady = new EventEmitter();\n      /**\n       * This event is fired when the visible tiles have finished loading.\n       */\n\n      this.tilesLoaded = new EventEmitter();\n    }\n    /** @internal */\n\n\n    _createClass(AgmMap, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        if (isPlatformServer(this._platformId)) {\n          // The code is running on the server, do nothing\n          return;\n        } // todo: this should be solved with a new component and a viewChild decorator\n\n\n        var container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n\n        this._initMapInstance(container);\n      }\n    }, {\n      key: \"_initMapInstance\",\n      value: function _initMapInstance(el) {\n        var _this66 = this;\n\n        this._mapsWrapper.createMap(el, {\n          center: {\n            lat: this.latitude || 0,\n            lng: this.longitude || 0\n          },\n          zoom: this.zoom,\n          minZoom: this.minZoom,\n          maxZoom: this.maxZoom,\n          controlSize: this.controlSize,\n          disableDefaultUI: this.disableDefaultUI,\n          disableDoubleClickZoom: this.disableDoubleClickZoom,\n          scrollwheel: this.scrollwheel,\n          backgroundColor: this.backgroundColor,\n          draggable: this.draggable,\n          draggableCursor: this.draggableCursor,\n          draggingCursor: this.draggingCursor,\n          keyboardShortcuts: this.keyboardShortcuts,\n          styles: this.styles,\n          mapTypeId: this.mapTypeId.toLocaleLowerCase(),\n          clickableIcons: this.clickableIcons,\n          gestureHandling: this.gestureHandling,\n          tilt: this.tilt,\n          restriction: this.restriction\n        }).then(function () {\n          return _this66._mapsWrapper.getNativeMap();\n        }).then(function (map) {\n          return _this66.mapReady.emit(map);\n        }); // register event listeners\n\n\n        this._handleMapCenterChange();\n\n        this._handleMapZoomChange();\n\n        this._handleMapMouseEvents();\n\n        this._handleBoundsChange();\n\n        this._handleMapTypeIdChange();\n\n        this._handleTilesLoadedEvent();\n\n        this._handleIdleEvent();\n\n        this._handleControlChange();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        }); // remove all listeners from the map instance\n\n\n        this._mapsWrapper.clearInstanceListeners();\n\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n      }\n      /* @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        this._updateMapOptionsChanges(changes);\n\n        this._updatePosition(changes);\n      }\n    }, {\n      key: \"_updateMapOptionsChanges\",\n      value: function _updateMapOptionsChanges(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmMap._mapOptionsAttributes.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        this._mapsWrapper.setMapOptions(options);\n      }\n      /**\n       * Triggers a resize event on the google map instance.\n       * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n       * Returns a promise that gets resolved after the event was triggered.\n       */\n\n    }, {\n      key: \"triggerResize\",\n      value: function triggerResize() {\n        var _this67 = this;\n\n        var recenter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            return _this67._mapsWrapper.triggerMapEvent('resize').then(function () {\n              if (recenter) {\n                _this67.fitBounds != null ? _this67._fitBounds() : _this67._setCenter();\n              }\n\n              resolve();\n            });\n          });\n        });\n      }\n    }, {\n      key: \"_updatePosition\",\n      value: function _updatePosition(changes) {\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] == null && changes['longitude'] == null && !changes['fitBounds']) {\n          // no position update needed\n          return;\n        } // tslint:enable: no-string-literal\n        // we prefer fitBounds in changes\n\n\n        if ('fitBounds' in changes) {\n          this._fitBounds();\n\n          return;\n        }\n\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n          return;\n        }\n\n        this._setCenter();\n      }\n    }, {\n      key: \"_setCenter\",\n      value: function _setCenter() {\n        var newCenter = {\n          lat: this.latitude,\n          lng: this.longitude\n        };\n\n        if (this.usePanning) {\n          this._mapsWrapper.panTo(newCenter);\n        } else {\n          this._mapsWrapper.setCenter(newCenter);\n        }\n      }\n    }, {\n      key: \"_fitBounds\",\n      value: function _fitBounds() {\n        switch (this.fitBounds) {\n          case true:\n            this._subscribeToFitBoundsUpdates();\n\n            break;\n\n          case false:\n            if (this._fitBoundsSubscription) {\n              this._fitBoundsSubscription.unsubscribe();\n            }\n\n            break;\n\n          default:\n            if (this._fitBoundsSubscription) {\n              this._fitBoundsSubscription.unsubscribe();\n            }\n\n            this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n\n        }\n      }\n    }, {\n      key: \"_subscribeToFitBoundsUpdates\",\n      value: function _subscribeToFitBoundsUpdates() {\n        var _this68 = this;\n\n        this._zone.runOutsideAngular(function () {\n          _this68._fitBoundsSubscription = _this68._fitBoundsService.getBounds$().subscribe(function (b) {\n            _this68._zone.run(function () {\n              return _this68._updateBounds(b, _this68.fitBoundsPadding);\n            });\n          });\n        });\n      }\n    }, {\n      key: \"_updateBounds\",\n      value: function _updateBounds(bounds, padding) {\n        if (!bounds) {\n          return;\n        }\n\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n          var newBounds = new google.maps.LatLngBounds();\n          newBounds.union(bounds);\n          bounds = newBounds;\n        }\n\n        if (this.usePanning) {\n          this._mapsWrapper.panToBounds(bounds, padding);\n\n          return;\n        }\n\n        this._mapsWrapper.fitBounds(bounds, padding);\n      }\n    }, {\n      key: \"_isLatLngBoundsLiteral\",\n      value: function _isLatLngBoundsLiteral(bounds) {\n        return bounds != null && bounds.extend === undefined;\n      }\n    }, {\n      key: \"_handleMapCenterChange\",\n      value: function _handleMapCenterChange() {\n        var _this69 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(function () {\n          _this69._mapsWrapper.getCenter().then(function (center) {\n            _this69.latitude = center.lat();\n            _this69.longitude = center.lng();\n\n            _this69.centerChange.emit({\n              lat: _this69.latitude,\n              lng: _this69.longitude\n            });\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleBoundsChange\",\n      value: function _handleBoundsChange() {\n        var _this70 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(function () {\n          _this70._mapsWrapper.getBounds().then(function (bounds) {\n            _this70.boundsChange.emit(bounds);\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleMapTypeIdChange\",\n      value: function _handleMapTypeIdChange() {\n        var _this71 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(function () {\n          _this71._mapsWrapper.getMapTypeId().then(function (mapTypeId) {\n            _this71.mapTypeIdChange.emit(mapTypeId);\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleMapZoomChange\",\n      value: function _handleMapZoomChange() {\n        var _this72 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(function () {\n          _this72._mapsWrapper.getZoom().then(function (z) {\n            _this72.zoom = z;\n\n            _this72.zoomChange.emit(z);\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleIdleEvent\",\n      value: function _handleIdleEvent() {\n        var _this73 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(function () {\n          _this73.idle.emit(void 0);\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleTilesLoadedEvent\",\n      value: function _handleTilesLoadedEvent() {\n        var _this74 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(function () {\n          return _this74.tilesLoaded.emit(void 0);\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleMapMouseEvents\",\n      value: function _handleMapMouseEvents() {\n        var _this75 = this;\n\n        var events = [{\n          name: 'click',\n          emitter: this.mapClick\n        }, {\n          name: 'rightclick',\n          emitter: this.mapRightClick\n        }, {\n          name: 'dblclick',\n          emitter: this.mapDblClick\n        }];\n        events.forEach(function (e) {\n          var s = _this75._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (_ref8) {\n            var _ref9 = _slicedToArray(_ref8, 1),\n                event = _ref9[0];\n\n            // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n            if (event.placeId && !_this75.showDefaultInfoWindow) {\n              event.stop();\n            }\n\n            e.emitter.emit(event);\n          });\n\n          _this75._observableSubscriptions.push(s);\n        });\n      }\n    }, {\n      key: \"_handleControlChange\",\n      value: function _handleControlChange() {\n        var _this76 = this;\n\n        this._setControls();\n\n        this.mapControls.changes.subscribe(function () {\n          return _this76._setControls();\n        });\n      }\n    }, {\n      key: \"_setControls\",\n      value: function _setControls() {\n        var _this77 = this;\n\n        var controlOptions = {\n          fullscreenControl: !this.disableDefaultUI,\n          mapTypeControl: false,\n          panControl: false,\n          rotateControl: false,\n          scaleControl: false,\n          streetViewControl: !this.disableDefaultUI,\n          zoomControl: !this.disableDefaultUI\n        };\n\n        this._mapsWrapper.getNativeMap().then(function () {\n          _this77.mapControls.forEach(function (control) {\n            return Object.assign(controlOptions, control.getOptions());\n          });\n\n          _this77._mapsWrapper.setMapOptions(controlOptions);\n        });\n      }\n    }]);\n\n    return AgmMap;\n  }();\n\n  AgmMap.ɵfac = function AgmMap_Factory(t) {\n    return new (t || AgmMap)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FitBoundsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  AgmMap.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AgmMap,\n    selectors: [[\"agm-map\"]],\n    contentQueries: function AgmMap_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmMapControl, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mapControls = _t);\n      }\n    },\n    inputs: {\n      longitude: \"longitude\",\n      latitude: \"latitude\",\n      zoom: \"zoom\",\n      draggable: [\"mapDraggable\", \"draggable\"],\n      disableDoubleClickZoom: \"disableDoubleClickZoom\",\n      disableDefaultUI: \"disableDefaultUI\",\n      scrollwheel: \"scrollwheel\",\n      keyboardShortcuts: \"keyboardShortcuts\",\n      styles: \"styles\",\n      usePanning: \"usePanning\",\n      fitBounds: \"fitBounds\",\n      mapTypeId: \"mapTypeId\",\n      clickableIcons: \"clickableIcons\",\n      showDefaultInfoWindow: \"showDefaultInfoWindow\",\n      gestureHandling: \"gestureHandling\",\n      tilt: \"tilt\",\n      minZoom: \"minZoom\",\n      maxZoom: \"maxZoom\",\n      controlSize: \"controlSize\",\n      backgroundColor: \"backgroundColor\",\n      draggableCursor: \"draggableCursor\",\n      draggingCursor: \"draggingCursor\",\n      fitBoundsPadding: \"fitBoundsPadding\",\n      restriction: \"restriction\"\n    },\n    outputs: {\n      mapClick: \"mapClick\",\n      mapRightClick: \"mapRightClick\",\n      mapDblClick: \"mapDblClick\",\n      centerChange: \"centerChange\",\n      boundsChange: \"boundsChange\",\n      mapTypeIdChange: \"mapTypeIdChange\",\n      idle: \"idle\",\n      zoomChange: \"zoomChange\",\n      mapReady: \"mapReady\",\n      tilesLoaded: \"tilesLoaded\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([CircleManager, DataLayerManager, DataLayerManager, FitBoundsService, GoogleMapsAPIWrapper, InfoWindowManager, KmlLayerManager, LayerManager, MarkerManager, PolygonManager, PolylineManager, RectangleManager]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"agm-map-container-inner\", \"sebm-google-map-container-inner\"], [1, \"agm-map-content\"]],\n    template: function AgmMap_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".agm-map-container-inner[_ngcontent-%COMP%] {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content[_ngcontent-%COMP%] {\\n      display:none;\\n    }\"]\n  });\n  /**\n   * Map option attributes that can change over time\n   */\n\n  AgmMap._mapOptionsAttributes = ['disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'styles', 'zoom', 'minZoom', 'maxZoom', 'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction'];\n  return AgmMap;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmMarker = /*#__PURE__*/(function () {\n  var AgmMarker = /*#__PURE__*/function () {\n    function AgmMarker(_markerManager) {\n      _classCallCheck(this, AgmMarker);\n\n      this._markerManager = _markerManager;\n      /**\n       * If true, the marker can be dragged. Default value is false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If true, the marker is visible\n       */\n\n      this.visible = true;\n      /**\n       * Whether to automatically open the child info window when the marker is clicked.\n       */\n\n      this.openInfoWindow = true;\n      /**\n       * The marker's opacity between 0.0 and 1.0.\n       */\n\n      this.opacity = 1;\n      /**\n       * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n       * front of markers with lower values. By default, markers are displayed according to their\n       * vertical position on screen, with lower markers appearing in front of markers further up the\n       * screen.\n       */\n\n      this.zIndex = 1;\n      /**\n       * If true, the marker can be clicked. Default value is true.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.clickable = true;\n      /**\n       * This event is fired when the marker's animation property changes.\n       */\n\n      this.animationChange = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user clicks on the marker.\n       */\n\n      this.markerClick = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user clicks twice on the marker.\n       */\n\n      this.markerDblClick = new EventEmitter();\n      /**\n       * This event is fired when the user rightclicks on the marker.\n       */\n\n      this.markerRightClick = new EventEmitter();\n      /**\n       * This event is fired when the user starts dragging the marker.\n       */\n\n      this.dragStart = new EventEmitter();\n      /**\n       * This event is repeatedly fired while the user drags the marker.\n       */\n      // tslint:disable-next-line: no-output-native\n\n      this.drag = new EventEmitter();\n      /**\n       * This event is fired when the user stops dragging the marker.\n       */\n\n      this.dragEnd = new EventEmitter();\n      /**\n       * This event is fired when the user mouses over the marker.\n       */\n\n      this.mouseOver = new EventEmitter();\n      /**\n       * This event is fired when the user mouses outside the marker.\n       */\n\n      this.mouseOut = new EventEmitter();\n      /** @internal */\n\n      this.infoWindow = new QueryList();\n      this._markerAddedToManger = false;\n      this._observableSubscriptions = [];\n      this._fitBoundsDetails$ = new ReplaySubject(1);\n      this._id = (markerId++).toString();\n    }\n    /* @internal */\n\n\n    _createClass(AgmMarker, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this78 = this;\n\n        this.handleInfoWindowUpdate();\n        this.infoWindow.changes.subscribe(function () {\n          return _this78.handleInfoWindowUpdate();\n        });\n      }\n    }, {\n      key: \"handleInfoWindowUpdate\",\n      value: function handleInfoWindowUpdate() {\n        var _this79 = this;\n\n        if (this.infoWindow.length > 1) {\n          throw new Error('Expected no more than one info window.');\n        }\n\n        this.infoWindow.forEach(function (marker) {\n          marker.hostMarker = _this79;\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (typeof this.latitude === 'string') {\n          this.latitude = Number(this.latitude);\n        }\n\n        if (typeof this.longitude === 'string') {\n          this.longitude = Number(this.longitude);\n        }\n\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n          return;\n        }\n\n        if (!this._markerAddedToManger) {\n          this._markerManager.addMarker(this);\n\n          this._updateFitBoundsDetails();\n\n          this._markerAddedToManger = true;\n\n          this._addEventListeners();\n\n          return;\n        } // tslint:disable: no-string-literal\n\n\n        if (changes['latitude'] || changes['longitude']) {\n          this._markerManager.updateMarkerPosition(this);\n\n          this._updateFitBoundsDetails();\n        }\n\n        if (changes['title']) {\n          this._markerManager.updateTitle(this);\n        }\n\n        if (changes['label']) {\n          this._markerManager.updateLabel(this);\n        }\n\n        if (changes['draggable']) {\n          this._markerManager.updateDraggable(this);\n        }\n\n        if (changes['iconUrl']) {\n          this._markerManager.updateIcon(this);\n        }\n\n        if (changes['opacity']) {\n          this._markerManager.updateOpacity(this);\n        }\n\n        if (changes['visible']) {\n          this._markerManager.updateVisible(this);\n        }\n\n        if (changes['zIndex']) {\n          this._markerManager.updateZIndex(this);\n        }\n\n        if (changes['clickable']) {\n          this._markerManager.updateClickable(this);\n        }\n\n        if (changes['animation']) {\n          this._markerManager.updateAnimation(this);\n        } // tslint:enable: no-string-literal\n\n      }\n      /** @internal */\n\n    }, {\n      key: \"getFitBoundsDetails$\",\n      value: function getFitBoundsDetails$() {\n        return this._fitBoundsDetails$.asObservable();\n      }\n    }, {\n      key: \"_updateFitBoundsDetails\",\n      value: function _updateFitBoundsDetails() {\n        this._fitBoundsDetails$.next({\n          latLng: {\n            lat: this.latitude,\n            lng: this.longitude\n          }\n        });\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this80 = this;\n\n        var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {\n          if (_this80.openInfoWindow) {\n            _this80.infoWindow.forEach(function (infoWindow) {\n              return infoWindow.open();\n            });\n          }\n\n          _this80.markerClick.emit(_this80);\n        });\n\n        this._observableSubscriptions.push(cs);\n\n        var dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(function () {\n          _this80.markerDblClick.emit(null);\n        });\n\n        this._observableSubscriptions.push(dcs);\n\n        var rc = this._markerManager.createEventObservable('rightclick', this).subscribe(function () {\n          _this80.markerRightClick.emit(null);\n        });\n\n        this._observableSubscriptions.push(rc);\n\n        var ds = this._markerManager.createEventObservable('dragstart', this).subscribe(function (e) {\n          return _this80.dragStart.emit(e);\n        });\n\n        this._observableSubscriptions.push(ds);\n\n        var d = this._markerManager.createEventObservable('drag', this).subscribe(function (e) {\n          return _this80.drag.emit(e);\n        });\n\n        this._observableSubscriptions.push(d);\n\n        var de = this._markerManager.createEventObservable('dragend', this).subscribe(function (e) {\n          return _this80.dragEnd.emit(e);\n        });\n\n        this._observableSubscriptions.push(de);\n\n        var mover = this._markerManager.createEventObservable('mouseover', this).subscribe(function (e) {\n          return _this80.mouseOver.emit(e);\n        });\n\n        this._observableSubscriptions.push(mover);\n\n        var mout = this._markerManager.createEventObservable('mouseout', this).subscribe(function (e) {\n          return _this80.mouseOut.emit(e);\n        });\n\n        this._observableSubscriptions.push(mout);\n\n        var anChng = this._markerManager.createEventObservable('animation_changed', this).subscribe(function () {\n          _this80.animationChange.emit(_this80.animation);\n        });\n\n        this._observableSubscriptions.push(anChng);\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return 'AgmMarker-' + this._id.toString();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._markerManager.deleteMarker(this); // unsubscribe all registered observable subscriptions\n\n\n        this._observableSubscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }]);\n\n    return AgmMarker;\n  }();\n\n  AgmMarker.ɵfac = function AgmMarker_Factory(t) {\n    return new (t || AgmMarker)(ɵngcc0.ɵɵdirectiveInject(MarkerManager));\n  };\n\n  AgmMarker.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmMarker,\n    selectors: [[\"agm-marker\"]],\n    contentQueries: function AgmMarker_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmInfoWindow, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoWindow = _t);\n      }\n    },\n    inputs: {\n      draggable: [\"markerDraggable\", \"draggable\"],\n      visible: \"visible\",\n      openInfoWindow: \"openInfoWindow\",\n      opacity: \"opacity\",\n      zIndex: \"zIndex\",\n      clickable: [\"markerClickable\", \"clickable\"],\n      latitude: \"latitude\",\n      longitude: \"longitude\",\n      title: \"title\",\n      label: \"label\",\n      iconUrl: \"iconUrl\",\n      animation: \"animation\"\n    },\n    outputs: {\n      animationChange: \"animationChange\",\n      markerClick: \"markerClick\",\n      markerDblClick: \"markerDblClick\",\n      markerRightClick: \"markerRightClick\",\n      dragStart: \"dragStart\",\n      drag: \"drag\",\n      dragEnd: \"dragEnd\",\n      mouseOver: \"mouseOver\",\n      mouseOut: \"mouseOut\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: FitBoundsAccessor,\n      useExisting: forwardRef(function () {\n        return AgmMarker;\n      })\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return AgmMarker;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: LatLngLiteral[] = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: LatLngLiteral[][] = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n\n\nvar AgmPolygon = /*#__PURE__*/(function () {\n  var AgmPolygon = /*#__PURE__*/function () {\n    function AgmPolygon(_polygonManager) {\n      _classCallCheck(this, AgmPolygon);\n\n      this._polygonManager = _polygonManager;\n      /**\n       * Indicates whether this Polygon handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this shape over the map. The geodesic\n       * property defines the mode of dragging. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this shape by dragging the control\n       * points shown at the vertices and on each segment. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * When true, edges of the polygon are interpreted as geodesic and will\n       * follow the curvature of the Earth. When false, edges of the polygon are\n       * rendered as straight lines in screen space. Note that the shape of a\n       * geodesic polygon may appear to change when dragged, as the dimensions\n       * are maintained relative to the surface of the earth. Defaults to false.\n       */\n\n      this.geodesic = false;\n      /**\n       * The ordered sequence of coordinates that designates a closed loop.\n       * Unlike polylines, a polygon may consist of one or more paths.\n       *  As a result, the paths property may specify one or more arrays of\n       * LatLng coordinates. Paths are closed automatically; do not repeat the\n       * first vertex of the path as the last vertex. Simple polygons may be\n       * defined using a single array of LatLngs. More complex polygons may\n       * specify an array of arrays. Any simple arrays are converted into Arrays.\n       * Inserting or removing LatLngs from the Array will automatically update\n       * the polygon on the map.\n       */\n\n      this.paths = [];\n      /**\n       * This event is fired when the DOM click event is fired on the Polygon.\n       */\n\n      this.polyClick = new EventEmitter();\n      /**\n       * This event is fired when the DOM dblclick event is fired on the Polygon.\n       */\n\n      this.polyDblClick = new EventEmitter();\n      /**\n       * This event is repeatedly fired while the user drags the polygon.\n       */\n\n      this.polyDrag = new EventEmitter();\n      /**\n       * This event is fired when the user stops dragging the polygon.\n       */\n\n      this.polyDragEnd = new EventEmitter();\n      /**\n       * This event is fired when the user starts dragging the polygon.\n       */\n\n      this.polyDragStart = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the Polygon.\n       */\n\n      this.polyMouseDown = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the Polygon.\n       */\n\n      this.polyMouseMove = new EventEmitter();\n      /**\n       * This event is fired on Polygon mouseout.\n       */\n\n      this.polyMouseOut = new EventEmitter();\n      /**\n       * This event is fired on Polygon mouseover.\n       */\n\n      this.polyMouseOver = new EventEmitter();\n      /**\n       * This event is fired whe the DOM mouseup event is fired on the Polygon\n       */\n\n      this.polyMouseUp = new EventEmitter();\n      /**\n       * This event is fired when the Polygon is right-clicked on.\n       */\n\n      this.polyRightClick = new EventEmitter();\n      /**\n       * This event is fired after Polygon first path changes.\n       */\n\n      this.polyPathsChange = new EventEmitter();\n      this._polygonAddedToManager = false;\n      this._subscriptions = [];\n    }\n    /** @internal */\n\n\n    _createClass(AgmPolygon, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        if (!this._polygonAddedToManager) {\n          this._init();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._polygonAddedToManager) {\n          this._init();\n\n          return;\n        }\n\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n      }\n    }, {\n      key: \"_init\",\n      value: function _init() {\n        this._polygonManager.addPolygon(this);\n\n        this._polygonAddedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this81 = this;\n\n        var handlers = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this81.polyClick.emit(ev);\n          }\n        }, {\n          name: 'dblclick',\n          handler: function handler(ev) {\n            return _this81.polyDblClick.emit(ev);\n          }\n        }, {\n          name: 'drag',\n          handler: function handler(ev) {\n            return _this81.polyDrag.emit(ev);\n          }\n        }, {\n          name: 'dragend',\n          handler: function handler(ev) {\n            return _this81.polyDragEnd.emit(ev);\n          }\n        }, {\n          name: 'dragstart',\n          handler: function handler(ev) {\n            return _this81.polyDragStart.emit(ev);\n          }\n        }, {\n          name: 'mousedown',\n          handler: function handler(ev) {\n            return _this81.polyMouseDown.emit(ev);\n          }\n        }, {\n          name: 'mousemove',\n          handler: function handler(ev) {\n            return _this81.polyMouseMove.emit(ev);\n          }\n        }, {\n          name: 'mouseout',\n          handler: function handler(ev) {\n            return _this81.polyMouseOut.emit(ev);\n          }\n        }, {\n          name: 'mouseover',\n          handler: function handler(ev) {\n            return _this81.polyMouseOver.emit(ev);\n          }\n        }, {\n          name: 'mouseup',\n          handler: function handler(ev) {\n            return _this81.polyMouseUp.emit(ev);\n          }\n        }, {\n          name: 'rightclick',\n          handler: function handler(ev) {\n            return _this81.polyRightClick.emit(ev);\n          }\n        }];\n        handlers.forEach(function (obj) {\n          var os = _this81._polygonManager.createEventObservable(obj.name, _this81).subscribe(obj.handler);\n\n          _this81._subscriptions.push(os);\n        });\n\n        this._polygonManager.createPathEventObservable(this).then(function (paths$) {\n          var os = paths$.subscribe(function (pathEvent) {\n            return _this81.polyPathsChange.emit(pathEvent);\n          });\n\n          _this81._subscriptions.push(os);\n        });\n      }\n    }, {\n      key: \"_updatePolygonOptions\",\n      value: function _updatePolygonOptions(changes) {\n        return Object.keys(changes).filter(function (k) {\n          return AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1;\n        }).reduce(function (obj, k) {\n          obj[k] = changes[k].currentValue;\n          return obj;\n        }, {});\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._polygonManager.deletePolygon(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath() {\n        return this._polygonManager.getPath(this);\n      }\n    }, {\n      key: \"getPaths\",\n      value: function getPaths() {\n        return this._polygonManager.getPaths(this);\n      }\n    }]);\n\n    return AgmPolygon;\n  }();\n\n  AgmPolygon.ɵfac = function AgmPolygon_Factory(t) {\n    return new (t || AgmPolygon)(ɵngcc0.ɵɵdirectiveInject(PolygonManager));\n  };\n\n  AgmPolygon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmPolygon,\n    selectors: [[\"agm-polygon\"]],\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"polyDraggable\", \"draggable\"],\n      editable: \"editable\",\n      geodesic: \"geodesic\",\n      paths: \"paths\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      strokeWeight: \"strokeWeight\",\n      visible: \"visible\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      polyClick: \"polyClick\",\n      polyDblClick: \"polyDblClick\",\n      polyDrag: \"polyDrag\",\n      polyDragEnd: \"polyDragEnd\",\n      polyDragStart: \"polyDragStart\",\n      polyMouseDown: \"polyMouseDown\",\n      polyMouseMove: \"polyMouseMove\",\n      polyMouseOut: \"polyMouseOut\",\n      polyMouseOver: \"polyMouseOver\",\n      polyMouseUp: \"polyMouseUp\",\n      polyRightClick: \"polyRightClick\",\n      polyPathsChange: \"polyPathsChange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  AgmPolygon._polygonOptionsAttributes = ['clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map', 'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable', 'editable', 'visible'];\n  return AgmPolygon;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n */\n\n\nvar AgmPolylineIcon = /*#__PURE__*/(function () {\n  var AgmPolylineIcon = /*#__PURE__*/function () {\n    function AgmPolylineIcon() {\n      _classCallCheck(this, AgmPolylineIcon);\n    }\n\n    _createClass(AgmPolylineIcon, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this.path == null) {\n          throw new Error('Icon Sequence path is required');\n        }\n      }\n    }]);\n\n    return AgmPolylineIcon;\n  }();\n\n  AgmPolylineIcon.ɵfac = function AgmPolylineIcon_Factory(t) {\n    return new (t || AgmPolylineIcon)();\n  };\n\n  AgmPolylineIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmPolylineIcon,\n    selectors: [[\"agm-icon-sequence\"]],\n    inputs: {\n      fixedRotation: \"fixedRotation\",\n      offset: \"offset\",\n      repeat: \"repeat\",\n      anchorX: \"anchorX\",\n      anchorY: \"anchorY\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      path: \"path\",\n      rotation: \"rotation\",\n      scale: \"scale\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      strokeWeight: \"strokeWeight\"\n    }\n  });\n  return AgmPolylineIcon;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\n\n\nvar AgmPolylinePoint = /*#__PURE__*/(function () {\n  var AgmPolylinePoint = /*#__PURE__*/function () {\n    function AgmPolylinePoint() {\n      _classCallCheck(this, AgmPolylinePoint);\n\n      /**\n       * This event emitter gets emitted when the position of the point changed.\n       */\n      this.positionChanged = new EventEmitter();\n    }\n\n    _createClass(AgmPolylinePoint, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] || changes['longitude']) {\n          this.positionChanged.emit({\n            lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n            lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude\n          });\n        } // tslint:enable: no-string-literal\n\n      }\n      /** @internal */\n\n    }, {\n      key: \"getFitBoundsDetails$\",\n      value: function getFitBoundsDetails$() {\n        return this.positionChanged.pipe(startWith({\n          lat: this.latitude,\n          lng: this.longitude\n        }), map(function (position) {\n          return {\n            latLng: position\n          };\n        }));\n      }\n    }]);\n\n    return AgmPolylinePoint;\n  }();\n\n  AgmPolylinePoint.ɵfac = function AgmPolylinePoint_Factory(t) {\n    return new (t || AgmPolylinePoint)();\n  };\n\n  AgmPolylinePoint.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmPolylinePoint,\n    selectors: [[\"agm-polyline-point\"]],\n    inputs: {\n      latitude: \"latitude\",\n      longitude: \"longitude\"\n    },\n    outputs: {\n      positionChanged: \"positionChanged\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: FitBoundsAccessor,\n      useExisting: forwardRef(function () {\n        return AgmPolylinePoint;\n      })\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return AgmPolylinePoint;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmPolyline = /*#__PURE__*/(function () {\n  var AgmPolyline = /*#__PURE__*/function () {\n    function AgmPolyline(_polylineManager) {\n      _classCallCheck(this, AgmPolyline);\n\n      this._polylineManager = _polylineManager;\n      /**\n       * Indicates whether this Polyline handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this shape over the map. The geodesic property defines the\n       * mode of dragging. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this shape by dragging the control points shown at the\n       * vertices and on each segment. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n       * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n       * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n       * are maintained relative to the surface of the earth. Defaults to false.\n       */\n\n      this.geodesic = false;\n      /**\n       * Whether this polyline is visible on the map. Defaults to true.\n       */\n\n      this.visible = true;\n      /**\n       * This event is fired when the DOM click event is fired on the Polyline.\n       */\n\n      this.lineClick = new EventEmitter();\n      /**\n       * This event is fired when the DOM dblclick event is fired on the Polyline.\n       */\n\n      this.lineDblClick = new EventEmitter();\n      /**\n       * This event is repeatedly fired while the user drags the polyline.\n       */\n\n      this.lineDrag = new EventEmitter();\n      /**\n       * This event is fired when the user stops dragging the polyline.\n       */\n\n      this.lineDragEnd = new EventEmitter();\n      /**\n       * This event is fired when the user starts dragging the polyline.\n       */\n\n      this.lineDragStart = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the Polyline.\n       */\n\n      this.lineMouseDown = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the Polyline.\n       */\n\n      this.lineMouseMove = new EventEmitter();\n      /**\n       * This event is fired on Polyline mouseout.\n       */\n\n      this.lineMouseOut = new EventEmitter();\n      /**\n       * This event is fired on Polyline mouseover.\n       */\n\n      this.lineMouseOver = new EventEmitter();\n      /**\n       * This event is fired whe the DOM mouseup event is fired on the Polyline\n       */\n\n      this.lineMouseUp = new EventEmitter();\n      /**\n       * This event is fired when the Polyline is right-clicked on.\n       */\n\n      this.lineRightClick = new EventEmitter();\n      /**\n       * This event is fired after Polyline's path changes.\n       */\n\n      this.polyPathChange = new EventEmitter();\n      this._polylineAddedToManager = false;\n      this._subscriptions = [];\n      this._id = (polylineId++).toString();\n    }\n    /** @internal */\n\n\n    _createClass(AgmPolyline, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this82 = this;\n\n        if (this.points.length) {\n          this.points.forEach(function (point) {\n            var s = point.positionChanged.subscribe(function () {\n              _this82._polylineManager.updatePolylinePoints(_this82);\n            });\n\n            _this82._subscriptions.push(s);\n          });\n        }\n\n        if (!this._polylineAddedToManager) {\n          this._init();\n        }\n\n        var pointSub = this.points.changes.subscribe(function () {\n          return _this82._polylineManager.updatePolylinePoints(_this82);\n        });\n\n        this._subscriptions.push(pointSub);\n\n        this._polylineManager.updatePolylinePoints(this);\n\n        var iconSub = this.iconSequences.changes.subscribe(function () {\n          return _this82._polylineManager.updateIconSequences(_this82);\n        });\n\n        this._subscriptions.push(iconSub);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._polylineAddedToManager) {\n          this._init();\n\n          return;\n        }\n\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          return options[k] = changes[k].currentValue;\n        });\n\n        this._polylineManager.setPolylineOptions(this, options);\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath() {\n        return this._polylineManager.getPath(this);\n      }\n    }, {\n      key: \"_init\",\n      value: function _init() {\n        this._polylineManager.addPolyline(this);\n\n        this._polylineAddedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this83 = this;\n\n        var handlers = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this83.lineClick.emit(ev);\n          }\n        }, {\n          name: 'dblclick',\n          handler: function handler(ev) {\n            return _this83.lineDblClick.emit(ev);\n          }\n        }, {\n          name: 'drag',\n          handler: function handler(ev) {\n            return _this83.lineDrag.emit(ev);\n          }\n        }, {\n          name: 'dragend',\n          handler: function handler(ev) {\n            return _this83.lineDragEnd.emit(ev);\n          }\n        }, {\n          name: 'dragstart',\n          handler: function handler(ev) {\n            return _this83.lineDragStart.emit(ev);\n          }\n        }, {\n          name: 'mousedown',\n          handler: function handler(ev) {\n            return _this83.lineMouseDown.emit(ev);\n          }\n        }, {\n          name: 'mousemove',\n          handler: function handler(ev) {\n            return _this83.lineMouseMove.emit(ev);\n          }\n        }, {\n          name: 'mouseout',\n          handler: function handler(ev) {\n            return _this83.lineMouseOut.emit(ev);\n          }\n        }, {\n          name: 'mouseover',\n          handler: function handler(ev) {\n            return _this83.lineMouseOver.emit(ev);\n          }\n        }, {\n          name: 'mouseup',\n          handler: function handler(ev) {\n            return _this83.lineMouseUp.emit(ev);\n          }\n        }, {\n          name: 'rightclick',\n          handler: function handler(ev) {\n            return _this83.lineRightClick.emit(ev);\n          }\n        }];\n        handlers.forEach(function (obj) {\n          var os = _this83._polylineManager.createEventObservable(obj.name, _this83).subscribe(obj.handler);\n\n          _this83._subscriptions.push(os);\n        });\n\n        this._polylineManager.createPathEventObservable(this).then(function (ob$) {\n          var os = ob$.subscribe(function (pathEvent) {\n            return _this83.polyPathChange.emit(pathEvent);\n          });\n\n          _this83._subscriptions.push(os);\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"_getPoints\",\n      value: function _getPoints() {\n        if (this.points) {\n          return this.points.toArray();\n        }\n\n        return [];\n      }\n    }, {\n      key: \"_getIcons\",\n      value: function _getIcons() {\n        if (this.iconSequences) {\n          return this.iconSequences.toArray();\n        }\n\n        return [];\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._polylineManager.deletePolyline(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }]);\n\n    return AgmPolyline;\n  }();\n\n  AgmPolyline.ɵfac = function AgmPolyline_Factory(t) {\n    return new (t || AgmPolyline)(ɵngcc0.ɵɵdirectiveInject(PolylineManager));\n  };\n\n  AgmPolyline.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmPolyline,\n    selectors: [[\"agm-polyline\"]],\n    contentQueries: function AgmPolyline_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylinePoint, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylineIcon, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.points = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconSequences = _t);\n      }\n    },\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"polylineDraggable\", \"draggable\"],\n      editable: \"editable\",\n      geodesic: \"geodesic\",\n      visible: \"visible\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      strokeWeight: \"strokeWeight\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      lineClick: \"lineClick\",\n      lineDblClick: \"lineDblClick\",\n      lineDrag: \"lineDrag\",\n      lineDragEnd: \"lineDragEnd\",\n      lineDragStart: \"lineDragStart\",\n      lineMouseDown: \"lineMouseDown\",\n      lineMouseMove: \"lineMouseMove\",\n      lineMouseOut: \"lineMouseOut\",\n      lineMouseOver: \"lineMouseOver\",\n      lineMouseUp: \"lineMouseUp\",\n      lineRightClick: \"lineRightClick\",\n      polyPathChange: \"polyPathChange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  AgmPolyline._polylineOptionsAttributes = ['draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'zIndex'];\n  return AgmPolyline;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AgmRectangle = /*#__PURE__*/(function () {\n  var AgmRectangle = /*#__PURE__*/function () {\n    function AgmRectangle(_manager) {\n      _classCallCheck(this, AgmRectangle);\n\n      this._manager = _manager;\n      /**\n       * Indicates whether this Rectangle handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this rectangle over the map. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this rectangle by dragging the control points shown at\n       * the center and around the circumference of the rectangle. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * The stroke position. Defaults to CENTER.\n       * This property is not supported on Internet Explorer 8 and earlier.\n       */\n\n      this.strokePosition = 'CENTER';\n      /**\n       * The stroke width in pixels.\n       */\n\n      this.strokeWeight = 0;\n      /**\n       * Whether this rectangle is visible on the map. Defaults to true.\n       */\n\n      this.visible = true;\n      /**\n       * This event is fired when the rectangle's is changed.\n       */\n\n      this.boundsChange = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user clicks on the rectangle.\n       */\n\n      this.rectangleClick = new EventEmitter();\n      /**\n       * This event emitter gets emitted when the user clicks on the rectangle.\n       */\n\n      this.rectangleDblClick = new EventEmitter();\n      /**\n       * This event is repeatedly fired while the user drags the rectangle.\n       */\n      // tslint:disable-next-line: no-output-native\n\n      this.drag = new EventEmitter();\n      /**\n       * This event is fired when the user stops dragging the rectangle.\n       */\n\n      this.dragEnd = new EventEmitter();\n      /**\n       * This event is fired when the user starts dragging the rectangle.\n       */\n\n      this.dragStart = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the rectangle.\n       */\n\n      this.mouseDown = new EventEmitter();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the rectangle.\n       */\n\n      this.mouseMove = new EventEmitter();\n      /**\n       * This event is fired on rectangle mouseout.\n       */\n\n      this.mouseOut = new EventEmitter();\n      /**\n       * This event is fired on rectangle mouseover.\n       */\n\n      this.mouseOver = new EventEmitter();\n      /**\n       * This event is fired when the DOM mouseup event is fired on the rectangle.\n       */\n\n      this.mouseUp = new EventEmitter();\n      /**\n       * This event is fired when the rectangle is right-clicked on.\n       */\n\n      this.rightClick = new EventEmitter();\n      this._rectangleAddedToManager = false;\n      this._eventSubscriptions = [];\n    }\n    /** @internal */\n\n\n    _createClass(AgmRectangle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._manager.addRectangle(this);\n\n        this._rectangleAddedToManager = true;\n\n        this._registerEventListeners();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._rectangleAddedToManager) {\n          return;\n        } // tslint:disable: no-string-literal\n\n\n        if (changes['north'] || changes['east'] || changes['south'] || changes['west']) {\n          this._manager.setBounds(this);\n        }\n\n        if (changes['editable']) {\n          this._manager.setEditable(this);\n        }\n\n        if (changes['draggable']) {\n          this._manager.setDraggable(this);\n        }\n\n        if (changes['visible']) {\n          this._manager.setVisible(this);\n        } // tslint:enable: no-string-literal\n\n\n        this._updateRectangleOptionsChanges(changes);\n      }\n    }, {\n      key: \"_updateRectangleOptionsChanges\",\n      value: function _updateRectangleOptionsChanges(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmRectangle._mapOptions.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        if (optionKeys.length > 0) {\n          this._manager.setOptions(this, options);\n        }\n      }\n    }, {\n      key: \"_registerEventListeners\",\n      value: function _registerEventListeners() {\n        var _this84 = this;\n\n        var events = new Map();\n        events.set('bounds_changed', this.boundsChange);\n        events.set('click', this.rectangleClick);\n        events.set('dblclick', this.rectangleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragStart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('rightclick', this.rightClick);\n        events.forEach(function (eventEmitter, eventName) {\n          _this84._eventSubscriptions.push(_this84._manager.createEventObservable(eventName, _this84).subscribe(function (value) {\n            switch (eventName) {\n              case 'bounds_changed':\n                _this84._manager.getBounds(_this84).then(function (bounds) {\n                  return eventEmitter.emit({\n                    north: bounds.getNorthEast().lat(),\n                    east: bounds.getNorthEast().lng(),\n                    south: bounds.getSouthWest().lat(),\n                    west: bounds.getSouthWest().lng()\n                  });\n                });\n\n                break;\n\n              default:\n                eventEmitter.emit(value);\n            }\n          }));\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n\n        this._eventSubscriptions = null;\n\n        this._manager.removeRectangle(this);\n      }\n      /**\n       * Gets the LatLngBounds of this Rectangle.\n       */\n\n    }, {\n      key: \"getBounds\",\n      value: function getBounds() {\n        return this._manager.getBounds(this);\n      }\n    }]);\n\n    return AgmRectangle;\n  }();\n\n  AgmRectangle.ɵfac = function AgmRectangle_Factory(t) {\n    return new (t || AgmRectangle)(ɵngcc0.ɵɵdirectiveInject(RectangleManager));\n  };\n\n  AgmRectangle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmRectangle,\n    selectors: [[\"agm-rectangle\"]],\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"rectangleDraggable\", \"draggable\"],\n      editable: \"editable\",\n      strokePosition: \"strokePosition\",\n      strokeWeight: \"strokeWeight\",\n      visible: \"visible\",\n      north: \"north\",\n      east: \"east\",\n      south: \"south\",\n      west: \"west\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      boundsChange: \"boundsChange\",\n      rectangleClick: \"rectangleClick\",\n      rectangleDblClick: \"rectangleDblClick\",\n      drag: \"drag\",\n      dragEnd: \"dragEnd\",\n      dragStart: \"dragStart\",\n      mouseDown: \"mouseDown\",\n      mouseMove: \"mouseMove\",\n      mouseOut: \"mouseOut\",\n      mouseOver: \"mouseOver\",\n      mouseUp: \"mouseUp\",\n      rightClick: \"rightClick\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  AgmRectangle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n  return AgmRectangle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\n\nvar AgmTransitLayer = /*#__PURE__*/(function () {\n  var AgmTransitLayer = /*#__PURE__*/function () {\n    function AgmTransitLayer(_manager) {\n      _classCallCheck(this, AgmTransitLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId$3++).toString();\n      /**\n       * Hide/show transit layer\n       */\n\n      this.visible = true;\n    }\n\n    _createClass(AgmTransitLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addTransitLayer(this);\n\n        this._addedToManager = true;\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmTransitLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteLayer(this);\n      }\n    }]);\n\n    return AgmTransitLayer;\n  }();\n\n  AgmTransitLayer.ɵfac = function AgmTransitLayer_Factory(t) {\n    return new (t || AgmTransitLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager));\n  };\n\n  AgmTransitLayer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmTransitLayer,\n    selectors: [[\"agm-transit-layer\"]],\n    inputs: {\n      visible: \"visible\"\n    }\n  });\n  return AgmTransitLayer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @internal\n */\n\n\nfunction coreDirectives() {\n  return [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n\n\nvar AgmCoreModule = /*#__PURE__*/(function () {\n  var AgmCoreModule = /*#__PURE__*/function () {\n    function AgmCoreModule() {\n      _classCallCheck(this, AgmCoreModule);\n    }\n\n    _createClass(AgmCoreModule, null, [{\n      key: \"forRoot\",\n      value:\n      /**\n       * Please use this method when you register the module at the root level.\n       */\n      function forRoot(lazyMapsAPILoaderConfig) {\n        return {\n          ngModule: AgmCoreModule,\n          providers: [].concat(BROWSER_GLOBALS_PROVIDERS, [{\n            provide: MapsAPILoader,\n            useClass: LazyMapsAPILoader\n          }, {\n            provide: LAZY_MAPS_API_CONFIG,\n            useValue: lazyMapsAPILoaderConfig\n          }])\n        };\n      }\n    }]);\n\n    return AgmCoreModule;\n  }();\n\n  AgmCoreModule.ɵfac = function AgmCoreModule_Factory(t) {\n    return new (t || AgmCoreModule)();\n  };\n\n  AgmCoreModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AgmCoreModule\n  });\n  AgmCoreModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return AgmCoreModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmCoreModule, {\n    declarations: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl],\n    exports: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl]\n  });\n})();\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl, CircleManager, DataLayerManager, FitBoundsAccessor, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, coreDirectives, FitBoundsService as ɵa, AgmMapControl as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe }; //# sourceMappingURL=agm-core.js.map","map":null,"metadata":{},"sourceType":"module"}