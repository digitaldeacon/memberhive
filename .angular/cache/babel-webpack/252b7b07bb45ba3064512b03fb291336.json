{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { createSelector } from '@ngrx/store';\nimport { PeopleActionTypes } from './person.actions';\nimport * as common from '../../common/common.model';\nvar initialPersonState = {\n  loaded: false,\n  loading: false,\n  people: [],\n  personId: ''\n};\nexport function personReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialPersonState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case PeopleActionTypes.LIST_PEOPLE:\n    case PeopleActionTypes.UPDATE_PERSON:\n    case PeopleActionTypes.CREATE_PERSON:\n    case PeopleActionTypes.DELETE_PERSON:\n    case PeopleActionTypes.UPLOAD_PERSON_AVATAR:\n      return Object.assign({}, state, {\n        loading: true\n      });\n\n    case PeopleActionTypes.CLEAR_PERSON_MESSAGE:\n      return Object.assign({}, state, {\n        message: undefined\n      });\n\n    case PeopleActionTypes.LIST_PEOPLE_SUCCESS:\n      {\n        var payload = action.payload;\n        return Object.assign({}, state, {\n          loaded: true,\n          loading: false,\n          people: payload\n        });\n      }\n\n    case PeopleActionTypes.VIEW_PERSON:\n      {\n        return Object.assign({}, state, {\n          personId: action.payload\n        });\n      }\n\n    case PeopleActionTypes.UPDATE_PERSON_SUCCESS:\n      {\n        var _payload = action.payload;\n        var message = {\n          type: common.MessageType.SUCCESS,\n          text: 'Successfully updated ' + _payload.fullName\n        };\n        return {\n          loaded: true,\n          loading: false,\n          message: message,\n          people: state.people.map(function (p) {\n            return p.uid === _payload.uid ? Object.assign({}, p, _payload) : p;\n          }),\n          personId: state.personId\n        };\n      }\n\n    case PeopleActionTypes.DELETE_PERSON_SUCCESS:\n      {\n        var _payload2 = action.payload;\n        var _message = {\n          type: common.MessageType.SUCCESS,\n          text: 'Successfully deleted this person'\n        };\n        return Object.assign({}, state, {\n          loaded: true,\n          loading: false,\n          message: _message,\n          people: state.people.filter(function (p) {\n            return p.id !== _payload2.id;\n          })\n        });\n      }\n\n    case PeopleActionTypes.CALC_PERSON_GEO_FAILURE:\n    case PeopleActionTypes.LIST_PEOPLE_FAILURE:\n    case PeopleActionTypes.CREATE_PERSON_FAILURE:\n    case PeopleActionTypes.DELETE_PERSON_FAILURE:\n    case PeopleActionTypes.UPDATE_PERSON_FAILURE:\n      {\n        var res = action.payload;\n        var _message2 = {\n          type: common.MessageType.FAILURE,\n          text: res.message\n        };\n        return Object.assign({}, state, {\n          loading: false,\n          loaded: false,\n          message: _message2\n        });\n      }\n\n    case PeopleActionTypes.CREATE_PERSON_SUCCESS:\n      {\n        var _payload3 = action.payload;\n        var _message3 = {\n          type: common.MessageType.SUCCESS,\n          text: 'Successfully created ' + _payload3.fullName\n        };\n        return Object.assign({}, state, {\n          loading: false,\n          loaded: true,\n          message: _message3,\n          lastCreated: _payload3.uid,\n          people: [].concat(_toConsumableArray(state.people), [_payload3])\n        });\n      }\n\n    case PeopleActionTypes.CALC_PERSON_GEO_SUCCESS:\n      {\n        var _payload4 = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          people: state.people.map(function (p) {\n            if (p.uid === _payload4.person.uid) {\n              p.address = _payload4.person.address;\n              return p;\n            }\n\n            return p;\n          })\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport var loadedPerson = function loadedPerson(state) {\n  return state.loaded;\n};\nexport var loadingPerson = function loadingPerson(state) {\n  return state.loading;\n};\nexport var messagePerson = function messagePerson(state) {\n  return state.message;\n};\nexport var people = function people(state) {\n  return state.people;\n};\nexport var lastCreatedPersonId = function lastCreatedPersonId(state) {\n  return state.lastCreated;\n};\nexport var selectedId = function selectedId(state) {\n  return state.personId;\n};\nexport var person = createSelector(people, selectedId, function (ppl, uid) {\n  return ppl.filter(function (p) {\n    return p.uid === uid;\n  })[0];\n});","map":null,"metadata":{},"sourceType":"module"}