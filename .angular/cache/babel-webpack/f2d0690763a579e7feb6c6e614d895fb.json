{"ast":null,"code":"import _classCallCheck from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as jwt_decode_ from 'jwt-decode';\nimport * as localForage from 'localforage';\nimport * as i0 from \"@angular/core\";\nvar jwt_decode = jwt_decode_;\nvar TOKEN = 'token';\nvar CLIENT = 'client';\nvar UID = 'uid';\nvar CREATEDAT = 'createdAt';\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService() {\n      _classCallCheck(this, AuthService);\n\n      this._token = '';\n      this._clientToken = '';\n      this._uid = '';\n      this._createdAt = null;\n      this._cachedRequests = [];\n    }\n\n    _createClass(AuthService, [{\n      key: \"token\",\n      get: function get() {\n        var _this = this;\n\n        if (!this._token) {\n          localForage.getItem(TOKEN).then(function (val) {\n            _this._token = val;\n          });\n        }\n\n        return this._token;\n      },\n      set: function set(token) {\n        this._token = token;\n        localForage.setItem(TOKEN, token);\n      }\n    }, {\n      key: \"personId\",\n      get: function get() {\n        var _this2 = this;\n\n        localForage.getItem(UID).then(function (val) {\n          _this2._uid = val;\n        }).catch(function (err) {// console.log('Error fetching from forage:', err);\n        });\n        return this._uid;\n      },\n      set: function set(uid) {\n        localForage.setItem(UID, uid);\n        this._uid = uid;\n      }\n    }, {\n      key: \"createdAt\",\n      get: function get() {\n        var _this3 = this;\n\n        localForage.getItem(CREATEDAT).then(function (val) {\n          _this3._createdAt = val;\n        }).catch(function (err) {// console.log('Error fetching from forage:', err);\n        });\n        return this._createdAt;\n      },\n      set: function set(dateTime) {\n        localForage.setItem(CREATEDAT, dateTime);\n        this._createdAt = dateTime;\n      }\n    }, {\n      key: \"clearStore\",\n      value: function clearStore() {\n        this.createdAt = undefined;\n        this._cachedRequests = [];\n        this.token = '';\n        this.personId = '';\n        return localForage.clear();\n      }\n    }, {\n      key: \"getTokenExpirationDate\",\n      value: function getTokenExpirationDate() {\n        if (!this.token) {\n          return undefined;\n        }\n\n        var decoded = jwt_decode(this.token);\n\n        if (!decoded.hasOwnProperty('exp')) {\n          return undefined;\n        }\n\n        var date = new Date(0);\n        date.setUTCSeconds(decoded.exp);\n        return date;\n      }\n    }, {\n      key: \"isTokenExpired\",\n      value: function isTokenExpired() {\n        if (!this.token) return true;\n        var date = this.getTokenExpirationDate();\n\n        if (date === undefined) {\n          return false;\n        }\n\n        return !(date.valueOf() > new Date().valueOf());\n      }\n    }, {\n      key: \"collectFailedRequest\",\n      value: function collectFailedRequest(request) {\n        this._cachedRequests.push(request);\n      }\n    }, {\n      key: \"retryFailedRequests\",\n      value: function retryFailedRequests() {// retry the requests. this method can\n        // be called after the token is refreshed\n        // console.log(this._cachedRequests);\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}