{"ast":null,"code":"import { createSelector } from '@ngrx/store';\nimport * as interaction from './modules/interaction/index';\nimport * as person from './modules/person/index';\nimport * as settings from './modules/settings/index';\nimport * as auth from './modules/auth/index';\nimport * as tags from './modules/tags/index';\nimport * as family from './modules/family/index';\nexport var reducers = {\n  interaction: interaction.interactionReducer,\n  person: person.personReducer,\n  settings: settings.settingsReducer,\n  tags: tags.tagReducer,\n  family: family.familyReducer,\n  auth: auth.authReducer\n};\n/**\n * By default, @ngrx/store uses combineReducers with the reducer map to compose\n * the root meta-reducer. To add more meta-reducers, provide an array of meta-reducers\n * that will be composed to form the root meta-reducer.\n */\n\nexport var metaReducers = [];\n/**\n * People Reducers\n */\n\nexport var getPersonState = function getPersonState(state) {\n  return state.person;\n};\nexport var getPeople = createSelector(getPersonState, person.people);\nexport var getSelectedPerson = createSelector(getPersonState, person.person);\nexport var getLastCreatedPersonId = createSelector(getPersonState, person.lastCreatedPersonId);\n/**\n * Auth Reducers\n */\n\nexport var getAuthState = function getAuthState(state) {\n  return state.auth;\n};\nexport var isAuth = createSelector(getAuthState, auth.isAuthenticated);\nexport var isAuthLoading = createSelector(getAuthState, auth.isAuthenticationLoading);\nexport var getAuthError = createSelector(getAuthState, auth.getAuthenticationError);\nexport var isAuthLoaded = createSelector(getAuthState, auth.isAuthenticatedLoaded);\nexport var getAuthPersonId = createSelector(getAuthState, auth.getPersonId);\nexport var getAuthPerson = createSelector(getPeople, getAuthPersonId, function (people, personId) {\n  return people.filter(function (p) {\n    return p.uid === personId;\n  })[0];\n});\n/**\n * Settings Reducers\n */\n\nexport var getSettingsState = function getSettingsState(state) {\n  return state.settings;\n};\nexport var getLayoutSettings = createSelector(getSettingsState, settings.layoutSettings);\nexport var getPeopleSettings = createSelector(getSettingsState, settings.peopleSettings);\nexport var getPeopleListSettings = createSelector(getSettingsState, settings.peopleListSettings);\nexport var getPeopleFilterSettings = createSelector(getSettingsState, settings.peopleFilterSettings);\nexport var getProfileSettings = createSelector(getSettingsState, settings.profileSettings);\nexport var getSysSettings = createSelector(getSettingsState, settings.sysSettings);\nexport var getShowDrawer = createSelector(getSettingsState, settings.showDrawer);\nexport var getTitle = createSelector(getSettingsState, settings.title);\nexport var getContextButtons = createSelector(getSettingsState, settings.contextButtons);\nexport var getSysGoogleKey = createSelector(getSettingsState, settings.sysGoogleKey);\nexport var getPeopleSysSettings = createSelector(getPeopleSettings, getSysSettings, function (people, system) {\n  return Object.assign({}, people, system);\n});\nexport var isAwaitingFormSubmit = createSelector(getSettingsState, settings.awaitingFormSubmit);\n/**\n * Interaction Reducers\n */\n\nexport var getInteractionState = function getInteractionState(state) {\n  return state.interaction;\n};\nexport var getInteractions = createSelector(getInteractionState, interaction.interactions);\nexport var getMyInteractions = createSelector(getInteractions, getAuthPersonId, function (interactions, personId) {\n  return interactions.filter(function (i) {\n    return i.recipients.indexOf(personId) > -1;\n  });\n});\nexport var getInteractionsPerson = createSelector(getInteractions, getSelectedPerson, function (interactions, p) {\n  return interactions.filter(function (i) {\n    return i.refId === p.uid;\n  });\n});\n/**\n * Tag Reducers\n */\n\nexport var getTagState = function getTagState(state) {\n  return state.tags;\n};\nexport var getTags = createSelector(getTagState, tags.tags);\n/**\n * Family Reducers\n */\n\nexport var getFamilyState = function getFamilyState(state) {\n  return state.family;\n};\nexport var getFamilies = createSelector(getFamilyState, family.families);\nexport var getFamilyPerson = createSelector(getFamilies, getSelectedPerson, function (families, p) {\n  return 'id' in p.family ? families.filter(function (f) {\n    return f.id === p.family.id;\n  }) : [];\n});\n/**\n * Loading  Reducers\n */\n\nexport var getLoadingP = createSelector(getPersonState, person.loadingPerson);\nexport var getLoadingS = createSelector(getSettingsState, settings.loadingSettings);\nexport var getLoadingI = createSelector(getInteractions, interaction.loadingInteraction);\nexport var getLoadingT = createSelector(getTags, tags.loadingTags);\nexport var getLoading = createSelector(getLoadingP, getLoadingS, getLoadingI, function (lP, lS, lI) {\n  return lP || lS || lI;\n});\n/**\n * Message  Reducers\n */\n\nexport var getMessageP = createSelector(getPersonState, person.messagePerson);\nexport var getMessageS = createSelector(getSettingsState, settings.messageSettings);\nexport var getMessageI = createSelector(getInteractionState, interaction.messageInteraction);\nexport var getMessageT = createSelector(getTagState, tags.messageTags);\nexport var getMessageF = createSelector(getFamilyState, family.messageFamilies);\nexport var getMessage = createSelector(getMessageP, getMessageS, getMessageI, getMessageT, getMessageF, function (msgP, msgS, msgI, msgT, msgF) {\n  return msgP || msgS || msgI || msgT || msgF;\n}); // TODO: make this work (below)\n\n/*export const getMessage: any = (state: AppState) => [getMessageP, getMessageS]\n        .find(messageSelector => messageSelector(state));*/\n\nexport var getPeopleWithFilter = createSelector(getPeople, getPeopleFilterSettings, function (people, filter) {\n  if (filter && filter.hasOwnProperty('term')) {\n    return people.filter(search, filter.term.split(' '));\n  } else {\n    return people;\n  }\n\n  function search(prs) {\n    return this.every(function (searchTerm) {\n      var found = false;\n      var fieldSearch = searchTerm.split(':');\n\n      if (fieldSearch.length === 1) {\n        var sFullname = prs.fullName.includes(searchTerm);\n        var sStatus = prs.status.some(function (s) {\n          return s.text.includes(searchTerm);\n        });\n        found = sFullname || sStatus;\n      } else {\n        var filterSet = person.personFilterSet.filter(function (set) {\n          return set.label === fieldSearch[0].toLocaleLowerCase();\n        })[0];\n\n        if (filterSet.key === 'age') {\n          var exprRange = fieldSearch[1].split('-'); // const exprGt = fieldSearch[1].split('>');\n          // const exprLt = fieldSearch[1].split('<');\n\n          if (exprRange.length > 1) {\n            found = prs[filterSet.key] >= parseInt(exprRange[0], 10) && prs[filterSet.key] <= parseInt(exprRange[1], 10);\n          } else {\n            found = parseInt(fieldSearch[1], 10) === prs[filterSet.key];\n          }\n        } else {\n          found = fieldSearch[1] === prs[filterSet.key];\n        }\n      }\n\n      return found;\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}