{"ast":null,"code":"import { AuthActionTypes } from './auth.actions';\nimport { HttpErrorResponse } from '@angular/common/http';\nvar initialAuthState = {\n  authenticated: false,\n  personId: '',\n  loading: false,\n  loaded: false,\n  status: 200\n};\nexport function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAuthState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case AuthActionTypes.AUTHENTICATE:\n      return Object.assign({}, state, {\n        loading: true\n      });\n\n    case AuthActionTypes.AUTHENTICATE_SUCCESS:\n      {\n        var user = action.payload;\n        return {\n          authenticated: user && user.token !== undefined,\n          token: user ? user.token : '',\n          personId: user ? user.personId : '',\n          loaded: true,\n          loading: false,\n          status: 200\n        };\n      }\n\n    case AuthActionTypes.AUTHENTICATE_FAILURE:\n      {\n        var res = action.payload;\n        var rawStatus = [504, 404];\n        var error = typeof res === 'string' ? res : '';\n        var status = 403;\n\n        if (res instanceof HttpErrorResponse && rawStatus.indexOf(res.status) === -1) {\n          error = res.message;\n          status = res.status;\n        }\n\n        return {\n          authenticated: false,\n          loaded: false,\n          loading: false,\n          personId: '',\n          error: error,\n          status: status\n        };\n      }\n\n    case AuthActionTypes.SIGN_OUT_FAILURE:\n      return Object.assign({}, state, {\n        authenticated: true,\n        loaded: true,\n        loading: false,\n        error: action.payload,\n        personId: state.personId\n      });\n\n    case AuthActionTypes.SIGN_OUT_SUCCESS:\n      {\n        return Object.assign({}, state, initialAuthState);\n      }\n\n    case AuthActionTypes.REAUTHENTICATE:\n      return Object.assign({}, state, {\n        loading: true,\n        token: action.payload\n      });\n\n    case AuthActionTypes.REAUTHENTICATION_SUCCESS:\n      return Object.assign({}, state, {\n        authenticated: true,\n        token: action.payload.token,\n        personId: action.payload.personId,\n        loaded: true,\n        loading: false,\n        status: 200\n      });\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport var isAuthenticated = function isAuthenticated(state) {\n  return state.authenticated;\n};\nexport var isAuthenticatedLoaded = function isAuthenticatedLoaded(state) {\n  return state.loaded;\n};\nexport var isAuthenticationLoading = function isAuthenticationLoading(state) {\n  return state.loading;\n};\nexport var getToken = function getToken(state) {\n  return state.token;\n};\nexport var getPersonId = function getPersonId(state) {\n  return state.personId;\n};\nexport var getAuthenticationError = function getAuthenticationError(state) {\n  return state.error;\n};\nexport var getStatus = function getStatus(state) {\n  return state.status;\n};","map":null,"metadata":{},"sourceType":"module"}