{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/memberhive/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { SettingsActionTypes } from './settings.actions';\nimport * as model from './settings.model';\nimport * as common from '../../common/common.model';\nvar initialState = {\n  loaded: false,\n  loading: false,\n  layout: {\n    showDrawer: true,\n    title: '',\n    module: ''\n  },\n  people: {\n    list: ['email'],\n    filter: {\n      term: '',\n      saved: []\n    }\n  },\n  system: {\n    churchName: 'Your Church',\n    googleApiKey: 'AIzaSyDT14mzMDZMtIwMXa1zNUOxqVYYylPvLIo'\n  },\n  profile: {},\n  dashboard: {},\n  awaitFormSubmit: false\n};\nexport function settingsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SettingsActionTypes.DELETE_PEOPLE_FILTER:\n    case SettingsActionTypes.SAVE_PEOPLE_FILTER:\n    case SettingsActionTypes.LIST_SETTINGS:\n    case SettingsActionTypes.UPDATE_SETTINGS:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n    case SettingsActionTypes.CLEAR_SETTINGS_MESSAGE:\n      return Object.assign({}, state, {\n        message: undefined\n      });\n\n    case SettingsActionTypes.LIST_SETTINGS_SUCCESS:\n      {\n        var settings = action.payload;\n        settings.loading = false;\n        settings.loaded = true;\n        return Object.assign({}, state, settings);\n      }\n\n    case SettingsActionTypes.UPDATE_SETTINGS_FAILURE:\n    case SettingsActionTypes.LIST_SETTINGS_FAILURE:\n      {\n        var message = {\n          type: common.MessageType.FAILURE,\n          text: 'Setting failure: ' + action.payload // TODO: @I18n\n\n        };\n        return Object.assign({}, state, {\n          loading: false,\n          loaded: false,\n          message: message\n        });\n      }\n\n    case SettingsActionTypes.UPDATE_SETTINGS_SUCCESS:\n      {\n        var payload = action.payload;\n        var types = Object.keys(payload);\n        var values = Object.values(payload);\n        var msg = {\n          type: common.MessageType.SUCCESS,\n          text: 'Successfully updated settings' // TODO: @I18n\n\n        };\n        var system = state.system;\n        var people = state.people;\n        var layout = state.layout;\n        var i = 0;\n\n        for (var _i = 0, _types = types; _i < _types.length; _i++) {\n          var section = _types[_i];\n\n          if (section === model.SettingType.PEOPLE) {\n            people = Object.assign({}, state.people, values[i]);\n          }\n\n          if (section === model.SettingType.SYSTEM) {\n            system = Object.assign({}, state.system, values[i]);\n          }\n\n          if (section === model.SettingType.LAYOUT) {\n            msg = undefined;\n            layout = Object.assign({}, state.layout, values[i]);\n          }\n\n          i++;\n        }\n\n        return Object.assign({}, state, {\n          loading: false,\n          loaded: true,\n          message: msg,\n          layout: layout,\n          people: people,\n          system: system,\n          profile: state.profile,\n          dashboard: state.dashboard\n        });\n      }\n\n    case SettingsActionTypes.TOGGLE_DRAWER:\n      {\n        return Object.assign({}, state, {\n          layout: {\n            showDrawer: action.payload,\n            contextButtons: state.layout.contextButtons\n          }\n        });\n      }\n\n    case SettingsActionTypes.SET_CONTEXT_BUTTONS:\n      {\n        return Object.assign({}, state, {\n          layout: {\n            showDrawer: state.layout.showDrawer,\n            title: state.layout.title,\n            contextButtons: action.payload\n          }\n        });\n      }\n\n    case SettingsActionTypes.PERSIST_PEOPLE_FILTER:\n      {\n        var savedFilters = state.people.hasOwnProperty('filter') ? state.people.filter.saved : [];\n        return Object.assign({}, state, {\n          people: {\n            list: state.people.list,\n            filter: {\n              term: action.payload,\n              saved: savedFilters\n            }\n          }\n        });\n      }\n\n    case SettingsActionTypes.SAVE_PEOPLE_FILTER_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          loading: false,\n          loaded: true,\n          people: {\n            list: state.people.list,\n            filter: {\n              term: state.people.filter.term,\n              saved: [].concat(_toConsumableArray(state.people.filter.saved), [action.payload])\n            }\n          }\n        });\n      }\n\n    case SettingsActionTypes.DELETE_PEOPLE_FILTER_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          loading: false,\n          loaded: true,\n          people: {\n            list: state.people.list,\n            filter: {\n              term: state.people.filter.term,\n              saved: state.people.filter.saved.filter(function (term) {\n                return term !== action.payload;\n              })\n            }\n          }\n        });\n      }\n\n    case SettingsActionTypes.SET_TITLE:\n      {\n        return Object.assign({}, state, {\n          layout: {\n            showDrawer: state.layout.showDrawer,\n            title: action.payload,\n            contextButtons: state.layout.contextButtons\n          }\n        });\n      }\n\n    case SettingsActionTypes.AWAIT_FORM_SUBMIT:\n      {\n        return Object.assign({}, state, {\n          awaitFormSubmit: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n}\nexport var loadedSettings = function loadedSettings(state) {\n  return state.loaded;\n};\nexport var loadingSettings = function loadingSettings(state) {\n  return state.loading;\n};\nexport var messageSettings = function messageSettings(state) {\n  return state.message;\n};\nexport var layoutSettings = function layoutSettings(state) {\n  return state.layout;\n};\nexport var peopleSettings = function peopleSettings(state) {\n  return state.people;\n};\nexport var sysSettings = function sysSettings(state) {\n  return state.system;\n};\nexport var peopleListSettings = function peopleListSettings(state) {\n  return state.people.list;\n};\nexport var profileSettings = function profileSettings(state) {\n  return state.profile;\n};\nexport var showDrawer = function showDrawer(state) {\n  return state.layout.showDrawer;\n};\nexport var title = function title(state) {\n  return state.layout.title;\n};\nexport var module = function module(state) {\n  return state.layout.module;\n};\nexport var contextButtons = function contextButtons(state) {\n  return state.layout.contextButtons;\n};\nexport var sysGoogleKey = function sysGoogleKey(state) {\n  return state.system.googleApiKey;\n};\nexport var peopleFilterSettings = function peopleFilterSettings(state) {\n  return state.people.filter;\n};\nexport var awaitingFormSubmit = function awaitingFormSubmit(state) {\n  return state.awaitFormSubmit;\n};","map":null,"metadata":{},"sourceType":"module"}